
BlinkLed_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f4  080047f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000010  08004808  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08004808  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e31c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280c  00000000  00000000  0002e394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a68  00000000  00000000  00031920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e50  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fcc  00000000  00000000  0004a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008508e  00000000  00000000  0005c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003764  00000000  00000000  000e1234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080047b0 	.word	0x080047b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080047b0 	.word	0x080047b0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d102      	bne.n	8000664 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 800065e:	2350      	movs	r3, #80	; 0x50
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e001      	b.n	8000668 <CAN_IF_Transmit_UDS_Request+0x20>
   }
   else{
	   Local_u8SendToNode = 0x60;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000678:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <CAN_IF_Transmit_UDS_Request+0x5c>)
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <CAN_IF_Transmit_UDS_Request+0x60>)
 800068e:	f001 fd17 	bl	80020c0 <HAL_CAN_AddTxMessage>
 8000692:	4603      	mov	r3, r0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000594 	.word	0x20000594
 80006a0:	200005c8 	.word	0x200005c8
 80006a4:	200005d8 	.word	0x200005d8
 80006a8:	200004a8 	.word	0x200004a8

080006ac <CAN_IF_Trasmit_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Trasmit_Data_Frame(uint8_t Node ,const uint8_t *DataBuffer ,uint8_t DataLength){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	//Check Is buffer NULL
	if(DataBuffer == NULL){
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <CAN_IF_Trasmit_Data_Frame+0x1a>
		return HAL_ERROR ;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e02b      	b.n	800071e <CAN_IF_Trasmit_Data_Frame+0x72>
	}
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d102      	bne.n	80006d2 <CAN_IF_Trasmit_Data_Frame+0x26>
	   Local_u8SendToNode = 0x50; //Send to 0x101
 80006cc:	2350      	movs	r3, #80	; 0x50
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <CAN_IF_Trasmit_Data_Frame+0x2a>
   }
   else{
	   Local_u8SendToNode = 0x60; //Send to 0x102
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006e6:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = DataLength;  // data length
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006ec:	6113      	str	r3, [r2, #16]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <CAN_IF_Trasmit_Data_Frame+0x5c>
	  TxData[index] = *( DataBuffer + index );
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	7811      	ldrb	r1, [r2, #0]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000700:	54d1      	strb	r1, [r2, r3]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bba      	ldrb	r2, [r7, #14]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f1      	bcc.n	80006f4 <CAN_IF_Trasmit_Data_Frame+0x48>
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <CAN_IF_Trasmit_Data_Frame+0x84>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <CAN_IF_Trasmit_Data_Frame+0x88>)
 8000718:	f001 fcd2 	bl	80020c0 <HAL_CAN_AddTxMessage>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000594 	.word	0x20000594
 800072c:	200005c8 	.word	0x200005c8
 8000730:	200005d8 	.word	0x200005d8
 8000734:	200004a8 	.word	0x200004a8

08000738 <CAN_IF_Receive_UDS_Respond>:

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <CAN_IF_Receive_UDS_Respond+0x40>)
 8000754:	2100      	movs	r1, #0
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000758:	f001 fd81 	bl	800225e <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200004a8 	.word	0x200004a8
 8000774:	200005d0 	.word	0x200005d0
 8000778:	200005ac 	.word	0x200005ac

0800077c <Decrypt_Address_Read_Init>:
static GlobalFlag Global_BufferFlag  ;

volatile uint32_t Global_ReadAddress ;

void  Decrypt_Address_Read_Init (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	Global_ReadAddress  = STORE_AREA_START_ADDRESS ;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <Decrypt_Address_Read_Init+0x14>)
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <Decrypt_Address_Read_Init+0x18>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000038 	.word	0x20000038
 8000794:	08005000 	.word	0x08005000

08000798 <Decrypt_MainFunction>:

void Decrypt_MainFunction (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

	Std_ReturnType status ;
	
	 /*check system state value "Data receive point "*/
		status = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007a0:	f000 fc66 	bl	8001070 <Rte_ReadSystemState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
	
		/* Check if there is an error during read operation */
		if (E_OK == status)
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d133      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		{			
			/* make sure that system state is Decrypt  */
			if (SYS_DECRYPT == Global_SystemState)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d12f      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			{
				  /*Read buffer Flag  "Data receive point "*/
			    status = RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Global_BufferFlag);
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007b8:	f000 fc14 	bl	8000fe4 <Rte_ReadDecryptedDataBufferFlag>
 80007bc:	4603      	mov	r3, r0
 80007be:	71bb      	strb	r3, [r7, #6]
			   	/* Check if there is an error during read operation */
		        if (E_OK == status)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d127      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		        {
					   /* make sure that buffer state is not set  */
		            if (BUFFER_NOT_SET == Global_BufferFlag)
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d123      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			        {
	                              /*access piont to decrypt SWC*/								
			      	          /*Read Decrypted Data from flash rom*/
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e00f      	b.n	80007f4 <Decrypt_MainFunction+0x5c>
						{
		                	Global_PlainDataPtr[Local_Counter] = (*(volatile uint8_t*)(Global_ReadAddress) ) ;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	b2d1      	uxtb	r1, r2
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <Decrypt_MainFunction+0x94>)
 80007e2:	54d1      	strb	r1, [r2, r3]
							Global_ReadAddress++;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007ec:	6013      	str	r3, [r2, #0]
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9ec      	bls.n	80007d4 <Decrypt_MainFunction+0x3c>
						}
              
						if( E_OK == status )
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
//							    if( E_OK == status )
//                                {
//			                        /*Write decrypted buffer to decrypt port "Data send point "*/
//                                    status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
//								}
							status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <Decrypt_MainFunction+0x94>)
 8000802:	f000 fb85 	bl	8000f10 <Rte_WriteDecryptedDataBuffer>
 8000806:	4603      	mov	r3, r0
 8000808:	71bb      	strb	r3, [r7, #6]
							 /*Change buffer flag value to set "Data send point "*/
							RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(BUFFER_SET);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fbc8 	bl	8000fa0 <Rte_WriteDecryptedDataBufferFlag>
							 /*Change system flag to SEND , "Data send point "*/
							RTE_WRITE_SYSTEM_STATE(SYS_SEND_UPDATE);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fc0b 	bl	800102c <Rte_WriteSystemState>
			{
									/* Do nothing */
							/*system state is not Decrypt*/							
			}						
        }				      
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000034 	.word	0x20000034
 8000824:	20000035 	.word	0x20000035
 8000828:	20000038 	.word	0x20000038
 800082c:	2000002c 	.word	0x2000002c

08000830 <FR_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void FR_voidInitVariables (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <FR_voidInitVariables+0x14>)
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <FR_voidInitVariables+0x18>)
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000003c 	.word	0x2000003c
 8000848:	0800a800 	.word	0x0800a800

0800084c <FR_FlashBlockToAddress>:


HAL_StatusTypeDef FR_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 800085c:	2300      	movs	r3, #0
 800085e:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000860:	2300      	movs	r3, #0
 8000862:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <FR_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e024      	b.n	80008ba <FR_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000870:	2300      	movs	r3, #0
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	e01d      	b.n	80008b2 <FR_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b21a      	sxth	r2, r3
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	440b      	add	r3, r1
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	817b      	strh	r3, [r7, #10]
			FR_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	897a      	ldrh	r2, [r7, #10]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f832 	bl	8000906 <FR_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008aa:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 80008ac:	89bb      	ldrh	r3, [r7, #12]
 80008ae:	3302      	adds	r3, #2
 80008b0:	81bb      	strh	r3, [r7, #12]
 80008b2:	89ba      	ldrh	r2, [r7, #12]
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3dd      	bcc.n	8000876 <FR_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000003c 	.word	0x2000003c

080008c8 <FR_Erase_Image>:

HAL_StatusTypeDef FR_Erase_Image(uint32_t ImageAddress)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	22;
 80008dc:	2316      	movs	r3, #22
 80008de:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80008e0:	f002 f80e 	bl	8002900 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80008e4:	f107 0208 	add.w	r2, r7, #8
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f8ee 	bl	8002ad0 <HAL_FLASHEx_Erase>
 80008f4:	4603      	mov	r3, r0
 80008f6:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Lock();
 80008f8:	f002 f828 	bl	800294c <HAL_FLASH_Lock>

	return Local_retVal;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <FR_FlashHalfWordToAddress>:


HAL_StatusTypeDef FR_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000906:	b5b0      	push	{r4, r5, r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000912:	f001 fff5 	bl	8002900 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	2200      	movs	r2, #0
 800091a:	461c      	mov	r4, r3
 800091c:	4615      	mov	r5, r2
 800091e:	4622      	mov	r2, r4
 8000920:	462b      	mov	r3, r5
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	2001      	movs	r0, #1
 8000926:	f001 ff7b 	bl	8002820 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 800092e:	f002 f80d 	bl	800294c <HAL_FLASH_Lock>

	return Local_retVal;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bdb0      	pop	{r4, r5, r7, pc}

0800093c <ReceiveUpdate_MainFunction>:
	/* Init ESP (uart) interrupt to receive requests */
	HAL_UART_Receive_IT(&huart1 , Global_HeaderBuffer , 1);
}

void ReceiveUpdate_MainFunction (void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
	switch(Global_RxInternalSate)
 8000942:	4b96      	ldr	r3, [pc, #600]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b05      	cmp	r3, #5
 8000948:	f200 8180 	bhi.w	8000c4c <ReceiveUpdate_MainFunction+0x310>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <ReceiveUpdate_MainFunction+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	0800096d 	.word	0x0800096d
 8000958:	0800099b 	.word	0x0800099b
 800095c:	080009ef 	.word	0x080009ef
 8000960:	08000a95 	.word	0x08000a95
 8000964:	08000bd9 	.word	0x08000bd9
 8000968:	080009b7 	.word	0x080009b7
	{
		case RX_IDLE:
		{
			uint8_t Local_Error = RTE_READ_USER_RESPONSE(&Global_RxUserResponse);
 800096c:	488c      	ldr	r0, [pc, #560]	; (8000ba0 <ReceiveUpdate_MainFunction+0x264>)
 800096e:	f000 fba3 	bl	80010b8 <Rte_ReadUserResponse>
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
			if(Local_Error == E_OK)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10e      	bne.n	800099a <ReceiveUpdate_MainFunction+0x5e>
			{
				if (Global_RxUserResponse == ACCEPT_UPDATE)
 800097c:	4b88      	ldr	r3, [pc, #544]	; (8000ba0 <ReceiveUpdate_MainFunction+0x264>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d103      	bne.n	800098c <ReceiveUpdate_MainFunction+0x50>
				{
					Global_RxInternalSate = RX_ACCEPT_UPDATE ;
 8000984:	4b85      	ldr	r3, [pc, #532]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	e006      	b.n	800099a <ReceiveUpdate_MainFunction+0x5e>
				}
				else if (Global_RxUserResponse == REFUSE_UPDATE)
 800098c:	4b84      	ldr	r3, [pc, #528]	; (8000ba0 <ReceiveUpdate_MainFunction+0x264>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d102      	bne.n	800099a <ReceiveUpdate_MainFunction+0x5e>
				{
					Global_RxInternalSate = RX_REFUSE_UPDATE ;
 8000994:	4b81      	ldr	r3, [pc, #516]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 8000996:	2205      	movs	r2, #5
 8000998:	701a      	strb	r2, [r3, #0]
		}
		/*****************************RX_ACCEPT_UPDATE ***********************************/
		case RX_ACCEPT_UPDATE :
		{
			/* Inform ESP to accept request */
			Global_HeaderReqByte = REQUEST_ACCEPTED;
 800099a:	4b82      	ldr	r3, [pc, #520]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 800099c:	2205      	movs	r2, #5
 800099e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	2201      	movs	r2, #1
 80009a6:	497f      	ldr	r1, [pc, #508]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 80009a8:	487f      	ldr	r0, [pc, #508]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 80009aa:	f003 f879 	bl	8003aa0 <HAL_UART_Transmit>
			/* Change Internal State */
			Global_RxInternalSate = RX_RECEIVE_HEADER ;
 80009ae:	4b7b      	ldr	r3, [pc, #492]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	701a      	strb	r2, [r3, #0]
			break;
 80009b4:	e14b      	b.n	8000c4e <ReceiveUpdate_MainFunction+0x312>
		}
		/*****************************RX_REFUSE_UPDATE***********************************/
		case RX_REFUSE_UPDATE :
		{
			/* Inform ESP to Reject request */
			Global_HeaderReqByte = REQUEST_REFUSED;
 80009b6:	4b7b      	ldr	r3, [pc, #492]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 80009b8:	2206      	movs	r2, #6
 80009ba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	2201      	movs	r2, #1
 80009c2:	4978      	ldr	r1, [pc, #480]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 80009c4:	4878      	ldr	r0, [pc, #480]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 80009c6:	f003 f86b 	bl	8003aa0 <HAL_UART_Transmit>
			/* Initialize */
			Global_RxUserResponse = INITIAL_VALUE;
 80009ca:	4b75      	ldr	r3, [pc, #468]	; (8000ba0 <ReceiveUpdate_MainFunction+0x264>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_IDLE);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fb2b 	bl	800102c <Rte_WriteSystemState>
			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80009d6:	4b74      	ldr	r3, [pc, #464]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	4b72      	ldr	r3, [pc, #456]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f042 0220 	orr.w	r2, r2, #32
 80009e4:	60da      	str	r2, [r3, #12]
			/* Change Internal State */
			Global_RxInternalSate = RX_IDLE ;
 80009e6:	4b6d      	ldr	r3, [pc, #436]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			break;
 80009ec:	e12f      	b.n	8000c4e <ReceiveUpdate_MainFunction+0x312>
		}
		/*****************************RX_RECEIVE_HEADER***********************************/
		case RX_RECEIVE_HEADER :
		{
			/* Inform ESP to send Header */
			Global_HeaderReqByte = ESP_SEND_HEADER;
 80009ee:	4b6d      	ldr	r3, [pc, #436]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	2201      	movs	r2, #1
 80009fa:	496a      	ldr	r1, [pc, #424]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 80009fc:	486a      	ldr	r0, [pc, #424]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 80009fe:	f003 f84f 	bl	8003aa0 <HAL_UART_Transmit>

			/* Receive Header */
			HAL_UART_Receive(&huart1, Global_HeaderBuffer, HEADER_SIZE, HAL_MAX_DELAY);
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	2205      	movs	r2, #5
 8000a08:	4968      	ldr	r1, [pc, #416]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a0a:	4867      	ldr	r0, [pc, #412]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000a0c:	f003 f8cb 	bl	8003ba6 <HAL_UART_Receive>

			/* Process header */
			Global_SizeValue = Global_HeaderBuffer[0] | (Global_HeaderBuffer[1] << SHIFT_BY_8) |(Global_HeaderBuffer[2] << SHIFT_BY_16) | (Global_HeaderBuffer[3] << SHIFT_BY_24);
 8000a10:	4b66      	ldr	r3, [pc, #408]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b65      	ldr	r3, [pc, #404]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a18:	785b      	ldrb	r3, [r3, #1]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	4b63      	ldr	r3, [pc, #396]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	041b      	lsls	r3, r3, #16
 8000a24:	431a      	orrs	r2, r3
 8000a26:	4b61      	ldr	r3, [pc, #388]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a28:	78db      	ldrb	r3, [r3, #3]
 8000a2a:	061b      	lsls	r3, r3, #24
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b5f      	ldr	r3, [pc, #380]	; (8000bb0 <ReceiveUpdate_MainFunction+0x274>)
 8000a32:	601a      	str	r2, [r3, #0]
			Global_NodeId = Global_HeaderBuffer[4];
 8000a34:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <ReceiveUpdate_MainFunction+0x270>)
 8000a36:	791a      	ldrb	r2, [r3, #4]
 8000a38:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <ReceiveUpdate_MainFunction+0x278>)
 8000a3a:	701a      	strb	r2, [r3, #0]

			/* Write Data To RTE */
			RTE_WRITE_CODE_SIZE(Global_SizeValue);
 8000a3c:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <ReceiveUpdate_MainFunction+0x274>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f9b7 	bl	8000db4 <Rte_WriteCodeSize>
			RTE_WRITE_NODE_ID(Global_NodeId);
 8000a46:	4b5b      	ldr	r3, [pc, #364]	; (8000bb4 <ReceiveUpdate_MainFunction+0x278>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f96c 	bl	8000d28 <Rte_WriteNodeId>
			RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fa17 	bl	8000e84 <Rte_WriteHeaderAckFlag>

			/* Get info from header */
			Global_NumberOfPackets  = (uint8_t)(Global_SizeValue / PACKET_SIZE) ;
 8000a56:	4b56      	ldr	r3, [pc, #344]	; (8000bb0 <ReceiveUpdate_MainFunction+0x274>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	0a9b      	lsrs	r3, r3, #10
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <ReceiveUpdate_MainFunction+0x27c>)
 8000a60:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = (Global_SizeValue % PACKET_SIZE);
 8000a62:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <ReceiveUpdate_MainFunction+0x274>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <ReceiveUpdate_MainFunction+0x280>)
 8000a70:	801a      	strh	r2, [r3, #0]

			/* Ack Header */
			Global_HeaderReqByte = HEADER_RECEIVED;
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4949      	ldr	r1, [pc, #292]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000a80:	4849      	ldr	r0, [pc, #292]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000a82:	f003 f80d 	bl	8003aa0 <HAL_UART_Transmit>
			/*Erase Image to flash new firmware from Telematic unit*/
			FR_Erase_Image(IMAGE_NEW_FIRMWARE);
 8000a86:	484e      	ldr	r0, [pc, #312]	; (8000bc0 <ReceiveUpdate_MainFunction+0x284>)
 8000a88:	f7ff ff1e 	bl	80008c8 <FR_Erase_Image>
			/* Change State */
			Global_RxInternalSate = RX_RECEIVE_PACKET ;
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	701a      	strb	r2, [r3, #0]

			break;
 8000a92:	e0dc      	b.n	8000c4e <ReceiveUpdate_MainFunction+0x312>
		}
		case RX_RECEIVE_PACKET:
		{
			/* Inform ESP to send Package */
			Global_HeaderReqByte = SEND_NEXT_PACKET;
 8000a94:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4940      	ldr	r1, [pc, #256]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000aa2:	4841      	ldr	r0, [pc, #260]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000aa4:	f002 fffc 	bl	8003aa0 <HAL_UART_Transmit>

			if (Global_NumberOfPackets > 0)
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <ReceiveUpdate_MainFunction+0x27c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d023      	beq.n	8000af8 <ReceiveUpdate_MainFunction+0x1bc>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, PACKET_SIZE, HAL_MAX_DELAY);
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	4942      	ldr	r1, [pc, #264]	; (8000bc4 <ReceiveUpdate_MainFunction+0x288>)
 8000aba:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000abc:	f003 f873 	bl	8003ba6 <HAL_UART_Receive>
				Global_NumberOfPackets--;
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <ReceiveUpdate_MainFunction+0x27c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <ReceiveUpdate_MainFunction+0x27c>)
 8000aca:	701a      	strb	r2, [r3, #0]
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , PACKET_SIZE);
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	483c      	ldr	r0, [pc, #240]	; (8000bc4 <ReceiveUpdate_MainFunction+0x288>)
 8000ad2:	f7ff febb 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack Packet */
				Global_HeaderReqByte = PACKET_RECEIVED;
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000ad8:	220a      	movs	r2, #10
 8000ada:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4930      	ldr	r1, [pc, #192]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000ae4:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000ae6:	f002 ffdb 	bl	8003aa0 <HAL_UART_Transmit>

				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += PACKET_SIZE ;
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <ReceiveUpdate_MainFunction+0x28c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <ReceiveUpdate_MainFunction+0x28c>)
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e029      	b.n	8000b4c <ReceiveUpdate_MainFunction+0x210>
			}

			else if ((Global_NumberOfPackets == 0) && (Global_RemainingBytes > 0) )
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <ReceiveUpdate_MainFunction+0x27c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d125      	bne.n	8000b4c <ReceiveUpdate_MainFunction+0x210>
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <ReceiveUpdate_MainFunction+0x280>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d021      	beq.n	8000b4c <ReceiveUpdate_MainFunction+0x210>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, Global_RemainingBytes, HAL_MAX_DELAY);
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <ReceiveUpdate_MainFunction+0x280>)
 8000b0a:	881a      	ldrh	r2, [r3, #0]
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	492c      	ldr	r1, [pc, #176]	; (8000bc4 <ReceiveUpdate_MainFunction+0x288>)
 8000b12:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000b14:	f003 f847 	bl	8003ba6 <HAL_UART_Receive>
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , PACKET_SIZE);
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4829      	ldr	r0, [pc, #164]	; (8000bc4 <ReceiveUpdate_MainFunction+0x288>)
 8000b1e:	f7ff fe95 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack last packet */
				Global_HeaderReqByte = LAST_PACKET_RECEIVED;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000b24:	220b      	movs	r2, #11
 8000b26:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	491d      	ldr	r1, [pc, #116]	; (8000ba4 <ReceiveUpdate_MainFunction+0x268>)
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <ReceiveUpdate_MainFunction+0x26c>)
 8000b32:	f002 ffb5 	bl	8003aa0 <HAL_UART_Transmit>
				/* Change Internal state */
				Global_RxInternalSate = RX_END_STATE ;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <ReceiveUpdate_MainFunction+0x260>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	701a      	strb	r2, [r3, #0]
				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += Global_RemainingBytes ;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <ReceiveUpdate_MainFunction+0x280>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <ReceiveUpdate_MainFunction+0x28c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <ReceiveUpdate_MainFunction+0x28c>)
 8000b4a:	6013      	str	r3, [r2, #0]
			else
			{
				/* Error */
			}
			/*Calculate progress */
			Global_DownloadPercentage = ((float)Global_ReceivedBytes /(float) Global_SizeValue) ;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <ReceiveUpdate_MainFunction+0x28c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fbb1 	bl	80002b8 <__aeabi_ui2f>
 8000b56:	4604      	mov	r4, r0
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <ReceiveUpdate_MainFunction+0x274>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fbab 	bl	80002b8 <__aeabi_ui2f>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff fcb2 	bl	80004d0 <__aeabi_fdiv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <ReceiveUpdate_MainFunction+0x290>)
 8000b72:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = Global_DownloadPercentage * 100 ;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <ReceiveUpdate_MainFunction+0x290>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4915      	ldr	r1, [pc, #84]	; (8000bd0 <ReceiveUpdate_MainFunction+0x294>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fbf4 	bl	8000368 <__aeabi_fmul>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fd40 	bl	8000608 <__aeabi_f2uiz>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <ReceiveUpdate_MainFunction+0x298>)
 8000b8e:	701a      	strb	r2, [r3, #0]
			/* Write to RTE to Signal UserIntrface Module */
			RTE_WRITE_DOWNLOAD_PROGRESS (Global_DownloadUpdateProgeress);
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <ReceiveUpdate_MainFunction+0x298>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fab3 	bl	8001100 <Rte_WriteUpdateProgress>
			break;
 8000b9a:	e058      	b.n	8000c4e <ReceiveUpdate_MainFunction+0x312>
 8000b9c:	2000004a 	.word	0x2000004a
 8000ba0:	20000056 	.word	0x20000056
 8000ba4:	20000051 	.word	0x20000051
 8000ba8:	20000524 	.word	0x20000524
 8000bac:	2000004c 	.word	0x2000004c
 8000bb0:	20000044 	.word	0x20000044
 8000bb4:	20000048 	.word	0x20000048
 8000bb8:	20000052 	.word	0x20000052
 8000bbc:	20000054 	.word	0x20000054
 8000bc0:	0800a800 	.word	0x0800a800
 8000bc4:	20000058 	.word	0x20000058
 8000bc8:	20000460 	.word	0x20000460
 8000bcc:	20000458 	.word	0x20000458
 8000bd0:	42c80000 	.word	0x42c80000
 8000bd4:	2000045c 	.word	0x2000045c
		}
		/*****************************RX_END_STATE***********************************/
		case RX_END_STATE :
		{
			/* Inform the Esp Code has been received */
			Global_HeaderReqByte = ESP_DOWNLOAD_DONE;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <ReceiveUpdate_MainFunction+0x31c>)
 8000bda:	220d      	movs	r2, #13
 8000bdc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2201      	movs	r2, #1
 8000be4:	491c      	ldr	r1, [pc, #112]	; (8000c58 <ReceiveUpdate_MainFunction+0x31c>)
 8000be6:	481d      	ldr	r0, [pc, #116]	; (8000c5c <ReceiveUpdate_MainFunction+0x320>)
 8000be8:	f002 ff5a 	bl	8003aa0 <HAL_UART_Transmit>

			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 fa1d 	bl	800102c <Rte_WriteSystemState>

			/* Reset Variables */
			Global_CrcValue = INITIAL_VALUE;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <ReceiveUpdate_MainFunction+0x324>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
			Global_SizeValue = INITIAL_VALUE;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <ReceiveUpdate_MainFunction+0x328>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
			Global_NodeId = INITIAL_VALUE;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <ReceiveUpdate_MainFunction+0x32c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
			Global_NumberOfPackets = INITIAL_VALUE;
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <ReceiveUpdate_MainFunction+0x330>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = INITIAL_VALUE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <ReceiveUpdate_MainFunction+0x334>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
			Global_RxUserResponse = INITIAL_VALUE;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <ReceiveUpdate_MainFunction+0x338>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
			Global_DownloadPercentage = INITIAL_VALUE;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <ReceiveUpdate_MainFunction+0x33c>)
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = INITIAL_VALUE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <ReceiveUpdate_MainFunction+0x340>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
			Global_ReceivedBytes = INITIAL_VALUE;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <ReceiveUpdate_MainFunction+0x344>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]

			RTE_WRITE_DOWNLOAD_PROGRESS(INITIAL_VALUE);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 fa68 	bl	8001100 <Rte_WriteUpdateProgress>

			/* Reset ReProgram Address Variables */
			FR_voidInitVariables();
 8000c30:	f7ff fdfe 	bl	8000830 <FR_voidInitVariables>

			/* Change system state */
			Global_RxInternalSate = RX_IDLE;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <ReceiveUpdate_MainFunction+0x348>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]

			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <ReceiveUpdate_MainFunction+0x320>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <ReceiveUpdate_MainFunction+0x320>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0220 	orr.w	r2, r2, #32
 8000c48:	60da      	str	r2, [r3, #12]
			break;
 8000c4a:	e000      	b.n	8000c4e <ReceiveUpdate_MainFunction+0x312>
		}

		/*****************************DEFUALT (ERROR)***********************************/
		default :
			/* Error */
			break ;
 8000c4c:	bf00      	nop

	}
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000051 	.word	0x20000051
 8000c5c:	20000524 	.word	0x20000524
 8000c60:	20000040 	.word	0x20000040
 8000c64:	20000044 	.word	0x20000044
 8000c68:	20000048 	.word	0x20000048
 8000c6c:	20000052 	.word	0x20000052
 8000c70:	20000054 	.word	0x20000054
 8000c74:	20000056 	.word	0x20000056
 8000c78:	20000458 	.word	0x20000458
 8000c7c:	2000045c 	.word	0x2000045c
 8000c80:	20000460 	.word	0x20000460
 8000c84:	2000004a 	.word	0x2000004a

08000c88 <HAL_UART_RxCpltCallback>:

/**************************************************************************/
/*                         Esp Uart Handler                               */
/**************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_Error ;
	/* Check of the ESP request */
	if (NEW_UPDATE_REQUEST == Global_HeaderBuffer[0])
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_UART_RxCpltCallback+0x90>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d130      	bne.n	8000cfa <HAL_UART_RxCpltCallback+0x72>
	{
		Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <HAL_UART_RxCpltCallback+0x94>)
 8000c9a:	f000 f9e9 	bl	8001070 <Rte_ReadSystemState>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
		/* Check whether a read operation of the system state done successfully or not */
		if (E_OK == Local_Error)
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d11a      	bne.n	8000cde <HAL_UART_RxCpltCallback+0x56>
		{
			/* Before accepting update request will check the system state */
			if (SYS_IDLE == Global_SystemState)
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_UART_RxCpltCallback+0x94>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10b      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x40>
			{
				/* Accept the request and change system state */
				RTE_WRITE_SYSTEM_STATE(SYS_NEW_UPDATE_REQ);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f9bb 	bl	800102c <Rte_WriteSystemState>
				/* Disble the interrupt till receive the code by synch function */
				__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_UART_RxCpltCallback+0x98>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_RxCpltCallback+0x98>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0220 	bic.w	r2, r2, #32
 8000cc4:	60da      	str	r2, [r3, #12]
		/* Response for unvalid requests */
		Global_HeaderReqByte = INVALID_REQUEST;
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
	}

}
 8000cc6:	e022      	b.n	8000d0e <HAL_UART_RxCpltCallback+0x86>
				Global_HeaderReqByte = GATEWAY_BUSY;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4913      	ldr	r1, [pc, #76]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <HAL_UART_RxCpltCallback+0x98>)
 8000cd8:	f002 fee2 	bl	8003aa0 <HAL_UART_Transmit>
}
 8000cdc:	e017      	b.n	8000d0e <HAL_UART_RxCpltCallback+0x86>
		else if (E_NOT_OK == Local_Error)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d114      	bne.n	8000d0e <HAL_UART_RxCpltCallback+0x86>
			Global_HeaderReqByte = SYSTEM_STATE_UNDIFINED;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	2201      	movs	r2, #1
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_UART_RxCpltCallback+0x98>)
 8000cf4:	f002 fed4 	bl	8003aa0 <HAL_UART_Transmit>
}
 8000cf8:	e009      	b.n	8000d0e <HAL_UART_RxCpltCallback+0x86>
		Global_HeaderReqByte = INVALID_REQUEST;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2201      	movs	r2, #1
 8000d06:	4907      	ldr	r1, [pc, #28]	; (8000d24 <HAL_UART_RxCpltCallback+0x9c>)
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_UART_RxCpltCallback+0x98>)
 8000d0a:	f002 fec9 	bl	8003aa0 <HAL_UART_Transmit>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000004c 	.word	0x2000004c
 8000d1c:	20000049 	.word	0x20000049
 8000d20:	20000524 	.word	0x20000524
 8000d24:	20000051 	.word	0x20000051

08000d28 <Rte_WriteNodeId>:

/**************************************************************************/
/*                         NodeId Port                                    */
/**************************************************************************/
Std_ReturnType Rte_WriteNodeId (uint8_t Cpy_NodeId)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
	
	if (Global_NodeIdPortState == IDLE)
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <Rte_WriteNodeId+0x3c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <Rte_WriteNodeId+0x2a>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <Rte_WriteNodeId+0x3c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_NodeId = Cpy_NodeId ; 
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <Rte_WriteNodeId+0x40>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <Rte_WriteNodeId+0x3c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e001      	b.n	8000d56 <Rte_WriteNodeId+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000047a 	.word	0x2000047a
 8000d68:	2000046c 	.word	0x2000046c

08000d6c <Rte_ReadNodeId>:

Std_ReturnType Rte_ReadNodeId (uint8_t *Cpy_NodeId)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_NodeIdPortState == IDLE) && (Cpy_NodeId != NULL_PTR))
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <Rte_ReadNodeId+0x40>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10d      	bne.n	8000d9c <Rte_ReadNodeId+0x30>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00a      	beq.n	8000d9c <Rte_ReadNodeId+0x30>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <Rte_ReadNodeId+0x40>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_NodeId) = Global_NodeId ; 
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <Rte_ReadNodeId+0x44>)
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <Rte_ReadNodeId+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e001      	b.n	8000da0 <Rte_ReadNodeId+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	2000047a 	.word	0x2000047a
 8000db0:	2000046c 	.word	0x2000046c

08000db4 <Rte_WriteCodeSize>:

/**************************************************************************/
/*                         CodeSize Port                                  */
/**************************************************************************/
Std_ReturnType Rte_WriteCodeSize(uint32_t Cpy_CodeSize)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
	
	if (Global_CodeSizePortState == IDLE)
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <Rte_WriteCodeSize+0x38>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <Rte_WriteCodeSize+0x28>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <Rte_WriteCodeSize+0x38>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_CodeSizeValue = Cpy_CodeSize ; 
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <Rte_WriteCodeSize+0x3c>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <Rte_WriteCodeSize+0x38>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e001      	b.n	8000de0 <Rte_WriteCodeSize+0x2c>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	20000479 	.word	0x20000479
 8000df0:	20000468 	.word	0x20000468

08000df4 <Rte_ReadCodeSize>:

Std_ReturnType Rte_ReadCodeSize(uint32_t *Cpy_CodeSize)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_CodeSizePortState == IDLE) && (Cpy_CodeSize != NULL_PTR))
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <Rte_ReadCodeSize+0x40>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10d      	bne.n	8000e24 <Rte_ReadCodeSize+0x30>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00a      	beq.n	8000e24 <Rte_ReadCodeSize+0x30>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <Rte_ReadCodeSize+0x40>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_CodeSize) = Global_CodeSizeValue ; 
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <Rte_ReadCodeSize+0x44>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <Rte_ReadCodeSize+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e001      	b.n	8000e28 <Rte_ReadCodeSize+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000479 	.word	0x20000479
 8000e38:	20000468 	.word	0x20000468

08000e3c <Rte_ReadCrc>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadCrc(uint32_t *Cpy_Crc)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

	if ( (Global_CrcPortState == IDLE) && (Cpy_Crc != NULL_PTR) )
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <Rte_ReadCrc+0x40>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10d      	bne.n	8000e6c <Rte_ReadCrc+0x30>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00a      	beq.n	8000e6c <Rte_ReadCrc+0x30>
	{
		/* Lock the port to write */
		Global_CrcPortState = BUSY ;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <Rte_ReadCrc+0x40>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_Crc) = Global_CrcValue ;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <Rte_ReadCrc+0x44>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CrcPortState = IDLE ;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <Rte_ReadCrc+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e001      	b.n	8000e70 <Rte_ReadCrc+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000478 	.word	0x20000478
 8000e80:	20000464 	.word	0x20000464

08000e84 <Rte_WriteHeaderAckFlag>:

/**************************************************************************/
/*                         Header Ack Flag Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteHeaderAckFlag(FlagType Cpy_HeaderAckFlag)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
	
	if (Global_HeaderAckFlagState == IDLE)
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <Rte_WriteHeaderAckFlag+0x3c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <Rte_WriteHeaderAckFlag+0x2a>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <Rte_WriteHeaderAckFlag+0x3c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_HeaderAckFlag = Cpy_HeaderAckFlag ; 
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <Rte_WriteHeaderAckFlag+0x40>)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <Rte_WriteHeaderAckFlag+0x3c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e001      	b.n	8000eb2 <Rte_WriteHeaderAckFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000047b 	.word	0x2000047b
 8000ec4:	2000046d 	.word	0x2000046d

08000ec8 <Rte_ReadHeaderAckFlag>:

Std_ReturnType Rte_ReadHeaderAckFlag(FlagType *Cpy_HeaderAckFlag)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_HeaderAckFlagState == IDLE) && (Cpy_HeaderAckFlag != NULL_PTR) )
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <Rte_ReadHeaderAckFlag+0x40>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10d      	bne.n	8000ef8 <Rte_ReadHeaderAckFlag+0x30>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00a      	beq.n	8000ef8 <Rte_ReadHeaderAckFlag+0x30>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <Rte_ReadHeaderAckFlag+0x40>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_HeaderAckFlag) = Global_HeaderAckFlag ; 
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <Rte_ReadHeaderAckFlag+0x44>)
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <Rte_ReadHeaderAckFlag+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e001      	b.n	8000efc <Rte_ReadHeaderAckFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	2000047b 	.word	0x2000047b
 8000f0c:	2000046d 	.word	0x2000046d

08000f10 <Rte_WriteDecryptedDataBuffer>:

/**************************************************************************/
/*                         Decrypted Data Buffer Port                     */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBuffer(uint8_t *Cpy_DecryptedDataBufferPtr)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	
	if ((Global_DecryptedDataBufferState == IDLE)&& (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10c      	bne.n	8000f3e <Rte_WriteDecryptedDataBuffer+0x2e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d009      	beq.n	8000f3e <Rte_WriteDecryptedDataBuffer+0x2e>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferPtr = Cpy_DecryptedDataBufferPtr ; 
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <Rte_WriteDecryptedDataBuffer+0x44>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e001      	b.n	8000f42 <Rte_WriteDecryptedDataBuffer+0x32>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000047c 	.word	0x2000047c
 8000f54:	20000470 	.word	0x20000470

08000f58 <Rte_ReadDecryptedDataBuffer>:

Std_ReturnType Rte_ReadDecryptedDataBuffer(uint8_t **Cpy_DecryptedDataBufferPtr)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferState == IDLE) && (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10d      	bne.n	8000f88 <Rte_ReadDecryptedDataBuffer+0x30>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00a      	beq.n	8000f88 <Rte_ReadDecryptedDataBuffer+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferPtr) = Global_DecryptedDataBufferPtr ; 
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <Rte_ReadDecryptedDataBuffer+0x44>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <Rte_ReadDecryptedDataBuffer+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	2000047c 	.word	0x2000047c
 8000f9c:	20000470 	.word	0x20000470

08000fa0 <Rte_WriteDecryptedDataBufferFlag>:

/**************************************************************************/
/*                         Decrypted Data Buffer Flag Port                */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBufferFlag(FlagType Cpy_DecryptedDataBufferFlag)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
	
	if (Global_DecryptedDataBufferFlagState == IDLE)
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <Rte_WriteDecryptedDataBufferFlag+0x2a>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferFlag = Cpy_DecryptedDataBufferFlag ; 
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <Rte_WriteDecryptedDataBufferFlag+0x40>)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e001      	b.n	8000fce <Rte_WriteDecryptedDataBufferFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000047d 	.word	0x2000047d
 8000fe0:	20000474 	.word	0x20000474

08000fe4 <Rte_ReadDecryptedDataBufferFlag>:

Std_ReturnType Rte_ReadDecryptedDataBufferFlag(FlagType *Cpy_DecryptedDataBufferFlag)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferFlagState == IDLE) && (Cpy_DecryptedDataBufferFlag != NULL_PTR) )
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <Rte_ReadDecryptedDataBufferFlag+0x30>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <Rte_ReadDecryptedDataBufferFlag+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferFlag) = Global_DecryptedDataBufferFlag ; 
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <Rte_ReadDecryptedDataBufferFlag+0x44>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e001      	b.n	8001018 <Rte_ReadDecryptedDataBufferFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	2000047d 	.word	0x2000047d
 8001028:	20000474 	.word	0x20000474

0800102c <Rte_WriteSystemState>:

/**************************************************************************/
/*                         SystemState Port                               */
/**************************************************************************/
Std_ReturnType Rte_WriteSystemState(SystemStateType Cpy_SystemState)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
	
	if (Global_SystemStateMachineState == IDLE)
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <Rte_WriteSystemState+0x3c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <Rte_WriteSystemState+0x2a>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <Rte_WriteSystemState+0x3c>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_SystemStateMachine = Cpy_SystemState ; 
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <Rte_WriteSystemState+0x40>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <Rte_WriteSystemState+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e001      	b.n	800105a <Rte_WriteSystemState+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000047e 	.word	0x2000047e
 800106c:	20000475 	.word	0x20000475

08001070 <Rte_ReadSystemState>:

Std_ReturnType Rte_ReadSystemState(SystemStateType *Cpy_SystemState)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_SystemStateMachineState == IDLE) && (Cpy_SystemState != NULL_PTR))
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <Rte_ReadSystemState+0x40>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <Rte_ReadSystemState+0x30>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00a      	beq.n	80010a0 <Rte_ReadSystemState+0x30>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <Rte_ReadSystemState+0x40>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_SystemState) = Global_SystemStateMachine ; 
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <Rte_ReadSystemState+0x44>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <Rte_ReadSystemState+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e001      	b.n	80010a4 <Rte_ReadSystemState+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	2000047e 	.word	0x2000047e
 80010b4:	20000475 	.word	0x20000475

080010b8 <Rte_ReadUserResponse>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadUserResponse(uint8_t *Cpy_UserResponse)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_UserResponsePortState == IDLE) && (Cpy_UserResponse != NULL_PTR) )
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <Rte_ReadUserResponse+0x40>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10d      	bne.n	80010e8 <Rte_ReadUserResponse+0x30>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <Rte_ReadUserResponse+0x30>
	{
		/* Lock the port to write */
		Global_UserResponsePortState = BUSY ;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <Rte_ReadUserResponse+0x40>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_UserResponse) = Global_UserResponse ; 
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <Rte_ReadUserResponse+0x44>)
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_UserResponsePortState = IDLE ;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <Rte_ReadUserResponse+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e001      	b.n	80010ec <Rte_ReadUserResponse+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	2000047f 	.word	0x2000047f
 80010fc:	20000476 	.word	0x20000476

08001100 <Rte_WriteUpdateProgress>:

/**************************************************************************/
/*                         Update Progress Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteUpdateProgress(uint8_t Cpy_UpdateProgress)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UpdateProgressPortState == IDLE)
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <Rte_WriteUpdateProgress+0x3c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <Rte_WriteUpdateProgress+0x2a>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <Rte_WriteUpdateProgress+0x3c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UpdateProgress = Cpy_UpdateProgress ; 
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <Rte_WriteUpdateProgress+0x40>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <Rte_WriteUpdateProgress+0x3c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e001      	b.n	800112e <Rte_WriteUpdateProgress+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000480 	.word	0x20000480
 8001140:	20000477 	.word	0x20000477

08001144 <Transmit_InitializeModule>:
*******************************************************************************/

/*****************************Module Function Definitions.*********************/

Std_ReturnType Transmit_InitializeModule(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
   // Initalize static variable in this module
   Static_uint32CodeSize                       = INITIALIZE_WITH_ZERO;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <Transmit_InitializeModule+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                          = INITIALIZE_WITH_ZERO;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <Transmit_InitializeModule+0x5c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter                 = INITIALIZE_WITH_ZERO;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <Transmit_InitializeModule+0x60>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets                = INITIALIZE_WITH_ZERO;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <Transmit_InitializeModule+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket          = INITIALIZE_WITH_ZERO;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <Transmit_InitializeModule+0x68>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
   Static_InstallPercentage					   = INITIALIZE_WITH_ZERO;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <Transmit_InitializeModule+0x6c>)
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
   Static_InstallUpdateProgeress			   = INITIALIZE_WITH_ZERO;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <Transmit_InitializeModule+0x70>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
   // Initialize current state variable
   Static_StateVariable                        = IDLE_STATE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <Transmit_InitializeModule+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
   // Fill state array with function represent each state
   Static_ArrayOfStates[IDLE_STATE]            = Transmit_IdleState;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <Transmit_InitializeModule+0x78>)
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <Transmit_InitializeModule+0x7c>)
 800117e:	601a      	str	r2, [r3, #0]
   Static_ArrayOfStates[GET_TRANSMIT_HEADER]   = Transmit_GetTransmitHeader;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <Transmit_InitializeModule+0x78>)
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <Transmit_InitializeModule+0x80>)
 8001184:	605a      	str	r2, [r3, #4]
   Static_ArrayOfStates[CONSUME_TRANSMIT_DATA] = Transmit_ConsumeTransmitData;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <Transmit_InitializeModule+0x78>)
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <Transmit_InitializeModule+0x84>)
 800118a:	609a      	str	r2, [r3, #8]
   Static_ArrayOfStates[FINISHING_STATE]       = Transmit_FinishingState;
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <Transmit_InitializeModule+0x78>)
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <Transmit_InitializeModule+0x88>)
 8001190:	60da      	str	r2, [r3, #12]

   return E_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000484 	.word	0x20000484
 80011a0:	20000488 	.word	0x20000488
 80011a4:	2000048a 	.word	0x2000048a
 80011a8:	2000048c 	.word	0x2000048c
 80011ac:	2000048e 	.word	0x2000048e
 80011b0:	20000490 	.word	0x20000490
 80011b4:	20000494 	.word	0x20000494
 80011b8:	20000495 	.word	0x20000495
 80011bc:	20000498 	.word	0x20000498
 80011c0:	08001205 	.word	0x08001205
 80011c4:	08001251 	.word	0x08001251
 80011c8:	08001311 	.word	0x08001311
 80011cc:	08001495 	.word	0x08001495

080011d0 <Transmit_MainFunction>:

Std_ReturnType Transmit_MainFunction(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
   Std_ReturnType       Local_ReturnStatus = E_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
   State_PtrToFunction  RunState;
   RunState           = Static_ArrayOfStates[Static_StateVariable];
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <Transmit_MainFunction+0x2c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <Transmit_MainFunction+0x30>)
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	603b      	str	r3, [r7, #0]
   Local_ReturnStatus = RunState(NULL_PTR);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2000      	movs	r0, #0
 80011ec:	4798      	blx	r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
   return Local_ReturnStatus;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000495 	.word	0x20000495
 8001200:	20000498 	.word	0x20000498

08001204 <Transmit_IdleState>:

/*****************************Private Functions' Definitions*******************************/

/*****************************Functions Represent states***********************************/
static Std_ReturnType Transmit_IdleState(void *Cpy_voidPtr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus       = E_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
   FlagType       Local_uint8HeaderFlagValue  = HEADER_NOT_SET;
 8001210:	2300      	movs	r3, #0
 8001212:	73bb      	strb	r3, [r7, #14]
   // Get Header Flag Value.
   Local_ReturnStatus = RTE_READ_HEADER_ACK_FLAG(&Local_uint8HeaderFlagValue);
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe55 	bl	8000ec8 <Rte_ReadHeaderAckFlag>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
   if(E_OK == Local_ReturnStatus)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <Transmit_IdleState+0x38>
   {
      // Check The Header Flag Value
      if(HEADER_SET == Local_uint8HeaderFlagValue)
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <Transmit_IdleState+0x32>
      {
         // Go to Get and Transmit Header State.
         Static_StateVariable = GET_TRANSMIT_HEADER;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <Transmit_IdleState+0x48>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e004      	b.n	8001240 <Transmit_IdleState+0x3c>
      }
      else
      {
         Local_ReturnStatus = HEADER_NOT_SET;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e001      	b.n	8001240 <Transmit_IdleState+0x3c>
      }
   }
   else
   {
      Local_ReturnStatus = E_NOT_OK;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000495 	.word	0x20000495

08001250 <Transmit_GetTransmitHeader>:

static Std_ReturnType Transmit_GetTransmitHeader(void *Cpy_voidPtr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus                            = E_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t        Local_HeaderBuffer[HEADER_INFORMATION_SIZE]   = {INITIALIZE_WITH_ZERO};
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
   uint8_t        Local_uint8NodeId                           	= INITIALIZE_WITH_ZERO;
 8001266:	2300      	movs	r3, #0
 8001268:	76fb      	strb	r3, [r7, #27]
   uint32_t       Local_uint32CodeSize                       	= INITIALIZE_WITH_ZERO;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
   uint32_t       Local_uint32CrcValue                      	= INITIALIZE_WITH_ZERO;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
   uint8_t        Local_uint8ReceivedAck                        = INITIALIZE_WITH_ZERO;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
   // Consume Header Information.     
   Transmit_ConsumeHeader(&Local_uint8NodeId, &Local_uint32CodeSize, &Local_uint32CrcValue);
 8001276:	f107 0210 	add.w	r2, r7, #16
 800127a:	f107 0114 	add.w	r1, r7, #20
 800127e:	f107 031b 	add.w	r3, r7, #27
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f944 	bl	8001510 <Transmit_ConsumeHeader>
   // Save Size and Node Id.
   Transmit_SaveHeader(&Local_uint8NodeId, &Local_uint32CodeSize);
 8001288:	f107 0214 	add.w	r2, r7, #20
 800128c:	f107 031b 	add.w	r3, r7, #27
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f992 	bl	80015bc <Transmit_SaveHeader>
   // Handle header information
   Transmit_HandleHeader(Local_uint32CodeSize, Local_uint32CrcValue, Local_HeaderBuffer);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	f107 021c 	add.w	r2, r7, #28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f951 	bl	8001548 <Transmit_HandleHeader>
   /************************Sequence Between Gateway and Boot_loader********************/

   // Request Program control.
   CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_CONTROL_SESSION);
 80012a6:	7efb      	ldrb	r3, [r7, #27]
 80012a8:	2110      	movs	r1, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f9cc 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 80012b0:	f107 030f 	add.w	r3, r7, #15
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fa3f 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACCEPT_UPGRADE_REQUEST == Local_uint8ReceivedAck)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b50      	cmp	r3, #80	; 0x50
 80012be:	d113      	bne.n	80012e8 <Transmit_GetTransmitHeader+0x98>
   {
      // Request sending Header.
      CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_GWY_REQUEST_SENDING_HEADER);
 80012c0:	7efb      	ldrb	r3, [r7, #27]
 80012c2:	2134      	movs	r1, #52	; 0x34
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f9bf 	bl	8000648 <CAN_IF_Transmit_UDS_Request>

      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fa32 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

      if (UDS_MCU_ACCEPT_RECEIVING_HEADER == Local_uint8ReceivedAck)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b73      	cmp	r3, #115	; 0x73
 80012d8:	d106      	bne.n	80012e8 <Transmit_GetTransmitHeader+0x98>
      {
         // Sending header.
    	 CAN_IF_Trasmit_Data_Frame(Local_uint8NodeId, Local_HeaderBuffer, HEADER_INFORMATION_SIZE);
 80012da:	7efb      	ldrb	r3, [r7, #27]
 80012dc:	f107 011c 	add.w	r1, r7, #28
 80012e0:	2208      	movs	r2, #8
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f9e2 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
   else
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fa23 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED == Local_uint8ReceivedAck)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b74      	cmp	r3, #116	; 0x74
 80012f6:	d102      	bne.n	80012fe <Transmit_GetTransmitHeader+0xae>
   {
	   Static_StateVariable = CONSUME_TRANSMIT_DATA;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <Transmit_GetTransmitHeader+0xbc>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80012fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001302:	4618      	mov	r0, r3
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000495 	.word	0x20000495

08001310 <Transmit_ConsumeTransmitData>:

static Std_ReturnType Transmit_ConsumeTransmitData(void *Cpy_voidPtr)
{    
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
   FlagType         Local_uint8BufferFlagValue              = BUFFER_NOT_SET;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]
   uint8_t          *Local_uint8DataBuffer                  = NULL_PTR ;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
   uint8_t          Local_uint8ReceivedAck                  = INITIALIZE_WITH_ZERO;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

   // Calculate number of packets and number of bytes in the last packet.
   Static_uint16NumberOfPackets            = (Static_uint32CodeSize) / (DATA_BUFFER_SIZE);
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <Transmit_ConsumeTransmitData+0x160>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <Transmit_ConsumeTransmitData+0x164>)
 800132e:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket      = (Static_uint32CodeSize) % (DATA_BUFFER_SIZE);
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <Transmit_ConsumeTransmitData+0x160>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <Transmit_ConsumeTransmitData+0x168>)
 800133e:	701a      	strb	r2, [r3, #0]
   // Get Buffer Flag Value.
   RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Local_uint8BufferFlagValue);
 8001340:	f107 0317 	add.w	r3, r7, #23
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe4d 	bl	8000fe4 <Rte_ReadDecryptedDataBufferFlag>
   // Check The Buffer Flag Value
   if(BUFFER_SET == Local_uint8BufferFlagValue)
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8089 	bne.w	8001464 <Transmit_ConsumeTransmitData+0x154>
   {
      // Consume Data and Increase packet counter by 1
      RTE_READ_DECRYPTED_DATA_BUFFER(&Local_uint8DataBuffer);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdfe 	bl	8000f58 <Rte_ReadDecryptedDataBuffer>
      // Request Sending line of code code.
      CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_REQUEST_SENDING_PACKET_OF_CODE);
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <Transmit_ConsumeTransmitData+0x16c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2136      	movs	r1, #54	; 0x36
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f970 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001368:	f107 030f 	add.w	r3, r7, #15
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f9e3 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
      // Check The node ack
      if(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE == Local_uint8ReceivedAck)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b75      	cmp	r3, #117	; 0x75
 8001376:	d175      	bne.n	8001464 <Transmit_ConsumeTransmitData+0x154>
      {
         // condition to know are we will send the last packet or ordinary packet.
         if(Static_uint16PacketsCounter < Static_uint16NumberOfPackets)
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <Transmit_ConsumeTransmitData+0x170>)
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <Transmit_ConsumeTransmitData+0x164>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d250      	bcs.n	8001426 <Transmit_ConsumeTransmitData+0x116>
         {
            // Sending 64 byte of DATA_BUFFER_SIZE
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, DATA_BUFFER_SIZE);
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <Transmit_ConsumeTransmitData+0x16c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	2208      	movs	r2, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f98d 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
        	CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001392:	f107 030f 	add.w	r3, r7, #15
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f9ce 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b76      	cmp	r3, #118	; 0x76
 80013a0:	d160      	bne.n	8001464 <Transmit_ConsumeTransmitData+0x154>
            {
               // Increase packet counter by 1
				Static_uint16PacketsCounter++;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <Transmit_ConsumeTransmitData+0x170>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <Transmit_ConsumeTransmitData+0x170>)
 80013ac:	801a      	strh	r2, [r3, #0]
				if ((Static_uint16PacketsCounter == Static_uint16NumberOfPackets)
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <Transmit_ConsumeTransmitData+0x170>)
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <Transmit_ConsumeTransmitData+0x164>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d107      	bne.n	80013ca <Transmit_ConsumeTransmitData+0xba>
					&& (Static_uint8NumOfBytesInLastPacket == ZERO_BYTE))
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <Transmit_ConsumeTransmitData+0x168>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <Transmit_ConsumeTransmitData+0xba>
				{
					Static_StateVariable = FINISHING_STATE;
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <Transmit_ConsumeTransmitData+0x174>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e005      	b.n	80013d6 <Transmit_ConsumeTransmitData+0xc6>
				}
				else
				{
					// Reset Buffer flag
					RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fde8 	bl	8000fa0 <Rte_WriteDecryptedDataBufferFlag>
					// Change System State To De_crypt state.
					RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f7ff fe2b 	bl	800102c <Rte_WriteSystemState>
				}
				Static_InstallPercentage = ((float)Static_uint16PacketsCounter /(float) Static_uint16NumberOfPackets) ;
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <Transmit_ConsumeTransmitData+0x170>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff6c 	bl	80002b8 <__aeabi_ui2f>
 80013e0:	4604      	mov	r4, r0
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <Transmit_ConsumeTransmitData+0x164>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff66 	bl	80002b8 <__aeabi_ui2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff f86d 	bl	80004d0 <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <Transmit_ConsumeTransmitData+0x178>)
 80013fc:	601a      	str	r2, [r3, #0]
				Static_InstallUpdateProgeress = Static_InstallPercentage * 100 ;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <Transmit_ConsumeTransmitData+0x178>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <Transmit_ConsumeTransmitData+0x17c>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe ffaf 	bl	8000368 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_f2uiz>
 8001412:	4603      	mov	r3, r0
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <Transmit_ConsumeTransmitData+0x180>)
 8001418:	701a      	strb	r2, [r3, #0]
				/* Write to RTE to Signal UserIntrface Module */
				RTE_WRITE_DOWNLOAD_PROGRESS (Static_InstallUpdateProgeress);
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <Transmit_ConsumeTransmitData+0x180>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe6e 	bl	8001100 <Rte_WriteUpdateProgress>
 8001424:	e01e      	b.n	8001464 <Transmit_ConsumeTransmitData+0x154>
            else
            {
               //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
            }
         }
         else if (Static_uint8NumOfBytesInLastPacket != 0)
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <Transmit_ConsumeTransmitData+0x168>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01a      	beq.n	8001464 <Transmit_ConsumeTransmitData+0x154>
         {
            // Sending the rest of data
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, Static_uint8NumOfBytesInLastPacket);
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <Transmit_ConsumeTransmitData+0x16c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <Transmit_ConsumeTransmitData+0x168>)
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f937 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
            CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800143e:	f107 030f 	add.w	r3, r7, #15
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f978 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b76      	cmp	r3, #118	; 0x76
 800144c:	d10a      	bne.n	8001464 <Transmit_ConsumeTransmitData+0x154>
            {
               // Go to Finish State.
               Static_StateVariable = FINISHING_STATE;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <Transmit_ConsumeTransmitData+0x174>)
 8001450:	2203      	movs	r2, #3
 8001452:	701a      	strb	r2, [r3, #0]
               Static_InstallUpdateProgeress = 100;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Transmit_ConsumeTransmitData+0x180>)
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	701a      	strb	r2, [r3, #0]
               RTE_WRITE_DOWNLOAD_PROGRESS(Static_InstallUpdateProgeress);
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <Transmit_ConsumeTransmitData+0x180>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe4e 	bl	8001100 <Rte_WriteUpdateProgress>
         //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
      } 
   }  
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000484 	.word	0x20000484
 8001474:	2000048c 	.word	0x2000048c
 8001478:	2000048e 	.word	0x2000048e
 800147c:	20000488 	.word	0x20000488
 8001480:	2000048a 	.word	0x2000048a
 8001484:	20000495 	.word	0x20000495
 8001488:	20000490 	.word	0x20000490
 800148c:	42c80000 	.word	0x42c80000
 8001490:	20000494 	.word	0x20000494

08001494 <Transmit_FinishingState>:

static Std_ReturnType Transmit_FinishingState(void *Cpy_voidPtr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
   uint8_t Local_uint8_tReceivedAck = INITIALIZE_WITH_ZERO;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
   // Reset Buffer flag
   RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fd7d 	bl	8000fa0 <Rte_WriteDecryptedDataBufferFlag>
   // Ack node of the end of code transmission
   CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <Transmit_FinishingState+0x64>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2137      	movs	r1, #55	; 0x37
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f8cb 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8_tReceivedAck);
 80014b2:	f107 030f 	add.w	r3, r7, #15
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f93e 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
   if(UDS_MCU_ACKNOWLEDGE_RECEIVED_CODE == Local_uint8_tReceivedAck)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b77      	cmp	r3, #119	; 0x77
 80014c0:	d105      	bne.n	80014ce <Transmit_FinishingState+0x3a>
   {
      // Go To Idle State Here
      Static_StateVariable = IDLE_STATE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <Transmit_FinishingState+0x68>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
      // Change System State To System Done Update
      RTE_WRITE_SYSTEM_STATE(SYS_DONE_UPDATE);
 80014c8:	2005      	movs	r0, #5
 80014ca:	f7ff fdaf 	bl	800102c <Rte_WriteSystemState>
   }
	 	// Reinit variables 
   Static_uint32CodeSize              = INITIALIZE_WITH_ZERO;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <Transmit_FinishingState+0x6c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                 = INITIALIZE_WITH_ZERO;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <Transmit_FinishingState+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter        = INITIALIZE_WITH_ZERO;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Transmit_FinishingState+0x70>)
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets       = INITIALIZE_WITH_ZERO;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <Transmit_FinishingState+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket = INITIALIZE_WITH_ZERO;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <Transmit_FinishingState+0x78>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000488 	.word	0x20000488
 80014fc:	20000495 	.word	0x20000495
 8001500:	20000484 	.word	0x20000484
 8001504:	2000048a 	.word	0x2000048a
 8001508:	2000048c 	.word	0x2000048c
 800150c:	2000048e 	.word	0x2000048e

08001510 <Transmit_ConsumeHeader>:

/*******************************Auxiliary Private Function***************************/

static Std_ReturnType Transmit_ConsumeHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size,uint32_t *Cpy_Crc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
   Std_ReturnType Local_ReturnStatus = E_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	75fb      	strb	r3, [r7, #23]
   // Consume Header Information.     
   Local_ReturnStatus                = RTE_READ_NODE_ID  (Cpy_NodeId);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff fc23 	bl	8000d6c <Rte_ReadNodeId>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CODE_SIZE(Cpy_Size);
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff fc62 	bl	8000df4 <Rte_ReadCodeSize>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CRC_VALUE(Cpy_Crc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fc81 	bl	8000e3c <Rte_ReadCrc>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
   return Local_ReturnStatus;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <Transmit_HandleHeader>:

static Std_ReturnType Transmit_HandleHeader(uint32_t Cpy_Size,uint32_t Cpy_Crc,uint8_t *Cpy_PtrToBytes)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
   // Convert code size into bytes and store it in buffer.
   Cpy_PtrToBytes[FIRST_BYTE]   = (Cpy_Size & GET_BYTE);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SECOND_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	0a1a      	lsrs	r2, r3, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[THIRD_BYTE]   = ((Cpy_Size >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	0c1a      	lsrs	r2, r3, #16
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3302      	adds	r3, #2
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[FOURTH_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	0e1a      	lsrs	r2, r3, #24
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3303      	adds	r3, #3
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]
   // Convert CRC Value into bytes and store it in buffer.
   Cpy_PtrToBytes[FIFTH_BYTE]   = (Cpy_Crc  & GET_BYTE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3304      	adds	r3, #4
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SIXTH_BYTE]   = ((Cpy_Crc  >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	0a1a      	lsrs	r2, r3, #8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3305      	adds	r3, #5
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SEVENTH_BYTE] = ((Cpy_Crc  >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0c1a      	lsrs	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3306      	adds	r3, #6
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[EIGHTH_BYTE]  = ((Cpy_Crc  >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	0e1a      	lsrs	r2, r3, #24
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3307      	adds	r3, #7
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
   return E_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <Transmit_SaveHeader>:

static Std_ReturnType Transmit_SaveHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
   // Store Node Id To Use It to determinr the node.
   Static_uint8NodeId    = *Cpy_NodeId;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <Transmit_SaveHeader+0x28>)
 80015cc:	701a      	strb	r2, [r3, #0]
   // Store Size To Use It to calculate number of packts.
   Static_uint32CodeSize = *Cpy_Size;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <Transmit_SaveHeader+0x2c>)
 80015d4:	6013      	str	r3, [r2, #0]
   return E_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000488 	.word	0x20000488
 80015e8:	20000484 	.word	0x20000484

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f2:	f000 fafb 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f6:	f000 f835 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fa:	f000 f92b 	bl	8001854 <MX_GPIO_Init>
  MX_CAN_Init();
 80015fe:	f000 f877 	bl	80016f0 <MX_CAN_Init>
  MX_I2C1_Init();
 8001602:	f000 f8cf 	bl	80017a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001606:	f000 f8fb 	bl	8001800 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 800160a:	4815      	ldr	r0, [pc, #84]	; (8001660 <main+0x74>)
 800160c:	f000 fd14 	bl	8002038 <HAL_CAN_Start>

  Transmit_InitializeModule();
 8001610:	f7ff fd98 	bl	8001144 <Transmit_InitializeModule>
  Decrypt_Address_Read_Init();
 8001614:	f7ff f8b2 	bl	800077c <Decrypt_Address_Read_Init>

  RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8001618:	2003      	movs	r0, #3
 800161a:	f7ff fd07 	bl	800102c <Rte_WriteSystemState>
  RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fc30 	bl	8000e84 <Rte_WriteHeaderAckFlag>
  RTE_WRITE_NODE_ID(1);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fb7f 	bl	8000d28 <Rte_WriteNodeId>
  RTE_WRITE_CODE_SIZE(0x2520);
 800162a:	f242 5020 	movw	r0, #9504	; 0x2520
 800162e:	f7ff fbc1 	bl	8000db4 <Rte_WriteCodeSize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		RTE_READ_SYSTEM_STATE(&state);
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fd1b 	bl	8001070 <Rte_ReadSystemState>
		if (state == SYS_REC_UPDATE){
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d102      	bne.n	8001646 <main+0x5a>
			ReceiveUpdate_MainFunction();
 8001640:	f7ff f97c 	bl	800093c <ReceiveUpdate_MainFunction>
 8001644:	e7f5      	b.n	8001632 <main+0x46>
		}
		else if (state == SYS_DECRYPT)
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d102      	bne.n	8001652 <main+0x66>
		{
			Decrypt_MainFunction();
 800164c:	f7ff f8a4 	bl	8000798 <Decrypt_MainFunction>
 8001650:	e7ef      	b.n	8001632 <main+0x46>
		}
		else if (state == SYS_SEND_UPDATE)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d1ec      	bne.n	8001632 <main+0x46>
		{
			Transmit_MainFunction();
 8001658:	f7ff fdba 	bl	80011d0 <Transmit_MainFunction>
		RTE_READ_SYSTEM_STATE(&state);
 800165c:	e7e9      	b.n	8001632 <main+0x46>
 800165e:	bf00      	nop
 8001660:	200004a8 	.word	0x200004a8

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b090      	sub	sp, #64	; 0x40
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2228      	movs	r2, #40	; 0x28
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f870 	bl	8004758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fd97 	bl	80031e0 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016b8:	f000 f924 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 f804 	bl	80036e4 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016e2:	f000 f90f 	bl	8001904 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3740      	adds	r7, #64	; 0x40
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_CAN_Init+0xa8>)
 80016f6:	4a29      	ldr	r2, [pc, #164]	; (800179c <MX_CAN_Init+0xac>)
 80016f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <MX_CAN_Init+0xa8>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_CAN_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <MX_CAN_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_CAN_Init+0xa8>)
 800170e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001712:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_CAN_Init+0xa8>)
 8001716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800171a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_CAN_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_CAN_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_CAN_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_CAN_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_CAN_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_CAN_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001740:	4815      	ldr	r0, [pc, #84]	; (8001798 <MX_CAN_Init+0xa8>)
 8001742:	f000 fab5 	bl	8001cb0 <HAL_CAN_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800174c:	f000 f8da 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //Initialize Variable for CAN
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001752:	2201      	movs	r2, #1
 8001754:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_CAN_Init+0xb0>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <MX_CAN_Init+0xb0>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_CAN_Init+0xb0>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001782:	2201      	movs	r2, #1
 8001784:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_CAN_Init+0xb0>)
 8001788:	220a      	movs	r2, #10
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <MX_CAN_Init+0xb0>)
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <MX_CAN_Init+0xa8>)
 8001790:	f000 fb89 	bl	8001ea6 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200004a8 	.word	0x200004a8
 800179c:	40006400 	.word	0x40006400
 80017a0:	2000056c 	.word	0x2000056c

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f001 fbb9 	bl	8002f58 <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 f88a 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200004d0 	.word	0x200004d0
 80017f8:	40005400 	.word	0x40005400
 80017fc:	00061a80 	.word	0x00061a80

08001800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_USART1_UART_Init+0x50>)
 8001808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <MX_USART1_UART_Init+0x4c>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART1_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART1_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART1_UART_Init+0x4c>)
 8001838:	f002 f8e2 	bl	8003a00 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001842:	f000 f85f 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000524 	.word	0x20000524
 8001850:	40013800 	.word	0x40013800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_GPIO_Init+0xa8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <MX_GPIO_Init+0xa8>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_GPIO_Init+0xa8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_GPIO_Init+0xa8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <MX_GPIO_Init+0xa8>)
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_GPIO_Init+0xa8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_GPIO_Init+0xa8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <MX_GPIO_Init+0xa8>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_GPIO_Init+0xa8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_GPIO_Init+0xa8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a11      	ldr	r2, [pc, #68]	; (80018fc <MX_GPIO_Init+0xa8>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_GPIO_Init+0xa8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_GPIO_Init+0xac>)
 80018d0:	f001 fb2a 	bl	8002f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_GPIO_Init+0xac>)
 80018ee:	f001 f997 	bl	8002c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40011000 	.word	0x40011000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_MspInit+0x5c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_MspInit+0x5c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_MspInit+0x5c>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x5c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_MspInit+0x5c>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x5c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_MspInit+0x60>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_MspInit+0x60>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000

08001974 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_CAN_MspInit+0x8c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d131      	bne.n	80019f8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 800199a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800199e:	61d3      	str	r3, [r2, #28]
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_CAN_MspInit+0x90>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <HAL_CAN_MspInit+0x94>)
 80019da:	f001 f921 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <HAL_CAN_MspInit+0x94>)
 80019f4:	f001 f914 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40006400 	.word	0x40006400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010800 	.word	0x40010800

08001a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_I2C_MspInit+0x70>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d123      	bne.n	8001a74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4619      	mov	r1, r3
 8001a56:	480b      	ldr	r0, [pc, #44]	; (8001a84 <HAL_I2C_MspInit+0x78>)
 8001a58:	f001 f8e2 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a66:	61d3      	str	r3, [r2, #28]
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_I2C_MspInit+0x74>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010c00 	.word	0x40010c00

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_UART_MspInit+0x9c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d139      	bne.n	8001b1c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_UART_MspInit+0xa0>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4619      	mov	r1, r3
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_UART_MspInit+0xa4>)
 8001aee:	f001 f897 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <HAL_UART_MspInit+0xa4>)
 8001b08:	f001 f88a 	bl	8002c20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2025      	movs	r0, #37	; 0x25
 8001b12:	f000 fd9c 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b16:	2025      	movs	r0, #37	; 0x25
 8001b18:	f000 fdb5 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40013800 	.word	0x40013800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <NMI_Handler+0x4>

08001b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler+0x4>

08001b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 f87f 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART1_IRQHandler+0x10>)
 8001b86:	f002 f8a1 	bl	8003ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000524 	.word	0x20000524

08001b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <Reset_Handler>:
 8001ba0:	f7ff fff8 	bl	8001b94 <SystemInit>
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <LoopFillZerobss+0xe>)
 8001ba6:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x12>)
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <LoopFillZerobss+0x16>)
 8001baa:	2300      	movs	r3, #0
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:
 8001bae:	58d4      	ldr	r4, [r2, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:
 8001bb4:	18c4      	adds	r4, r0, r3
 8001bb6:	428c      	cmp	r4, r1
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <LoopFillZerobss+0x1a>)
 8001bbc:	4c09      	ldr	r4, [pc, #36]	; (8001be4 <LoopFillZerobss+0x1e>)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:
 8001bc6:	42a2      	cmp	r2, r4
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>
 8001bca:	f002 fdcd 	bl	8004768 <__libc_init_array>
 8001bce:	f7ff fd0d 	bl	80015ec <main>
 8001bd2:	4770      	bx	lr
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	080047fc 	.word	0x080047fc
 8001be0:	20000010 	.word	0x20000010
 8001be4:	20000600 	.word	0x20000600

08001be8 <ADC1_2_IRQHandler>:
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x28>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x28>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 fd1b 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	200f      	movs	r0, #15
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fe82 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fd33 	bl	80026a2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 fcfb 	bl	800264e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x1c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x20>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x20>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000008 	.word	0x20000008
 8001c98:	200005dc 	.word	0x200005dc

08001c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_GetTick+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	200005dc 	.word	0x200005dc

08001cb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0ed      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fe50 	bl	8001974 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce4:	f7ff ffda 	bl	8001c9c <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cea:	e012      	b.n	8001d12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cec:	f7ff ffd6 	bl	8001c9c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d90b      	bls.n	8001d12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0c5      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0e5      	beq.n	8001cec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0202 	bic.w	r2, r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d30:	f7ff ffb4 	bl	8001c9c <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d36:	e012      	b.n	8001d5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d38:	f7ff ffb0 	bl	8001c9c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d90b      	bls.n	8001d5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e09f      	b.n	8001e9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e5      	bne.n	8001d38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d108      	bne.n	8001d86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e007      	b.n	8001d96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e5b      	ldrb	r3, [r3, #25]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e9b      	ldrb	r3, [r3, #26]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0220 	bic.w	r2, r2, #32
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7edb      	ldrb	r3, [r3, #27]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0210 	bic.w	r2, r2, #16
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0210 	orr.w	r2, r2, #16
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f1b      	ldrb	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0208 	orr.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f5b      	ldrb	r3, [r3, #29]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0204 	orr.w	r2, r2, #4
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	ea42 0103 	orr.w	r1, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_ConfigFilter+0x26>
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	f040 80aa 	bne.w	8002020 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d123      	bne.n	8001f4e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	401a      	ands	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3248      	adds	r2, #72	; 0x48
 8001f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	3348      	adds	r3, #72	; 0x48
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d122      	bne.n	8001f9c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3248      	adds	r2, #72	; 0x48
 8001f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	3348      	adds	r3, #72	; 0x48
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fb6:	e007      	b.n	8001fc8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001fe2:	e007      	b.n	8001ff4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002012:	f023 0201 	bic.w	r2, r3, #1
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e006      	b.n	800202e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d12e      	bne.n	80020aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002064:	f7ff fe1a 	bl	8001c9c <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800206a:	e012      	b.n	8002092 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800206c:	f7ff fe16 	bl	8001c9c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b0a      	cmp	r3, #10
 8002078:	d90b      	bls.n	8002092 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e012      	b.n	80020b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e5      	bne.n	800206c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e006      	b.n	80020b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d003      	beq.n	80020ec <HAL_CAN_AddTxMessage+0x2c>
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	f040 80ad 	bne.w	8002246 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8095 	beq.w	8002236 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	0e1b      	lsrs	r3, r3, #24
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002116:	2201      	movs	r2, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	6809      	ldr	r1, [r1, #0]
 8002136:	431a      	orrs	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3318      	adds	r3, #24
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	440b      	add	r3, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e00f      	b.n	8002164 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800214e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002158:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3318      	adds	r3, #24
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	440b      	add	r3, r1
 8002162:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3318      	adds	r3, #24
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	7d1b      	ldrb	r3, [r3, #20]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d111      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3318      	adds	r3, #24
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	6811      	ldr	r1, [r2, #0]
 8002194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3318      	adds	r3, #24
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	440b      	add	r3, r1
 80021a0:	3304      	adds	r3, #4
 80021a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3307      	adds	r3, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	061a      	lsls	r2, r3, #24
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3306      	adds	r3, #6
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3305      	adds	r3, #5
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	4313      	orrs	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	3204      	adds	r2, #4
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4610      	mov	r0, r2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6811      	ldr	r1, [r2, #0]
 80021cc:	ea43 0200 	orr.w	r2, r3, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3303      	adds	r3, #3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	061a      	lsls	r2, r3, #24
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3302      	adds	r3, #2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3301      	adds	r3, #1
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	4313      	orrs	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	4610      	mov	r0, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6811      	ldr	r1, [r2, #0]
 8002202:	ea43 0200 	orr.w	r2, r3, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	440b      	add	r3, r1
 800220c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002210:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3318      	adds	r3, #24
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6811      	ldr	r1, [r2, #0]
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3318      	adds	r3, #24
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	440b      	add	r3, r1
 8002230:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e00e      	b.n	8002254 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e006      	b.n	8002254 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	3724      	adds	r7, #36	; 0x24
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d003      	beq.n	8002282 <HAL_CAN_GetRxMessage+0x24>
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f040 8103 	bne.w	8002488 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10e      	bne.n	80022a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0f7      	b.n	8002496 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0e8      	b.n	8002496 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	331b      	adds	r3, #27
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4413      	add	r3, r2
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0204 	and.w	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	331b      	adds	r3, #27
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	331b      	adds	r3, #27
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	331b      	adds	r3, #27
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0202 	and.w	r2, r3, #2
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	331b      	adds	r3, #27
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	e00b      	b.n	8002362 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	331b      	adds	r3, #27
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	331b      	adds	r3, #27
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	331b      	adds	r3, #27
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0a1a      	lsrs	r2, r3, #8
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0c1a      	lsrs	r2, r3, #16
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	3302      	adds	r3, #2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e1a      	lsrs	r2, r3, #24
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	3303      	adds	r3, #3
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4413      	add	r3, r2
 8002400:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3304      	adds	r3, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1a      	lsrs	r2, r3, #8
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3305      	adds	r3, #5
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3306      	adds	r3, #6
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0e1a      	lsrs	r2, r3, #24
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3307      	adds	r3, #7
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	e007      	b.n	8002484 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e006      	b.n	8002496 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db0b      	blt.n	800252e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4906      	ldr	r1, [pc, #24]	; (8002538 <__NVIC_EnableIRQ+0x34>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f7ff ff90 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff2d 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff42 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff90 	bl	8002590 <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5f 	bl	800253c <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff35 	bl	8002504 <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffa2 	bl	80025f4 <SysTick_Config>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d008      	beq.n	80026e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2204      	movs	r2, #4
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e020      	b.n	8002726 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 020e 	bic.w	r2, r2, #14
 80026f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d005      	beq.n	8002754 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e051      	b.n	80027f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <HAL_DMA_Abort_IT+0xd4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d029      	beq.n	80027d2 <HAL_DMA_Abort_IT+0xa2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_DMA_Abort_IT+0xd8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_Abort_IT+0x9e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_DMA_Abort_IT+0xdc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01a      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x98>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_DMA_Abort_IT+0xe0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d012      	beq.n	80027c2 <HAL_DMA_Abort_IT+0x92>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_DMA_Abort_IT+0xe4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00a      	beq.n	80027bc <HAL_DMA_Abort_IT+0x8c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_DMA_Abort_IT+0xe8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <HAL_DMA_Abort_IT+0x86>
 80027b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027b4:	e00e      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ba:	e00b      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	e008      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c6:	e005      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027cc:	e002      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027ce:	2310      	movs	r3, #16
 80027d0:	e000      	b.n	80027d4 <HAL_DMA_Abort_IT+0xa4>
 80027d2:	2301      	movs	r3, #1
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_DMA_Abort_IT+0xec>)
 80027d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
    } 
  }
  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40020008 	.word	0x40020008
 8002808:	4002001c 	.word	0x4002001c
 800280c:	40020030 	.word	0x40020030
 8002810:	40020044 	.word	0x40020044
 8002814:	40020058 	.word	0x40020058
 8002818:	4002006c 	.word	0x4002006c
 800281c:	40020000 	.word	0x40020000

08002820 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800283a:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_FLASH_Program+0xd8>)
 800283c:	7e1b      	ldrb	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_FLASH_Program+0x26>
 8002842:	2302      	movs	r3, #2
 8002844:	e054      	b.n	80028f0 <HAL_FLASH_Program+0xd0>
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_FLASH_Program+0xd8>)
 8002848:	2201      	movs	r2, #1
 800284a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800284c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002850:	f000 f8a8 	bl	80029a4 <FLASH_WaitForLastOperation>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d144      	bne.n	80028e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002864:	2301      	movs	r3, #1
 8002866:	757b      	strb	r3, [r7, #21]
 8002868:	e007      	b.n	800287a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d102      	bne.n	8002876 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002870:	2302      	movs	r3, #2
 8002872:	757b      	strb	r3, [r7, #21]
 8002874:	e001      	b.n	800287a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002876:	2304      	movs	r3, #4
 8002878:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800287a:	2300      	movs	r3, #0
 800287c:	75bb      	strb	r3, [r7, #22]
 800287e:	e02d      	b.n	80028dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002880:	7dbb      	ldrb	r3, [r7, #22]
 8002882:	005a      	lsls	r2, r3, #1
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	eb02 0c03 	add.w	ip, r2, r3
 800288a:	7dbb      	ldrb	r3, [r7, #22]
 800288c:	0119      	lsls	r1, r3, #4
 800288e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002892:	f1c1 0620 	rsb	r6, r1, #32
 8002896:	f1a1 0020 	sub.w	r0, r1, #32
 800289a:	fa22 f401 	lsr.w	r4, r2, r1
 800289e:	fa03 f606 	lsl.w	r6, r3, r6
 80028a2:	4334      	orrs	r4, r6
 80028a4:	fa23 f000 	lsr.w	r0, r3, r0
 80028a8:	4304      	orrs	r4, r0
 80028aa:	fa23 f501 	lsr.w	r5, r3, r1
 80028ae:	b2a3      	uxth	r3, r4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4660      	mov	r0, ip
 80028b4:	f000 f85a 	bl	800296c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028bc:	f000 f872 	bl	80029a4 <FLASH_WaitForLastOperation>
 80028c0:	4603      	mov	r3, r0
 80028c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_FLASH_Program+0xdc>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_FLASH_Program+0xdc>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80028d6:	7dbb      	ldrb	r3, [r7, #22]
 80028d8:	3301      	adds	r3, #1
 80028da:	75bb      	strb	r3, [r7, #22]
 80028dc:	7dba      	ldrb	r2, [r7, #22]
 80028de:	7d7b      	ldrb	r3, [r7, #21]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3cd      	bcc.n	8002880 <HAL_FLASH_Program+0x60>
 80028e4:	e000      	b.n	80028e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80028e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_FLASH_Program+0xd8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	761a      	strb	r2, [r3, #24]

  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	200005e0 	.word	0x200005e0
 80028fc:	40022000 	.word	0x40022000

08002900 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_FLASH_Unlock+0x40>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_FLASH_Unlock+0x40>)
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_FLASH_Unlock+0x44>)
 800291a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_FLASH_Unlock+0x40>)
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_FLASH_Unlock+0x48>)
 8002920:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <HAL_FLASH_Unlock+0x40>)
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002932:	79fb      	ldrb	r3, [r7, #7]
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000
 8002944:	45670123 	.word	0x45670123
 8002948:	cdef89ab 	.word	0xcdef89ab

0800294c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_FLASH_Lock+0x1c>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_FLASH_Lock+0x1c>)
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40022000 	.word	0x40022000

0800296c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <FLASH_Program_HalfWord+0x30>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <FLASH_Program_HalfWord+0x34>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <FLASH_Program_HalfWord+0x34>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	887a      	ldrh	r2, [r7, #2]
 800298e:	801a      	strh	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	200005e0 	.word	0x200005e0
 80029a0:	40022000 	.word	0x40022000

080029a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff f976 	bl	8001c9c <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029b2:	e010      	b.n	80029d6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d00c      	beq.n	80029d6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <FLASH_WaitForLastOperation+0x2e>
 80029c2:	f7ff f96b 	bl	8001c9c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d201      	bcs.n	80029d6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e025      	b.n	8002a22 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e8      	bne.n	80029b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 80029f0:	2220      	movs	r2, #32
 80029f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <FLASH_WaitForLastOperation+0x88>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a18:	f000 f80a 	bl	8002a30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40022000 	.word	0x40022000

08002a30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a50:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a70:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <FLASH_SetErrorCode+0x9c>)
 8002a90:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f240 1201 	movw	r2, #257	; 0x101
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d106      	bne.n	8002ab6 <FLASH_SetErrorCode+0x86>
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	61d3      	str	r3, [r2, #28]
}  
 8002ab4:	e002      	b.n	8002abc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <FLASH_SetErrorCode+0x98>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60d3      	str	r3, [r2, #12]
}  
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	200005e0 	.word	0x200005e0

08002ad0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_FLASHEx_Erase+0xd0>)
 8002ae4:	7e1b      	ldrb	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_FLASHEx_Erase+0x1e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e053      	b.n	8002b96 <HAL_FLASHEx_Erase+0xc6>
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_FLASHEx_Erase+0xd0>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d116      	bne.n	8002b2a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b00:	f7ff ff50 	bl	80029a4 <FLASH_WaitForLastOperation>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d141      	bne.n	8002b8e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 f84c 	bl	8002ba8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b14:	f7ff ff46 	bl	80029a4 <FLASH_WaitForLastOperation>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_FLASHEx_Erase+0xd4>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_FLASHEx_Erase+0xd4>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6113      	str	r3, [r2, #16]
 8002b28:	e031      	b.n	8002b8e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b2e:	f7ff ff39 	bl	80029a4 <FLASH_WaitForLastOperation>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d12a      	bne.n	8002b8e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	e019      	b.n	8002b7c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b48:	68b8      	ldr	r0, [r7, #8]
 8002b4a:	f000 f849 	bl	8002be0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b52:	f7ff ff27 	bl	80029a4 <FLASH_WaitForLastOperation>
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_FLASHEx_Erase+0xd4>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <HAL_FLASHEx_Erase+0xd4>)
 8002b60:	f023 0302 	bic.w	r3, r3, #2
 8002b64:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	601a      	str	r2, [r3, #0]
            break;
 8002b72:	e00c      	b.n	8002b8e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b7a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	029a      	lsls	r2, r3, #10
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4413      	add	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d3dc      	bcc.n	8002b48 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_FLASHEx_Erase+0xd0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	761a      	strb	r2, [r3, #24]

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200005e0 	.word	0x200005e0
 8002ba4:	40022000 	.word	0x40022000

08002ba8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <FLASH_MassErase+0x30>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <FLASH_MassErase+0x34>)
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <FLASH_MassErase+0x34>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <FLASH_MassErase+0x34>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <FLASH_MassErase+0x34>)
 8002bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bcc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	200005e0 	.word	0x200005e0
 8002bdc:	40022000 	.word	0x40022000

08002be0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <FLASH_PageErase+0x38>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <FLASH_PageErase+0x3c>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <FLASH_PageErase+0x3c>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <FLASH_PageErase+0x3c>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <FLASH_PageErase+0x3c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <FLASH_PageErase+0x3c>)
 8002c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200005e0 	.word	0x200005e0
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b08b      	sub	sp, #44	; 0x2c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e169      	b.n	8002f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c34:	2201      	movs	r2, #1
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 8158 	bne.w	8002f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a9a      	ldr	r2, [pc, #616]	; (8002ec0 <HAL_GPIO_Init+0x2a0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d05e      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c5c:	4a98      	ldr	r2, [pc, #608]	; (8002ec0 <HAL_GPIO_Init+0x2a0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d875      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c62:	4a98      	ldr	r2, [pc, #608]	; (8002ec4 <HAL_GPIO_Init+0x2a4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d058      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c68:	4a96      	ldr	r2, [pc, #600]	; (8002ec4 <HAL_GPIO_Init+0x2a4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d86f      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c6e:	4a96      	ldr	r2, [pc, #600]	; (8002ec8 <HAL_GPIO_Init+0x2a8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d052      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c74:	4a94      	ldr	r2, [pc, #592]	; (8002ec8 <HAL_GPIO_Init+0x2a8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d869      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c7a:	4a94      	ldr	r2, [pc, #592]	; (8002ecc <HAL_GPIO_Init+0x2ac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d04c      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c80:	4a92      	ldr	r2, [pc, #584]	; (8002ecc <HAL_GPIO_Init+0x2ac>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d863      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c86:	4a92      	ldr	r2, [pc, #584]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d046      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c8c:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d85d      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c92:	2b12      	cmp	r3, #18
 8002c94:	d82a      	bhi.n	8002cec <HAL_GPIO_Init+0xcc>
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d859      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <HAL_GPIO_Init+0x80>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002cf5 	.word	0x08002cf5
 8002ca8:	08002d07 	.word	0x08002d07
 8002cac:	08002d49 	.word	0x08002d49
 8002cb0:	08002d4f 	.word	0x08002d4f
 8002cb4:	08002d4f 	.word	0x08002d4f
 8002cb8:	08002d4f 	.word	0x08002d4f
 8002cbc:	08002d4f 	.word	0x08002d4f
 8002cc0:	08002d4f 	.word	0x08002d4f
 8002cc4:	08002d4f 	.word	0x08002d4f
 8002cc8:	08002d4f 	.word	0x08002d4f
 8002ccc:	08002d4f 	.word	0x08002d4f
 8002cd0:	08002d4f 	.word	0x08002d4f
 8002cd4:	08002d4f 	.word	0x08002d4f
 8002cd8:	08002d4f 	.word	0x08002d4f
 8002cdc:	08002d4f 	.word	0x08002d4f
 8002ce0:	08002d4f 	.word	0x08002d4f
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	4a79      	ldr	r2, [pc, #484]	; (8002ed4 <HAL_GPIO_Init+0x2b4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cf2:	e02c      	b.n	8002d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	623b      	str	r3, [r7, #32]
          break;
 8002cfa:	e029      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	3304      	adds	r3, #4
 8002d02:	623b      	str	r3, [r7, #32]
          break;
 8002d04:	e024      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	623b      	str	r3, [r7, #32]
          break;
 8002d0e:	e01f      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	330c      	adds	r3, #12
 8002d16:	623b      	str	r3, [r7, #32]
          break;
 8002d18:	e01a      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d22:	2304      	movs	r3, #4
 8002d24:	623b      	str	r3, [r7, #32]
          break;
 8002d26:	e013      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d30:	2308      	movs	r3, #8
 8002d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	611a      	str	r2, [r3, #16]
          break;
 8002d3a:	e009      	b.n	8002d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	615a      	str	r2, [r3, #20]
          break;
 8002d46:	e003      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e000      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          break;
 8002d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2bff      	cmp	r3, #255	; 0xff
 8002d54:	d801      	bhi.n	8002d5a <HAL_GPIO_Init+0x13a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_Init+0x13e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2bff      	cmp	r3, #255	; 0xff
 8002d64:	d802      	bhi.n	8002d6c <HAL_GPIO_Init+0x14c>
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	e002      	b.n	8002d72 <HAL_GPIO_Init+0x152>
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	3b08      	subs	r3, #8
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	210f      	movs	r1, #15
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b1 	beq.w	8002f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da0:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002db8:	4a48      	ldr	r2, [pc, #288]	; (8002edc <HAL_GPIO_Init+0x2bc>)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_GPIO_Init+0x2c0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_GPIO_Init+0x1ec>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3f      	ldr	r2, [pc, #252]	; (8002ee4 <HAL_GPIO_Init+0x2c4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00d      	beq.n	8002e08 <HAL_GPIO_Init+0x1e8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3e      	ldr	r2, [pc, #248]	; (8002ee8 <HAL_GPIO_Init+0x2c8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	; (8002eec <HAL_GPIO_Init+0x2cc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_GPIO_Init+0x1e0>
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e1e:	492f      	ldr	r1, [pc, #188]	; (8002edc <HAL_GPIO_Init+0x2bc>)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	492c      	ldr	r1, [pc, #176]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	4928      	ldr	r1, [pc, #160]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e60:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4922      	ldr	r1, [pc, #136]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	491e      	ldr	r1, [pc, #120]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4918      	ldr	r1, [pc, #96]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4914      	ldr	r1, [pc, #80]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d021      	beq.n	8002ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	e021      	b.n	8002f02 <HAL_GPIO_Init+0x2e2>
 8002ebe:	bf00      	nop
 8002ec0:	10320000 	.word	0x10320000
 8002ec4:	10310000 	.word	0x10310000
 8002ec8:	10220000 	.word	0x10220000
 8002ecc:	10210000 	.word	0x10210000
 8002ed0:	10120000 	.word	0x10120000
 8002ed4:	10110000 	.word	0x10110000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40010c00 	.word	0x40010c00
 8002ee8:	40011000 	.word	0x40011000
 8002eec:	40011400 	.word	0x40011400
 8002ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4909      	ldr	r1, [pc, #36]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f47f ae8e 	bne.w	8002c34 <HAL_GPIO_Init+0x14>
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	372c      	adds	r7, #44	; 0x2c
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12b      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fd44 	bl	8001a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f000 fcda 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a81      	ldr	r2, [pc, #516]	; (80031cc <HAL_I2C_Init+0x274>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a80      	ldr	r2, [pc, #512]	; (80031d0 <HAL_I2C_Init+0x278>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <HAL_I2C_Init+0x27c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0e7      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a78      	ldr	r2, [pc, #480]	; (80031d8 <HAL_I2C_Init+0x280>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a6a      	ldr	r2, [pc, #424]	; (80031cc <HAL_I2C_Init+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_I2C_Init+0x284>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	495c      	ldr	r1, [pc, #368]	; (80031cc <HAL_I2C_Init+0x274>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d819      	bhi.n	8003094 <HAL_I2C_Init+0x13c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003074:	400b      	ands	r3, r1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_Init+0x138>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e59      	subs	r1, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fbb1 f3f3 	udiv	r3, r1, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	e051      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003090:	2304      	movs	r3, #4
 8003092:	e04f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <HAL_I2C_Init+0x168>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Init+0x18e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x196>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_I2C_Init+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e58      	subs	r0, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	fbb0 f3f3 	udiv	r3, r0, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6809      	ldr	r1, [r1, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6911      	ldr	r1, [r2, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	000186a0 	.word	0x000186a0
 80031d0:	001e847f 	.word	0x001e847f
 80031d4:	003d08ff 	.word	0x003d08ff
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e272      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8087 	beq.w	800330e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003200:	4b92      	ldr	r3, [pc, #584]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00c      	beq.n	8003226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800320c:	4b8f      	ldr	r3, [pc, #572]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0x5e>
 8003218:	4b8c      	ldr	r3, [pc, #560]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d10b      	bne.n	800323e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06c      	beq.n	800330c <HAL_RCC_OscConfig+0x12c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d168      	bne.n	800330c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e24c      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x76>
 8003248:	4b80      	ldr	r3, [pc, #512]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7f      	ldr	r2, [pc, #508]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e02e      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7a      	ldr	r2, [pc, #488]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b78      	ldr	r3, [pc, #480]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a77      	ldr	r2, [pc, #476]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0xbc>
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a71      	ldr	r2, [pc, #452]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 800329c:	4b6b      	ldr	r3, [pc, #428]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b68      	ldr	r3, [pc, #416]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a67      	ldr	r2, [pc, #412]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fcee 	bl	8001c9c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fcea 	bl	8001c9c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e200      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe4>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fcda 	bl	8001c9c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fcd6 	bl	8001c9c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1ec      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x10c>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331a:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x18c>
 8003332:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x176>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c0      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4939      	ldr	r1, [pc, #228]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x270>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe fc8f 	bl	8001c9c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe fc8b 	bl	8001c9c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1a1      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4927      	ldr	r1, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_RCC_OscConfig+0x270>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fc6e 	bl	8001c9c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe fc6a 	bl	8001c9c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e180      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03a      	beq.n	8003464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d019      	beq.n	800342a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe fc4e 	bl	8001c9c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fc4a 	bl	8001c9c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e160      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003422:	2001      	movs	r0, #1
 8003424:	f000 face 	bl	80039c4 <RCC_Delay>
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7fe fc34 	bl	8001c9c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003436:	e00f      	b.n	8003458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003438:	f7fe fc30 	bl	8001c9c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d908      	bls.n	8003458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e146      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	42420000 	.word	0x42420000
 8003454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b92      	ldr	r3, [pc, #584]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e9      	bne.n	8003438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a6 	beq.w	80035be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4a87      	ldr	r2, [pc, #540]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	61d3      	str	r3, [r2, #28]
 800348e:	4b85      	ldr	r3, [pc, #532]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <HAL_RCC_OscConfig+0x4c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x4c8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7e      	ldr	r2, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x4c8>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fbf1 	bl	8001c9c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe fbed 	bl	8001c9c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e103      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x4c8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x312>
 80034e4:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a6e      	ldr	r2, [pc, #440]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x334>
 80034fa:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a69      	ldr	r2, [pc, #420]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a66      	ldr	r2, [pc, #408]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x356>
 800351c:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a60      	ldr	r2, [pc, #384]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	4b5e      	ldr	r3, [pc, #376]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a5d      	ldr	r2, [pc, #372]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 8003536:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7fe fba1 	bl	8001c9c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fb9d 	bl	8001c9c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0b1      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x37e>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7fe fb8b 	bl	8001c9c <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fb87 	bl	8001c9c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e09b      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4a3b      	ldr	r2, [pc, #236]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8087 	beq.w	80036d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d061      	beq.n	8003698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d146      	bne.n	800366a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <HAL_RCC_OscConfig+0x4cc>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fb5b 	bl	8001c9c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fb57 	bl	8001c9c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e06d      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d108      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4921      	ldr	r1, [pc, #132]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a19      	ldr	r1, [r3, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	430b      	orrs	r3, r1
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x4cc>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fb2b 	bl	8001c9c <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe fb27 	bl	8001c9c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e03d      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x46a>
 8003668:	e035      	b.n	80036d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_OscConfig+0x4cc>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fb14 	bl	8001c9c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fb10 	bl	8001c9c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e026      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x498>
 8003696:	e01e      	b.n	80036d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e019      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x500>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0d0      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4965      	ldr	r1, [pc, #404]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800374a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d040      	beq.n	8003804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d115      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e073      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06b      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4936      	ldr	r1, [pc, #216]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fa62 	bl	8001c9c <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fa5e 	bl	8001c9c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e053      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d210      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4922      	ldr	r1, [pc, #136]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f821 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1cc>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe f9c0 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40022000 	.word	0x40022000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	080047c8 	.word	0x080047c8
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_GetSysClockFreq+0x94>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x30>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x36>
 80038e6:	e027      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ea:	613b      	str	r3, [r7, #16]
      break;
 80038ec:	e027      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038f8:	5cd3      	ldrb	r3, [r2, r3]
 80038fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_GetSysClockFreq+0x94>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0c5b      	lsrs	r3, r3, #17
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	fb03 f202 	mul.w	r2, r3, r2
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e004      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <HAL_RCC_GetSysClockFreq+0xa4>)
 800392c:	fb02 f303 	mul.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	613b      	str	r3, [r7, #16]
      break;
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetSysClockFreq+0x98>)
 800393a:	613b      	str	r3, [r7, #16]
      break;
 800393c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393e:	693b      	ldr	r3, [r7, #16]
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	007a1200 	.word	0x007a1200
 8003954:	080047e0 	.word	0x080047e0
 8003958:	080047f0 	.word	0x080047f0
 800395c:	003d0900 	.word	0x003d0900

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <HAL_RCC_GetHCLKFreq+0x10>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003978:	f7ff fff2 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	080047d8 	.word	0x080047d8

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff ffde 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0adb      	lsrs	r3, r3, #11
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	080047d8 	.word	0x080047d8

080039c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <RCC_Delay+0x34>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <RCC_Delay+0x38>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a5b      	lsrs	r3, r3, #9
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e0:	bf00      	nop
  }
  while (Delay --);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	60fa      	str	r2, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f9      	bne.n	80039e0 <RCC_Delay+0x1c>
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20000000 	.word	0x20000000
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe f82e 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	; 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fdf9 	bl	800463c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d16d      	bne.n	8003b9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Transmit+0x2c>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e066      	b.n	8003b9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2221      	movs	r2, #33	; 0x21
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ade:	f7fe f8dd 	bl	8001c9c <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d108      	bne.n	8003b0c <HAL_UART_Transmit+0x6c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e003      	b.n	8003b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b14:	e02a      	b.n	8003b6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fb82 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e036      	b.n	8003b9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	3302      	adds	r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	e007      	b.n	8003b5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1cf      	bne.n	8003b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2140      	movs	r1, #64	; 0x40
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb52 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e006      	b.n	8003b9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d17c      	bne.n	8003cc0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_Receive+0x2c>
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e075      	b.n	8003cc2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2222      	movs	r2, #34	; 0x22
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bea:	f7fe f857 	bl	8001c9c <HAL_GetTick>
 8003bee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d108      	bne.n	8003c18 <HAL_UART_Receive+0x72>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e003      	b.n	8003c20 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c20:	e043      	b.n	8003caa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fafc 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e042      	b.n	8003cc2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10c      	bne.n	8003c5c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3302      	adds	r3, #2
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e01f      	b.n	8003c9c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c64:	d007      	beq.n	8003c76 <HAL_UART_Receive+0xd0>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_UART_Receive+0xde>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e008      	b.n	8003c96 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1b6      	bne.n	8003c22 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b0ba      	sub	sp, #232	; 0xe8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_UART_IRQHandler+0x66>
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fbc8 	bl	80044c0 <UART_Receive_IT>
      return;
 8003d30:	e25b      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80de 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x22c>
 8003d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80d1 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_UART_IRQHandler+0xae>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_UART_IRQHandler+0xd2>
 8003d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xf6>
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f043 0204 	orr.w	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_UART_IRQHandler+0x126>
 8003dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f043 0208 	orr.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 81f2 	beq.w	80041e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x14e>
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fb53 	bl	80044c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d103      	bne.n	8003e46 <HAL_UART_IRQHandler+0x17a>
 8003e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04f      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa5d 	bl	8004306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d041      	beq.n	8003ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1d9      	bne.n	8003e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d013      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_UART_IRQHandler+0x3e0>)
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fc38 	bl	8002730 <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e00e      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f993 	bl	8004202 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e00a      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f98f 	bl	8004202 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e006      	b.n	8003ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f98b 	bl	8004202 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ef2:	e175      	b.n	80041e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	bf00      	nop
    return;
 8003ef6:	e173      	b.n	80041e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 814f 	bne.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8148 	beq.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8141 	beq.w	80041a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80b6 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8145 	beq.w	80041e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f080 813e 	bcs.w	80041e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	f000 8088 	beq.w	800408c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fa8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1d9      	bne.n	8003f7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e1      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004028:	66fa      	str	r2, [r7, #108]	; 0x6c
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800402e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e3      	bne.n	8004004 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800405a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800406e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004070:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e3      	bne.n	800404a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fb17 	bl	80026ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800409a:	b29b      	uxth	r3, r3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8b6 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a8:	e09c      	b.n	80041e4 <HAL_UART_IRQHandler+0x518>
 80040aa:	bf00      	nop
 80040ac:	080043cb 	.word	0x080043cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 808e 	beq.w	80041e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8089 	beq.w	80041e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040fa:	647a      	str	r2, [r7, #68]	; 0x44
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e3      	bne.n	80040d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	623b      	str	r3, [r7, #32]
   return(result);
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004132:	633a      	str	r2, [r7, #48]	; 0x30
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60fb      	str	r3, [r7, #12]
   return(result);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	617b      	str	r3, [r7, #20]
   return(result);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e3      	bne.n	8004154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f83b 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800419e:	e023      	b.n	80041e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <HAL_UART_IRQHandler+0x4f4>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f91a 	bl	80043f2 <UART_Transmit_IT>
    return;
 80041be:	e014      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <HAL_UART_IRQHandler+0x51e>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f959 	bl	8004490 <UART_EndTransmit_IT>
    return;
 80041de:	e004      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
    return;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
      return;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_UART_IRQHandler+0x51e>
      return;
 80041e8:	bf00      	nop
  }
}
 80041ea:	37e8      	adds	r7, #232	; 0xe8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b090      	sub	sp, #64	; 0x40
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423a:	e050      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d04c      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0x30>
 800424a:	f7fd fd27 	bl	8001c9c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004256:	429a      	cmp	r2, r3
 8004258:	d241      	bcs.n	80042de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800427a:	637a      	str	r2, [r7, #52]	; 0x34
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ae:	623a      	str	r2, [r7, #32]
 80042b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	69f9      	ldr	r1, [r7, #28]
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e00f      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d09f      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3740      	adds	r7, #64	; 0x40
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004306:	b480      	push	{r7}
 8004308:	b095      	sub	sp, #84	; 0x54
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432e:	643a      	str	r2, [r7, #64]	; 0x40
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	61fb      	str	r3, [r7, #28]
   return(result);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b01      	cmp	r3, #1
 800437c:	d119      	bne.n	80043b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800439e:	61ba      	str	r2, [r7, #24]
 80043a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043c0:	bf00      	nop
 80043c2:	3754      	adds	r7, #84	; 0x54
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff0c 	bl	8004202 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b21      	cmp	r3, #33	; 0x21
 8004404:	d13e      	bne.n	8004484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d114      	bne.n	800443a <UART_Transmit_IT+0x48>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d110      	bne.n	800443a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800442c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	621a      	str	r2, [r3, #32]
 8004438:	e008      	b.n	800444c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6211      	str	r1, [r2, #32]
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800446e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fe9d 	bl	80041f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b22      	cmp	r3, #34	; 0x22
 80044d2:	f040 80ae 	bne.w	8004632 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d117      	bne.n	8004510 <UART_Receive_IT+0x50>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	629a      	str	r2, [r3, #40]	; 0x28
 800450e:	e026      	b.n	800455e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d007      	beq.n	8004534 <UART_Receive_IT+0x74>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <UART_Receive_IT+0x82>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e008      	b.n	8004554 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454e:	b2da      	uxtb	r2, r3
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29b      	uxth	r3, r3
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4619      	mov	r1, r3
 800456c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800456e:	2b00      	cmp	r3, #0
 8004570:	d15d      	bne.n	800462e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0220 	bic.w	r2, r2, #32
 8004580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d135      	bne.n	8004624 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f023 0310 	bic.w	r3, r3, #16
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	623a      	str	r2, [r7, #32]
 80045e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	69f9      	ldr	r1, [r7, #28]
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d10a      	bne.n	8004616 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff fdf9 	bl	8004214 <HAL_UARTEx_RxEventCallback>
 8004622:	e002      	b.n	800462a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fc fb2f 	bl	8000c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e002      	b.n	8004634 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3730      	adds	r7, #48	; 0x30
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004676:	f023 030c 	bic.w	r3, r3, #12
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	430b      	orrs	r3, r1
 8004682:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <UART_SetConfig+0x114>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7ff f97a 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	e002      	b.n	80046b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7ff f962 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 80046b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	0119      	lsls	r1, r3, #4
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <UART_SetConfig+0x118>)
 80046ea:	fba3 0302 	umull	r0, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2064      	movs	r0, #100	; 0x64
 80046f2:	fb00 f303 	mul.w	r3, r0, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <UART_SetConfig+0x118>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004708:	4419      	add	r1, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <UART_SetConfig+0x118>)
 8004722:	fba3 0302 	umull	r0, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2064      	movs	r0, #100	; 0x64
 800472a:	fb00 f303 	mul.w	r3, r0, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a07      	ldr	r2, [pc, #28]	; (8004754 <UART_SetConfig+0x118>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	440a      	add	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40013800 	.word	0x40013800
 8004754:	51eb851f 	.word	0x51eb851f

08004758 <memset>:
 8004758:	4603      	mov	r3, r0
 800475a:	4402      	add	r2, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	d100      	bne.n	8004762 <memset+0xa>
 8004760:	4770      	bx	lr
 8004762:	f803 1b01 	strb.w	r1, [r3], #1
 8004766:	e7f9      	b.n	800475c <memset+0x4>

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	2600      	movs	r6, #0
 800476c:	4d0c      	ldr	r5, [pc, #48]	; (80047a0 <__libc_init_array+0x38>)
 800476e:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	42a6      	cmp	r6, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	f000 f81a 	bl	80047b0 <_init>
 800477c:	2600      	movs	r6, #0
 800477e:	4d0a      	ldr	r5, [pc, #40]	; (80047a8 <__libc_init_array+0x40>)
 8004780:	4c0a      	ldr	r4, [pc, #40]	; (80047ac <__libc_init_array+0x44>)
 8004782:	1b64      	subs	r4, r4, r5
 8004784:	10a4      	asrs	r4, r4, #2
 8004786:	42a6      	cmp	r6, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004790:	4798      	blx	r3
 8004792:	3601      	adds	r6, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	f855 3b04 	ldr.w	r3, [r5], #4
 800479a:	4798      	blx	r3
 800479c:	3601      	adds	r6, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	080047f4 	.word	0x080047f4
 80047a4:	080047f4 	.word	0x080047f4
 80047a8:	080047f4 	.word	0x080047f4
 80047ac:	080047f8 	.word	0x080047f8

080047b0 <_init>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr

080047bc <_fini>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr

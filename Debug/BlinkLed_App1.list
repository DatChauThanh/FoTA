
BlinkLed_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e4  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb8  08007cb8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb8  08007cb8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b48  20000070  08007d2c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08007d2c  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f62f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ebc  00000000  00000000  0002f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6f  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019581  00000000  00000000  00033fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145ff  00000000  00000000  0004d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000895b7  00000000  00000000  00061b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004090  00000000  00000000  000eb128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ef1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080066bc 	.word	0x080066bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080066bc 	.word	0x080066bc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d102      	bne.n	8000664 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 800065e:	2350      	movs	r3, #80	; 0x50
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e001      	b.n	8000668 <CAN_IF_Transmit_UDS_Request+0x20>
   }
   else{
	   Local_u8SendToNode = 0x60;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000678:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <CAN_IF_Transmit_UDS_Request+0x5c>)
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <CAN_IF_Transmit_UDS_Request+0x60>)
 800068e:	f002 fb1b 	bl	8002cc8 <HAL_CAN_AddTxMessage>
 8000692:	4603      	mov	r3, r0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000a00 	.word	0x20000a00
 80006a0:	20000a34 	.word	0x20000a34
 80006a4:	20000a44 	.word	0x20000a44
 80006a8:	20000914 	.word	0x20000914

080006ac <CAN_IF_Trasmit_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Trasmit_Data_Frame(uint8_t Node ,const uint8_t *DataBuffer ,uint8_t DataLength){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	//Check Is buffer NULL
	if(DataBuffer == NULL){
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <CAN_IF_Trasmit_Data_Frame+0x1a>
		return HAL_ERROR ;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e02b      	b.n	800071e <CAN_IF_Trasmit_Data_Frame+0x72>
	}
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d102      	bne.n	80006d2 <CAN_IF_Trasmit_Data_Frame+0x26>
	   Local_u8SendToNode = 0x50; //Send to 0x101
 80006cc:	2350      	movs	r3, #80	; 0x50
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <CAN_IF_Trasmit_Data_Frame+0x2a>
   }
   else{
	   Local_u8SendToNode = 0x60; //Send to 0x102
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006e6:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = DataLength;  // data length
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006ec:	6113      	str	r3, [r2, #16]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <CAN_IF_Trasmit_Data_Frame+0x5c>
	  TxData[index] = *( DataBuffer + index );
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	7811      	ldrb	r1, [r2, #0]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000700:	54d1      	strb	r1, [r2, r3]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bba      	ldrb	r2, [r7, #14]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f1      	bcc.n	80006f4 <CAN_IF_Trasmit_Data_Frame+0x48>
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <CAN_IF_Trasmit_Data_Frame+0x84>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <CAN_IF_Trasmit_Data_Frame+0x88>)
 8000718:	f002 fad6 	bl	8002cc8 <HAL_CAN_AddTxMessage>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000a00 	.word	0x20000a00
 800072c:	20000a34 	.word	0x20000a34
 8000730:	20000a44 	.word	0x20000a44
 8000734:	20000914 	.word	0x20000914

08000738 <CAN_IF_Receive_UDS_Respond>:

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <CAN_IF_Receive_UDS_Respond+0x40>)
 8000754:	2100      	movs	r1, #0
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000758:	f002 fb85 	bl	8002e66 <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000914 	.word	0x20000914
 8000774:	20000a3c 	.word	0x20000a3c
 8000778:	20000a18 	.word	0x20000a18

0800077c <Decrypt_Address_Read_Init>:
static GlobalFlag Global_BufferFlag  ;

volatile uint32_t Global_ReadAddress ;

void  Decrypt_Address_Read_Init (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	Global_ReadAddress  = STORE_AREA_START_ADDRESS ;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <Decrypt_Address_Read_Init+0x14>)
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <Decrypt_Address_Read_Init+0x18>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000098 	.word	0x20000098
 8000794:	08005000 	.word	0x08005000

08000798 <Decrypt_MainFunction>:

void Decrypt_MainFunction (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

	Std_ReturnType status ;
	
	 /*check system state value "Data receive point "*/
		status = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007a0:	f000 fcb0 	bl	8001104 <Rte_ReadSystemState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
	
		/* Check if there is an error during read operation */
		if (E_OK == status)
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d133      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		{			
			/* make sure that system state is Decrypt  */
			if (SYS_DECRYPT == Global_SystemState)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d12f      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			{
				  /*Read buffer Flag  "Data receive point "*/
			    status = RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Global_BufferFlag);
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007b8:	f000 fc5e 	bl	8001078 <Rte_ReadDecryptedDataBufferFlag>
 80007bc:	4603      	mov	r3, r0
 80007be:	71bb      	strb	r3, [r7, #6]
			   	/* Check if there is an error during read operation */
		        if (E_OK == status)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d127      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		        {
					   /* make sure that buffer state is not set  */
		            if (BUFFER_NOT_SET == Global_BufferFlag)
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d123      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			        {
	                              /*access piont to decrypt SWC*/								
			      	          /*Read Decrypted Data from flash rom*/
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e00f      	b.n	80007f4 <Decrypt_MainFunction+0x5c>
						{
		                	Global_PlainDataPtr[Local_Counter] = (*(volatile uint8_t*)(Global_ReadAddress) ) ;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	b2d1      	uxtb	r1, r2
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <Decrypt_MainFunction+0x94>)
 80007e2:	54d1      	strb	r1, [r2, r3]
							Global_ReadAddress++;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007ec:	6013      	str	r3, [r2, #0]
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9ec      	bls.n	80007d4 <Decrypt_MainFunction+0x3c>
						}
              
						if( E_OK == status )
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
//							    if( E_OK == status )
//                                {
//			                        /*Write decrypted buffer to decrypt port "Data send point "*/
//                                    status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
//								}
							status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <Decrypt_MainFunction+0x94>)
 8000802:	f000 fbcf 	bl	8000fa4 <Rte_WriteDecryptedDataBuffer>
 8000806:	4603      	mov	r3, r0
 8000808:	71bb      	strb	r3, [r7, #6]
							 /*Change buffer flag value to set "Data send point "*/
							RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(BUFFER_SET);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc12 	bl	8001034 <Rte_WriteDecryptedDataBufferFlag>
							 /*Change system flag to SEND , "Data send point "*/
							RTE_WRITE_SYSTEM_STATE(SYS_SEND_UPDATE);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fc55 	bl	80010c0 <Rte_WriteSystemState>
			{
									/* Do nothing */
							/*system state is not Decrypt*/							
			}						
        }				      
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000094 	.word	0x20000094
 8000824:	20000095 	.word	0x20000095
 8000828:	20000098 	.word	0x20000098
 800082c:	2000008c 	.word	0x2000008c

08000830 <FR_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void FR_voidInitVariables (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <FR_voidInitVariables+0x14>)
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <FR_voidInitVariables+0x18>)
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c
 8000848:	0800a800 	.word	0x0800a800

0800084c <FR_FlashBlockToAddress>:


HAL_StatusTypeDef FR_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 800085c:	2300      	movs	r3, #0
 800085e:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000860:	2300      	movs	r3, #0
 8000862:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <FR_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e024      	b.n	80008ba <FR_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000870:	2300      	movs	r3, #0
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	e01d      	b.n	80008b2 <FR_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b21a      	sxth	r2, r3
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	440b      	add	r3, r1
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	817b      	strh	r3, [r7, #10]
			FR_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	897a      	ldrh	r2, [r7, #10]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f832 	bl	8000906 <FR_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008aa:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 80008ac:	89bb      	ldrh	r3, [r7, #12]
 80008ae:	3302      	adds	r3, #2
 80008b0:	81bb      	strh	r3, [r7, #12]
 80008b2:	89ba      	ldrh	r2, [r7, #12]
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3dd      	bcc.n	8000876 <FR_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000009c 	.word	0x2000009c

080008c8 <FR_Erase_Image>:

HAL_StatusTypeDef FR_Erase_Image(uint32_t ImageAddress)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	22;
 80008dc:	2316      	movs	r3, #22
 80008de:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80008e0:	f002 fe12 	bl	8003508 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80008e4:	f107 0208 	add.w	r2, r7, #8
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fef2 	bl	80036d8 <HAL_FLASHEx_Erase>
 80008f4:	4603      	mov	r3, r0
 80008f6:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Lock();
 80008f8:	f002 fe2c 	bl	8003554 <HAL_FLASH_Lock>

	return Local_retVal;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <FR_FlashHalfWordToAddress>:


HAL_StatusTypeDef FR_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000906:	b5b0      	push	{r4, r5, r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000912:	f002 fdf9 	bl	8003508 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	2200      	movs	r2, #0
 800091a:	461c      	mov	r4, r3
 800091c:	4615      	mov	r5, r2
 800091e:	4622      	mov	r2, r4
 8000920:	462b      	mov	r3, r5
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	2001      	movs	r0, #1
 8000926:	f002 fd7f 	bl	8003428 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 800092e:	f002 fe11 	bl	8003554 <HAL_FLASH_Lock>

	return Local_retVal;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bdb0      	pop	{r4, r5, r7, pc}

0800093c <ReceiveUpdate_InitializeModule>:
/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveUpdate_InitializeModule(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	/* Init Variables */
	Global_CrcValue 				= INITIAL_VALUE ;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <ReceiveUpdate_InitializeModule+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	Global_SizeValue 				= INITIAL_VALUE ;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <ReceiveUpdate_InitializeModule+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
	Global_NodeId 					= INITIAL_VALUE ;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <ReceiveUpdate_InitializeModule+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	Global_SystemState 				= SYS_IDLE ;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <ReceiveUpdate_InitializeModule+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	Global_RxInternalSate 			= RX_IDLE ;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <ReceiveUpdate_InitializeModule+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	Global_NumberOfPackets			= INITIAL_VALUE ;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <ReceiveUpdate_InitializeModule+0x70>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	Global_RemainingBytes 			= INITIAL_VALUE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <ReceiveUpdate_InitializeModule+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	801a      	strh	r2, [r3, #0]
	Global_RxUserResponse 			= INITIAL_VALUE;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <ReceiveUpdate_InitializeModule+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
	Global_DownloadPercentage 		= INITIAL_VALUE ;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <ReceiveUpdate_InitializeModule+0x7c>)
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
	Global_DownloadUpdateProgeress 	= INITIAL_VALUE ;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <ReceiveUpdate_InitializeModule+0x80>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	Global_ReceivedBytes 			= INITIAL_VALUE;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <ReceiveUpdate_InitializeModule+0x84>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
	/* Init ESP (uart) interrupt to receive requests */
	HAL_UART_Receive_IT(&huart1 , Global_HeaderBuffer , 1);
 8000984:	2201      	movs	r2, #1
 8000986:	490f      	ldr	r1, [pc, #60]	; (80009c4 <ReceiveUpdate_InitializeModule+0x88>)
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <ReceiveUpdate_InitializeModule+0x8c>)
 800098a:	f004 fc40 	bl	800520e <HAL_UART_Receive_IT>
	FR_voidInitVariables();
 800098e:	f7ff ff4f 	bl	8000830 <FR_voidInitVariables>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000a0 	.word	0x200000a0
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	200000a8 	.word	0x200000a8
 80009a4:	200000a9 	.word	0x200000a9
 80009a8:	200000aa 	.word	0x200000aa
 80009ac:	200000b2 	.word	0x200000b2
 80009b0:	200000b4 	.word	0x200000b4
 80009b4:	200000b6 	.word	0x200000b6
 80009b8:	200004b8 	.word	0x200004b8
 80009bc:	200004bc 	.word	0x200004bc
 80009c0:	200004c0 	.word	0x200004c0
 80009c4:	200000ac 	.word	0x200000ac
 80009c8:	20000990 	.word	0x20000990

080009cc <ReceiveUpdate_MainFunction>:

void ReceiveUpdate_MainFunction (void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
	switch(Global_RxInternalSate)
 80009d2:	4b97      	ldr	r3, [pc, #604]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	f200 8182 	bhi.w	8000ce0 <ReceiveUpdate_MainFunction+0x314>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <ReceiveUpdate_MainFunction+0x18>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009fd 	.word	0x080009fd
 80009e8:	08000a2b 	.word	0x08000a2b
 80009ec:	08000a7f 	.word	0x08000a7f
 80009f0:	08000b25 	.word	0x08000b25
 80009f4:	08000c6d 	.word	0x08000c6d
 80009f8:	08000a47 	.word	0x08000a47
	{
		case RX_IDLE:
		{
			uint8_t Local_Error = RTE_READ_USER_RESPONSE(&Global_RxUserResponse);
 80009fc:	488d      	ldr	r0, [pc, #564]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 80009fe:	f000 fbc7 	bl	8001190 <Rte_ReadUserResponse>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
			if(Local_Error == E_OK)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10e      	bne.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
			{
				if (Global_RxUserResponse == ACCEPT_UPDATE)
 8000a0c:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d103      	bne.n	8000a1c <ReceiveUpdate_MainFunction+0x50>
				{
					Global_RxInternalSate = RX_ACCEPT_UPDATE ;
 8000a14:	4b86      	ldr	r3, [pc, #536]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e006      	b.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
				}
				else if (Global_RxUserResponse == REFUSE_UPDATE)
 8000a1c:	4b85      	ldr	r3, [pc, #532]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d102      	bne.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
				{
					Global_RxInternalSate = RX_REFUSE_UPDATE ;
 8000a24:	4b82      	ldr	r3, [pc, #520]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000a26:	2205      	movs	r2, #5
 8000a28:	701a      	strb	r2, [r3, #0]
		}
		/*****************************RX_ACCEPT_UPDATE ***********************************/
		case RX_ACCEPT_UPDATE :
		{
			/* Inform ESP to accept request */
			Global_HeaderReqByte = REQUEST_ACCEPTED;
 8000a2a:	4b83      	ldr	r3, [pc, #524]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2201      	movs	r2, #1
 8000a36:	4980      	ldr	r1, [pc, #512]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a38:	4880      	ldr	r0, [pc, #512]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a3a:	f004 fad3 	bl	8004fe4 <HAL_UART_Transmit>
			/* Change Internal State */
			Global_RxInternalSate = RX_RECEIVE_HEADER ;
 8000a3e:	4b7c      	ldr	r3, [pc, #496]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	701a      	strb	r2, [r3, #0]
			break;
 8000a44:	e14d      	b.n	8000ce2 <ReceiveUpdate_MainFunction+0x316>
		}
		/*****************************RX_REFUSE_UPDATE***********************************/
		case RX_REFUSE_UPDATE :
		{
			/* Inform ESP to Reject request */
			Global_HeaderReqByte = REQUEST_REFUSED;
 8000a46:	4b7c      	ldr	r3, [pc, #496]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a48:	2206      	movs	r2, #6
 8000a4a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2201      	movs	r2, #1
 8000a52:	4979      	ldr	r1, [pc, #484]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a54:	4879      	ldr	r0, [pc, #484]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a56:	f004 fac5 	bl	8004fe4 <HAL_UART_Transmit>
			/* Initialize */
			Global_RxUserResponse = INITIAL_VALUE;
 8000a5a:	4b76      	ldr	r3, [pc, #472]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_IDLE);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fb2d 	bl	80010c0 <Rte_WriteSystemState>
			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000a66:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0220 	orr.w	r2, r2, #32
 8000a74:	60da      	str	r2, [r3, #12]
			/* Change Internal State */
			Global_RxInternalSate = RX_IDLE ;
 8000a76:	4b6e      	ldr	r3, [pc, #440]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			break;
 8000a7c:	e131      	b.n	8000ce2 <ReceiveUpdate_MainFunction+0x316>
		}
		/*****************************RX_RECEIVE_HEADER***********************************/
		case RX_RECEIVE_HEADER :
		{
			/* Inform ESP to send Header */
			Global_HeaderReqByte = ESP_SEND_HEADER;
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	2201      	movs	r2, #1
 8000a8a:	496b      	ldr	r1, [pc, #428]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a8c:	486b      	ldr	r0, [pc, #428]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a8e:	f004 faa9 	bl	8004fe4 <HAL_UART_Transmit>

			/* Receive Header */
			HAL_UART_Receive(&huart1, Global_HeaderBuffer, HEADER_SIZE, HAL_MAX_DELAY);
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2205      	movs	r2, #5
 8000a98:	4969      	ldr	r1, [pc, #420]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a9a:	4868      	ldr	r0, [pc, #416]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a9c:	f004 fb25 	bl	80050ea <HAL_UART_Receive>

			/* Process header */
			Global_SizeValue = Global_HeaderBuffer[0] | (Global_HeaderBuffer[1] << SHIFT_BY_8) |(Global_HeaderBuffer[2] << SHIFT_BY_16) | (Global_HeaderBuffer[3] << SHIFT_BY_24);
 8000aa0:	4b67      	ldr	r3, [pc, #412]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4b64      	ldr	r3, [pc, #400]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	061b      	lsls	r3, r3, #24
 8000abc:	4313      	orrs	r3, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000ac2:	601a      	str	r2, [r3, #0]
			Global_NodeId = Global_HeaderBuffer[4];
 8000ac4:	4b5e      	ldr	r3, [pc, #376]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000ac6:	791a      	ldrb	r2, [r3, #4]
 8000ac8:	4b5f      	ldr	r3, [pc, #380]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000aca:	701a      	strb	r2, [r3, #0]

			/* Write Data To RTE */
			RTE_WRITE_CODE_SIZE(Global_SizeValue);
 8000acc:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f9b9 	bl	8000e48 <Rte_WriteCodeSize>
			RTE_WRITE_NODE_ID(Global_NodeId);
 8000ad6:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f96e 	bl	8000dbc <Rte_WriteNodeId>
			RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 fa19 	bl	8000f18 <Rte_WriteHeaderAckFlag>

			/* Get info from header */
			Global_NumberOfPackets  = (uint8_t)(Global_SizeValue / PACKET_SIZE) ;
 8000ae6:	4b57      	ldr	r3, [pc, #348]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0a9b      	lsrs	r3, r3, #10
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000af0:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = (Global_SizeValue % PACKET_SIZE);
 8000af2:	4b54      	ldr	r3, [pc, #336]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b54      	ldr	r3, [pc, #336]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000b00:	801a      	strh	r2, [r3, #0]

			/* Ack Header */
			Global_HeaderReqByte = HEADER_RECEIVED;
 8000b02:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	494a      	ldr	r1, [pc, #296]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b10:	484a      	ldr	r0, [pc, #296]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b12:	f004 fa67 	bl	8004fe4 <HAL_UART_Transmit>
			/*Erase Image to flash new firmware from Telematic unit*/
			FR_Erase_Image(IMAGE_NEW_FIRMWARE);
 8000b16:	484f      	ldr	r0, [pc, #316]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000b18:	f7ff fed6 	bl	80008c8 <FR_Erase_Image>
			/* Change State */
			Global_RxInternalSate = RX_RECEIVE_PACKET ;
 8000b1c:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000b1e:	2203      	movs	r2, #3
 8000b20:	701a      	strb	r2, [r3, #0]

			break;
 8000b22:	e0de      	b.n	8000ce2 <ReceiveUpdate_MainFunction+0x316>
		}
		case RX_RECEIVE_PACKET:
		{
			/* Inform ESP to send Package */
			Global_HeaderReqByte = SEND_NEXT_PACKET;
 8000b24:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4941      	ldr	r1, [pc, #260]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b32:	4842      	ldr	r0, [pc, #264]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b34:	f004 fa56 	bl	8004fe4 <HAL_UART_Transmit>

			if (Global_NumberOfPackets > 0)
 8000b38:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d023      	beq.n	8000b88 <ReceiveUpdate_MainFunction+0x1bc>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, PACKET_SIZE, HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b48:	4943      	ldr	r1, [pc, #268]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000b4a:	483c      	ldr	r0, [pc, #240]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b4c:	f004 facd 	bl	80050ea <HAL_UART_Receive>
				Global_NumberOfPackets--;
 8000b50:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b3c      	ldr	r3, [pc, #240]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000b5a:	701a      	strb	r2, [r3, #0]
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , PACKET_SIZE);
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	483d      	ldr	r0, [pc, #244]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000b62:	f7ff fe73 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack Packet */
				Global_HeaderReqByte = PACKET_RECEIVED;
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2201      	movs	r2, #1
 8000b72:	4931      	ldr	r1, [pc, #196]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000b74:	4831      	ldr	r0, [pc, #196]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b76:	f004 fa35 	bl	8004fe4 <HAL_UART_Transmit>

				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += PACKET_SIZE ;
 8000b7a:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b82:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e02a      	b.n	8000bde <ReceiveUpdate_MainFunction+0x212>
			}

			else if ((Global_NumberOfPackets == 0) && (Global_RemainingBytes > 0) )
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d126      	bne.n	8000bde <ReceiveUpdate_MainFunction+0x212>
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d022      	beq.n	8000bde <ReceiveUpdate_MainFunction+0x212>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, Global_RemainingBytes, HAL_MAX_DELAY);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000b9a:	881a      	ldrh	r2, [r3, #0]
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	492d      	ldr	r1, [pc, #180]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000ba2:	4826      	ldr	r0, [pc, #152]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000ba4:	f004 faa1 	bl	80050ea <HAL_UART_Receive>
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , Global_RemainingBytes);
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	482a      	ldr	r0, [pc, #168]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000bb0:	f7ff fe4c 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack last packet */
				Global_HeaderReqByte = LAST_PACKET_RECEIVED;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000bb6:	220b      	movs	r2, #11
 8000bb8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	491d      	ldr	r1, [pc, #116]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000bc4:	f004 fa0e 	bl	8004fe4 <HAL_UART_Transmit>
				/* Change Internal state */
				Global_RxInternalSate = RX_END_STATE ;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <ReceiveUpdate_MainFunction+0x264>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	701a      	strb	r2, [r3, #0]
				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += Global_RemainingBytes ;
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000bdc:	6013      	str	r3, [r2, #0]
			else
			{
				/* Error */
			}
			/*Calculate progress */
			Global_DownloadPercentage = ((float)Global_ReceivedBytes /(float) Global_SizeValue) ;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fb68 	bl	80002b8 <__aeabi_ui2f>
 8000be8:	4604      	mov	r4, r0
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fb62 	bl	80002b8 <__aeabi_ui2f>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fc69 	bl	80004d0 <__aeabi_fdiv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000c04:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = Global_DownloadPercentage * 100 ;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4916      	ldr	r1, [pc, #88]	; (8000c64 <ReceiveUpdate_MainFunction+0x298>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbab 	bl	8000368 <__aeabi_fmul>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fcf7 	bl	8000608 <__aeabi_f2uiz>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <ReceiveUpdate_MainFunction+0x29c>)
 8000c20:	701a      	strb	r2, [r3, #0]
			/* Write to RTE to Signal UserIntrface Module */
			RTE_WRITE_DOWNLOAD_PROGRESS (Global_DownloadUpdateProgeress);
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <ReceiveUpdate_MainFunction+0x29c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fad6 	bl	80011d8 <Rte_WriteUpdateProgress>
			break;
 8000c2c:	e059      	b.n	8000ce2 <ReceiveUpdate_MainFunction+0x316>
 8000c2e:	bf00      	nop
 8000c30:	200000aa 	.word	0x200000aa
 8000c34:	200000b6 	.word	0x200000b6
 8000c38:	200000b1 	.word	0x200000b1
 8000c3c:	20000990 	.word	0x20000990
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	200000a4 	.word	0x200000a4
 8000c48:	200000a8 	.word	0x200000a8
 8000c4c:	200000b2 	.word	0x200000b2
 8000c50:	200000b4 	.word	0x200000b4
 8000c54:	0800a800 	.word	0x0800a800
 8000c58:	200000b8 	.word	0x200000b8
 8000c5c:	200004c0 	.word	0x200004c0
 8000c60:	200004b8 	.word	0x200004b8
 8000c64:	42c80000 	.word	0x42c80000
 8000c68:	200004bc 	.word	0x200004bc
		}
		/*****************************RX_END_STATE***********************************/
		case RX_END_STATE :
		{
			/* Inform the Esp Code has been received */
			Global_HeaderReqByte = ESP_DOWNLOAD_DONE;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <ReceiveUpdate_MainFunction+0x320>)
 8000c6e:	220d      	movs	r2, #13
 8000c70:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	491c      	ldr	r1, [pc, #112]	; (8000cec <ReceiveUpdate_MainFunction+0x320>)
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <ReceiveUpdate_MainFunction+0x324>)
 8000c7c:	f004 f9b2 	bl	8004fe4 <HAL_UART_Transmit>

			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 fa1d 	bl	80010c0 <Rte_WriteSystemState>

			/* Reset Variables */
			Global_CrcValue = INITIAL_VALUE;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <ReceiveUpdate_MainFunction+0x328>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
			Global_SizeValue = INITIAL_VALUE;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <ReceiveUpdate_MainFunction+0x32c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
			Global_NodeId = INITIAL_VALUE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <ReceiveUpdate_MainFunction+0x330>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
			Global_NumberOfPackets = INITIAL_VALUE;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <ReceiveUpdate_MainFunction+0x334>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = INITIAL_VALUE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <ReceiveUpdate_MainFunction+0x338>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
			Global_RxUserResponse = INITIAL_VALUE;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <ReceiveUpdate_MainFunction+0x33c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
			Global_DownloadPercentage = INITIAL_VALUE;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <ReceiveUpdate_MainFunction+0x340>)
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = INITIAL_VALUE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <ReceiveUpdate_MainFunction+0x344>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			Global_ReceivedBytes = INITIAL_VALUE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <ReceiveUpdate_MainFunction+0x348>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

			RTE_WRITE_DOWNLOAD_PROGRESS(INITIAL_VALUE);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 fa8a 	bl	80011d8 <Rte_WriteUpdateProgress>

			/* Reset ReProgram Address Variables */
			FR_voidInitVariables();
 8000cc4:	f7ff fdb4 	bl	8000830 <FR_voidInitVariables>

			/* Change system state */
			Global_RxInternalSate = RX_IDLE;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <ReceiveUpdate_MainFunction+0x34c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]

			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <ReceiveUpdate_MainFunction+0x324>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <ReceiveUpdate_MainFunction+0x324>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f042 0220 	orr.w	r2, r2, #32
 8000cdc:	60da      	str	r2, [r3, #12]
			break;
 8000cde:	e000      	b.n	8000ce2 <ReceiveUpdate_MainFunction+0x316>
		}

		/*****************************DEFUALT (ERROR)***********************************/
		default :
			/* Error */
			break ;
 8000ce0:	bf00      	nop

	}
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000b1 	.word	0x200000b1
 8000cf0:	20000990 	.word	0x20000990
 8000cf4:	200000a0 	.word	0x200000a0
 8000cf8:	200000a4 	.word	0x200000a4
 8000cfc:	200000a8 	.word	0x200000a8
 8000d00:	200000b2 	.word	0x200000b2
 8000d04:	200000b4 	.word	0x200000b4
 8000d08:	200000b6 	.word	0x200000b6
 8000d0c:	200004b8 	.word	0x200004b8
 8000d10:	200004bc 	.word	0x200004bc
 8000d14:	200004c0 	.word	0x200004c0
 8000d18:	200000aa 	.word	0x200000aa

08000d1c <HAL_UART_RxCpltCallback>:

/**************************************************************************/
/*                         Esp Uart Handler                               */
/**************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_Error ;
	//Testing
//	RTE_WRITE_USER_RESPONSE(ACCEPT_UPDATE);
	/* Check of the ESP request */
	if (NEW_UPDATE_REQUEST == Global_HeaderBuffer[0])
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_UART_RxCpltCallback+0x90>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d130      	bne.n	8000d8e <HAL_UART_RxCpltCallback+0x72>
	{
		Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8000d2c:	4820      	ldr	r0, [pc, #128]	; (8000db0 <HAL_UART_RxCpltCallback+0x94>)
 8000d2e:	f000 f9e9 	bl	8001104 <Rte_ReadSystemState>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
		/* Check whether a read operation of the system state done successfully or not */
		if (E_OK == Local_Error)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11a      	bne.n	8000d72 <HAL_UART_RxCpltCallback+0x56>
		{
			/* Before accepting update request will check the system state */
			if (SYS_IDLE == Global_SystemState)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_UART_RxCpltCallback+0x94>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10b      	bne.n	8000d5c <HAL_UART_RxCpltCallback+0x40>
			{
				/* Accept the request and change system state */
				RTE_WRITE_SYSTEM_STATE(SYS_NEW_UPDATE_REQ);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 f9bb 	bl	80010c0 <Rte_WriteSystemState>
				//testing without user interface
				//RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
				/* Disble the interrupt till receive the code by synch function */
				__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_UART_RxCpltCallback+0x98>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_RxCpltCallback+0x98>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0220 	bic.w	r2, r2, #32
 8000d58:	60da      	str	r2, [r3, #12]
		/* Response for unvalid requests */
		Global_HeaderReqByte = INVALID_REQUEST;
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
	}

}
 8000d5a:	e022      	b.n	8000da2 <HAL_UART_RxCpltCallback+0x86>
				Global_HeaderReqByte = GATEWAY_BUSY;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2201      	movs	r2, #1
 8000d68:	4913      	ldr	r1, [pc, #76]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <HAL_UART_RxCpltCallback+0x98>)
 8000d6c:	f004 f93a 	bl	8004fe4 <HAL_UART_Transmit>
}
 8000d70:	e017      	b.n	8000da2 <HAL_UART_RxCpltCallback+0x86>
		else if (E_NOT_OK == Local_Error)
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d114      	bne.n	8000da2 <HAL_UART_RxCpltCallback+0x86>
			Global_HeaderReqByte = SYSTEM_STATE_UNDIFINED;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2201      	movs	r2, #1
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <HAL_UART_RxCpltCallback+0x98>)
 8000d88:	f004 f92c 	bl	8004fe4 <HAL_UART_Transmit>
}
 8000d8c:	e009      	b.n	8000da2 <HAL_UART_RxCpltCallback+0x86>
		Global_HeaderReqByte = INVALID_REQUEST;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4907      	ldr	r1, [pc, #28]	; (8000db8 <HAL_UART_RxCpltCallback+0x9c>)
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_RxCpltCallback+0x98>)
 8000d9e:	f004 f921 	bl	8004fe4 <HAL_UART_Transmit>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000ac 	.word	0x200000ac
 8000db0:	200000a9 	.word	0x200000a9
 8000db4:	20000990 	.word	0x20000990
 8000db8:	200000b1 	.word	0x200000b1

08000dbc <Rte_WriteNodeId>:

/**************************************************************************/
/*                         NodeId Port                                    */
/**************************************************************************/
Std_ReturnType Rte_WriteNodeId (uint8_t Cpy_NodeId)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
	
	if (Global_NodeIdPortState == IDLE)
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <Rte_WriteNodeId+0x3c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <Rte_WriteNodeId+0x2a>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <Rte_WriteNodeId+0x3c>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_NodeId = Cpy_NodeId ; 
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <Rte_WriteNodeId+0x40>)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <Rte_WriteNodeId+0x3c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	e001      	b.n	8000dea <Rte_WriteNodeId+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200004da 	.word	0x200004da
 8000dfc:	200004cc 	.word	0x200004cc

08000e00 <Rte_ReadNodeId>:

Std_ReturnType Rte_ReadNodeId (uint8_t *Cpy_NodeId)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_NodeIdPortState == IDLE) && (Cpy_NodeId != NULL_PTR))
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <Rte_ReadNodeId+0x40>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10d      	bne.n	8000e30 <Rte_ReadNodeId+0x30>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00a      	beq.n	8000e30 <Rte_ReadNodeId+0x30>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <Rte_ReadNodeId+0x40>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_NodeId) = Global_NodeId ; 
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <Rte_ReadNodeId+0x44>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <Rte_ReadNodeId+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e001      	b.n	8000e34 <Rte_ReadNodeId+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	200004da 	.word	0x200004da
 8000e44:	200004cc 	.word	0x200004cc

08000e48 <Rte_WriteCodeSize>:

/**************************************************************************/
/*                         CodeSize Port                                  */
/**************************************************************************/
Std_ReturnType Rte_WriteCodeSize(uint32_t Cpy_CodeSize)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
	
	if (Global_CodeSizePortState == IDLE)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <Rte_WriteCodeSize+0x38>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d109      	bne.n	8000e70 <Rte_WriteCodeSize+0x28>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <Rte_WriteCodeSize+0x38>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_CodeSizeValue = Cpy_CodeSize ; 
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <Rte_WriteCodeSize+0x3c>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <Rte_WriteCodeSize+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e001      	b.n	8000e74 <Rte_WriteCodeSize+0x2c>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	200004d9 	.word	0x200004d9
 8000e84:	200004c8 	.word	0x200004c8

08000e88 <Rte_ReadCodeSize>:

Std_ReturnType Rte_ReadCodeSize(uint32_t *Cpy_CodeSize)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_CodeSizePortState == IDLE) && (Cpy_CodeSize != NULL_PTR))
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <Rte_ReadCodeSize+0x40>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10d      	bne.n	8000eb8 <Rte_ReadCodeSize+0x30>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00a      	beq.n	8000eb8 <Rte_ReadCodeSize+0x30>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <Rte_ReadCodeSize+0x40>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_CodeSize) = Global_CodeSizeValue ; 
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <Rte_ReadCodeSize+0x44>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <Rte_ReadCodeSize+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e001      	b.n	8000ebc <Rte_ReadCodeSize+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	200004d9 	.word	0x200004d9
 8000ecc:	200004c8 	.word	0x200004c8

08000ed0 <Rte_ReadCrc>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadCrc(uint32_t *Cpy_Crc)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

	if ( (Global_CrcPortState == IDLE) && (Cpy_Crc != NULL_PTR) )
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <Rte_ReadCrc+0x40>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10d      	bne.n	8000f00 <Rte_ReadCrc+0x30>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00a      	beq.n	8000f00 <Rte_ReadCrc+0x30>
	{
		/* Lock the port to write */
		Global_CrcPortState = BUSY ;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <Rte_ReadCrc+0x40>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_Crc) = Global_CrcValue ;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <Rte_ReadCrc+0x44>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CrcPortState = IDLE ;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <Rte_ReadCrc+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e001      	b.n	8000f04 <Rte_ReadCrc+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200004d8 	.word	0x200004d8
 8000f14:	200004c4 	.word	0x200004c4

08000f18 <Rte_WriteHeaderAckFlag>:

/**************************************************************************/
/*                         Header Ack Flag Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteHeaderAckFlag(FlagType Cpy_HeaderAckFlag)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
	
	if (Global_HeaderAckFlagState == IDLE)
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <Rte_WriteHeaderAckFlag+0x2a>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_HeaderAckFlag = Cpy_HeaderAckFlag ; 
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <Rte_WriteHeaderAckFlag+0x40>)
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e001      	b.n	8000f46 <Rte_WriteHeaderAckFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200004db 	.word	0x200004db
 8000f58:	200004cd 	.word	0x200004cd

08000f5c <Rte_ReadHeaderAckFlag>:

Std_ReturnType Rte_ReadHeaderAckFlag(FlagType *Cpy_HeaderAckFlag)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_HeaderAckFlagState == IDLE) && (Cpy_HeaderAckFlag != NULL_PTR) )
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <Rte_ReadHeaderAckFlag+0x40>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10d      	bne.n	8000f8c <Rte_ReadHeaderAckFlag+0x30>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <Rte_ReadHeaderAckFlag+0x30>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <Rte_ReadHeaderAckFlag+0x40>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_HeaderAckFlag) = Global_HeaderAckFlag ; 
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <Rte_ReadHeaderAckFlag+0x44>)
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <Rte_ReadHeaderAckFlag+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e001      	b.n	8000f90 <Rte_ReadHeaderAckFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	200004db 	.word	0x200004db
 8000fa0:	200004cd 	.word	0x200004cd

08000fa4 <Rte_WriteDecryptedDataBuffer>:

/**************************************************************************/
/*                         Decrypted Data Buffer Port                     */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBuffer(uint8_t *Cpy_DecryptedDataBufferPtr)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
	
	if ((Global_DecryptedDataBufferState == IDLE)&& (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <Rte_WriteDecryptedDataBuffer+0x2e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <Rte_WriteDecryptedDataBuffer+0x2e>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferPtr = Cpy_DecryptedDataBufferPtr ; 
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <Rte_WriteDecryptedDataBuffer+0x44>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e001      	b.n	8000fd6 <Rte_WriteDecryptedDataBuffer+0x32>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200004dc 	.word	0x200004dc
 8000fe8:	200004d0 	.word	0x200004d0

08000fec <Rte_ReadDecryptedDataBuffer>:

Std_ReturnType Rte_ReadDecryptedDataBuffer(uint8_t **Cpy_DecryptedDataBufferPtr)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferState == IDLE) && (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <Rte_ReadDecryptedDataBuffer+0x40>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10d      	bne.n	800101c <Rte_ReadDecryptedDataBuffer+0x30>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00a      	beq.n	800101c <Rte_ReadDecryptedDataBuffer+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <Rte_ReadDecryptedDataBuffer+0x40>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferPtr) = Global_DecryptedDataBufferPtr ; 
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <Rte_ReadDecryptedDataBuffer+0x44>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <Rte_ReadDecryptedDataBuffer+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e001      	b.n	8001020 <Rte_ReadDecryptedDataBuffer+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	200004dc 	.word	0x200004dc
 8001030:	200004d0 	.word	0x200004d0

08001034 <Rte_WriteDecryptedDataBufferFlag>:

/**************************************************************************/
/*                         Decrypted Data Buffer Flag Port                */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBufferFlag(FlagType Cpy_DecryptedDataBufferFlag)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
	
	if (Global_DecryptedDataBufferFlagState == IDLE)
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <Rte_WriteDecryptedDataBufferFlag+0x2a>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferFlag = Cpy_DecryptedDataBufferFlag ; 
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <Rte_WriteDecryptedDataBufferFlag+0x40>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e001      	b.n	8001062 <Rte_WriteDecryptedDataBufferFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200004dd 	.word	0x200004dd
 8001074:	200004d4 	.word	0x200004d4

08001078 <Rte_ReadDecryptedDataBufferFlag>:

Std_ReturnType Rte_ReadDecryptedDataBufferFlag(FlagType *Cpy_DecryptedDataBufferFlag)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferFlagState == IDLE) && (Cpy_DecryptedDataBufferFlag != NULL_PTR) )
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <Rte_ReadDecryptedDataBufferFlag+0x30>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <Rte_ReadDecryptedDataBufferFlag+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferFlag) = Global_DecryptedDataBufferFlag ; 
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <Rte_ReadDecryptedDataBufferFlag+0x44>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e001      	b.n	80010ac <Rte_ReadDecryptedDataBufferFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	200004dd 	.word	0x200004dd
 80010bc:	200004d4 	.word	0x200004d4

080010c0 <Rte_WriteSystemState>:

/**************************************************************************/
/*                         SystemState Port                               */
/**************************************************************************/
Std_ReturnType Rte_WriteSystemState(SystemStateType Cpy_SystemState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	
	if (Global_SystemStateMachineState == IDLE)
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <Rte_WriteSystemState+0x3c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <Rte_WriteSystemState+0x2a>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <Rte_WriteSystemState+0x3c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_SystemStateMachine = Cpy_SystemState ; 
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <Rte_WriteSystemState+0x40>)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Rte_WriteSystemState+0x3c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e001      	b.n	80010ee <Rte_WriteSystemState+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200004de 	.word	0x200004de
 8001100:	200004d5 	.word	0x200004d5

08001104 <Rte_ReadSystemState>:

Std_ReturnType Rte_ReadSystemState(SystemStateType *Cpy_SystemState)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_SystemStateMachineState == IDLE) && (Cpy_SystemState != NULL_PTR))
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <Rte_ReadSystemState+0x40>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10d      	bne.n	8001134 <Rte_ReadSystemState+0x30>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00a      	beq.n	8001134 <Rte_ReadSystemState+0x30>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <Rte_ReadSystemState+0x40>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_SystemState) = Global_SystemStateMachine ; 
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Rte_ReadSystemState+0x44>)
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <Rte_ReadSystemState+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e001      	b.n	8001138 <Rte_ReadSystemState+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	200004de 	.word	0x200004de
 8001148:	200004d5 	.word	0x200004d5

0800114c <Rte_WriteUserResponse>:

/**************************************************************************/
/*                         UserResponse Port                              */
/**************************************************************************/
Std_ReturnType Rte_WriteUserResponse(uint8_t Cpy_UserResponse)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UserResponsePortState == IDLE)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <Rte_WriteUserResponse+0x3c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <Rte_WriteUserResponse+0x2a>
	{
		/* Lock the port to write */
		Global_UserResponsePortState = BUSY ;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <Rte_WriteUserResponse+0x3c>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UserResponse = Cpy_UserResponse ; 
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <Rte_WriteUserResponse+0x40>)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UserResponsePortState = IDLE ;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <Rte_WriteUserResponse+0x3c>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e001      	b.n	800117a <Rte_WriteUserResponse+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200004df 	.word	0x200004df
 800118c:	200004d6 	.word	0x200004d6

08001190 <Rte_ReadUserResponse>:

Std_ReturnType Rte_ReadUserResponse(uint8_t *Cpy_UserResponse)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_UserResponsePortState == IDLE) && (Cpy_UserResponse != NULL_PTR) )
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <Rte_ReadUserResponse+0x40>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10d      	bne.n	80011c0 <Rte_ReadUserResponse+0x30>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <Rte_ReadUserResponse+0x30>
	{
		/* Lock the port to write */
		Global_UserResponsePortState = BUSY ;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Rte_ReadUserResponse+0x40>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_UserResponse) = Global_UserResponse ; 
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <Rte_ReadUserResponse+0x44>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_UserResponsePortState = IDLE ;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <Rte_ReadUserResponse+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e001      	b.n	80011c4 <Rte_ReadUserResponse+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200004df 	.word	0x200004df
 80011d4:	200004d6 	.word	0x200004d6

080011d8 <Rte_WriteUpdateProgress>:

/**************************************************************************/
/*                         Update Progress Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteUpdateProgress(uint8_t Cpy_UpdateProgress)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UpdateProgressPortState == IDLE)
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <Rte_WriteUpdateProgress+0x3c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <Rte_WriteUpdateProgress+0x2a>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <Rte_WriteUpdateProgress+0x3c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UpdateProgress = Cpy_UpdateProgress ; 
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <Rte_WriteUpdateProgress+0x40>)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <Rte_WriteUpdateProgress+0x3c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e001      	b.n	8001206 <Rte_WriteUpdateProgress+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200004e0 	.word	0x200004e0
 8001218:	200004d7 	.word	0x200004d7

0800121c <Rte_ReadUpdateProgress>:

Std_ReturnType Rte_ReadUpdateProgress(uint8_t *Cpy_UpdateProgress)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_UpdateProgressPortState == IDLE) && (Cpy_UpdateProgress != NULL_PTR) )
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <Rte_ReadUpdateProgress+0x40>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10d      	bne.n	800124c <Rte_ReadUpdateProgress+0x30>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <Rte_ReadUpdateProgress+0x30>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <Rte_ReadUpdateProgress+0x40>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_UpdateProgress) = Global_UpdateProgress ; 
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <Rte_ReadUpdateProgress+0x44>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <Rte_ReadUpdateProgress+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e001      	b.n	8001250 <Rte_ReadUpdateProgress+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	200004e0 	.word	0x200004e0
 8001260:	200004d7 	.word	0x200004d7

08001264 <SSD1306_Init>:

#define SSD1306_DEACTIVATE_SCROLL   0x2E // Stop scroll

#define SSD1306_NORMALDISPLAY       0xA6

uint8_t SSD1306_Init(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800126a:	f000 fa27 	bl	80016bc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800126e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001272:	2201      	movs	r2, #1
 8001274:	2178      	movs	r1, #120	; 0x78
 8001276:	485b      	ldr	r0, [pc, #364]	; (80013e4 <SSD1306_Init+0x180>)
 8001278:	f002 fecc 	bl	8004014 <HAL_I2C_IsDeviceReady>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001282:	2300      	movs	r3, #0
 8001284:	e0a9      	b.n	80013da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001286:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800128a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800128c:	e002      	b.n	8001294 <SSD1306_Init+0x30>
		p--;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3b01      	subs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800129a:	22ae      	movs	r2, #174	; 0xae
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	; 0x78
 80012a0:	f000 fa86 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	; 0x78
 80012aa:	f000 fa81 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012ae:	2210      	movs	r2, #16
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	; 0x78
 80012b4:	f000 fa7c 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012b8:	22b0      	movs	r2, #176	; 0xb0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	; 0x78
 80012be:	f000 fa77 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012c2:	22c8      	movs	r2, #200	; 0xc8
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	f000 fa72 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	; 0x78
 80012d2:	f000 fa6d 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012d6:	2210      	movs	r2, #16
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fa68 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 fa63 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012ea:	2281      	movs	r2, #129	; 0x81
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f000 fa5e 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	; 0x78
 80012fa:	f000 fa59 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012fe:	22a1      	movs	r2, #161	; 0xa1
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	; 0x78
 8001304:	f000 fa54 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001308:	22a6      	movs	r2, #166	; 0xa6
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 fa4f 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001312:	22a8      	movs	r2, #168	; 0xa8
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 fa4a 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800131c:	223f      	movs	r2, #63	; 0x3f
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 fa45 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001326:	22a4      	movs	r2, #164	; 0xa4
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	; 0x78
 800132c:	f000 fa40 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001330:	22d3      	movs	r2, #211	; 0xd3
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	; 0x78
 8001336:	f000 fa3b 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	; 0x78
 8001340:	f000 fa36 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001344:	22d5      	movs	r2, #213	; 0xd5
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	; 0x78
 800134a:	f000 fa31 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800134e:	22f0      	movs	r2, #240	; 0xf0
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fa2c 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001358:	22d9      	movs	r2, #217	; 0xd9
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	; 0x78
 800135e:	f000 fa27 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001362:	2222      	movs	r2, #34	; 0x22
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	; 0x78
 8001368:	f000 fa22 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800136c:	22da      	movs	r2, #218	; 0xda
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	; 0x78
 8001372:	f000 fa1d 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001376:	2212      	movs	r2, #18
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fa18 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001380:	22db      	movs	r2, #219	; 0xdb
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 fa13 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800138a:	2220      	movs	r2, #32
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	; 0x78
 8001390:	f000 fa0e 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001394:	228d      	movs	r2, #141	; 0x8d
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 fa09 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800139e:	2214      	movs	r2, #20
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	; 0x78
 80013a4:	f000 fa04 	bl	80017b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013a8:	22af      	movs	r2, #175	; 0xaf
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	; 0x78
 80013ae:	f000 f9ff 	bl	80017b0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013b2:	222e      	movs	r2, #46	; 0x2e
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	; 0x78
 80013b8:	f000 f9fa 	bl	80017b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f843 	bl	8001448 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013c2:	f000 f813 	bl	80013ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <SSD1306_Init+0x184>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SSD1306_Init+0x184>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SSD1306_Init+0x184>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000093c 	.word	0x2000093c
 80013e8:	200008e4 	.word	0x200008e4

080013ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e01d      	b.n	8001434 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	3b50      	subs	r3, #80	; 0x50
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	2078      	movs	r0, #120	; 0x78
 8001404:	f000 f9d4 	bl	80017b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2078      	movs	r0, #120	; 0x78
 800140e:	f000 f9cf 	bl	80017b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001412:	2210      	movs	r2, #16
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 f9ca 	bl	80017b0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	4a08      	ldr	r2, [pc, #32]	; (8001444 <SSD1306_UpdateScreen+0x58>)
 8001422:	441a      	add	r2, r3
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 f95b 	bl	80016e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3301      	adds	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b07      	cmp	r3, #7
 8001438:	d9de      	bls.n	80013f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200004e4 	.word	0x200004e4

08001448 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <SSD1306_Fill+0x14>
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <SSD1306_Fill+0x16>
 800145c:	23ff      	movs	r3, #255	; 0xff
 800145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001462:	4619      	mov	r1, r3
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <SSD1306_Fill+0x2c>)
 8001466:	f004 fc97 	bl	8005d98 <memset>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200004e4 	.word	0x200004e4

08001478 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
 8001482:	460b      	mov	r3, r1
 8001484:	80bb      	strh	r3, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	70fb      	strb	r3, [r7, #3]
	if (
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b7f      	cmp	r3, #127	; 0x7f
 800148e:	d848      	bhi.n	8001522 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	2b3f      	cmp	r3, #63	; 0x3f
 8001494:	d845      	bhi.n	8001522 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <SSD1306_DrawPixel+0xb4>)
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d11a      	bne.n	80014e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	b298      	uxth	r0, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	4413      	add	r3, r2
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <SSD1306_DrawPixel+0xb8>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b259      	sxtb	r1, r3
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	4603      	mov	r3, r0
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	4413      	add	r3, r2
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <SSD1306_DrawPixel+0xb8>)
 80014e4:	54d1      	strb	r1, [r2, r3]
 80014e6:	e01d      	b.n	8001524 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014e8:	88fa      	ldrh	r2, [r7, #6]
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	b298      	uxth	r0, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	01db      	lsls	r3, r3, #7
 80014f4:	4413      	add	r3, r2
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <SSD1306_DrawPixel+0xb8>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	b25b      	sxtb	r3, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4013      	ands	r3, r2
 8001510:	b259      	sxtb	r1, r3
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	4603      	mov	r3, r0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4413      	add	r3, r2
 800151a:	b2c9      	uxtb	r1, r1
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <SSD1306_DrawPixel+0xb8>)
 800151e:	54d1      	strb	r1, [r2, r3]
 8001520:	e000      	b.n	8001524 <SSD1306_DrawPixel+0xac>
		return;
 8001522:	bf00      	nop
	}
}
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	200008e4 	.word	0x200008e4
 8001530:	200004e4 	.word	0x200004e4

08001534 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	80fb      	strh	r3, [r7, #6]
 8001540:	4613      	mov	r3, r2
 8001542:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <SSD1306_GotoXY+0x28>)
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <SSD1306_GotoXY+0x28>)
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	8053      	strh	r3, [r2, #2]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200008e4 	.word	0x200008e4

08001560 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <SSD1306_Putc+0xfc>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
	if (
 800157c:	2b7f      	cmp	r3, #127	; 0x7f
 800157e:	dc07      	bgt.n	8001590 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <SSD1306_Putc+0xfc>)
 8001582:	885b      	ldrh	r3, [r3, #2]
 8001584:	461a      	mov	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800158c:	2b3f      	cmp	r3, #63	; 0x3f
 800158e:	dd01      	ble.n	8001594 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001590:	2300      	movs	r3, #0
 8001592:	e05e      	b.n	8001652 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e04b      	b.n	8001632 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	3b20      	subs	r3, #32
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	7849      	ldrb	r1, [r1, #1]
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	440b      	add	r3, r1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e030      	b.n	8001620 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d010      	beq.n	80015f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <SSD1306_Putc+0xfc>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b298      	uxth	r0, r3
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <SSD1306_Putc+0xfc>)
 80015dc:	885a      	ldrh	r2, [r3, #2]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff ff45 	bl	8001478 <SSD1306_DrawPixel>
 80015ee:	e014      	b.n	800161a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <SSD1306_Putc+0xfc>)
 80015f2:	881a      	ldrh	r2, [r3, #0]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b298      	uxth	r0, r3
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <SSD1306_Putc+0xfc>)
 80015fe:	885a      	ldrh	r2, [r3, #2]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b299      	uxth	r1, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	f7ff ff2f 	bl	8001478 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	3301      	adds	r3, #1
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4293      	cmp	r3, r2
 800162a:	d3c8      	bcc.n	80015be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	461a      	mov	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4293      	cmp	r3, r2
 800163c:	d3ad      	bcc.n	800159a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <SSD1306_Putc+0xfc>)
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	4413      	add	r3, r2
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SSD1306_Putc+0xfc>)
 800164e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001650:	79fb      	ldrb	r3, [r7, #7]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200008e4 	.word	0x200008e4

08001660 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800166e:	e012      	b.n	8001696 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff71 	bl	8001560 <SSD1306_Putc>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d002      	beq.n	8001690 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	e008      	b.n	80016a2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e8      	bne.n	8001670 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <SSD1306_Clear>:
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_Clear (void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff feca 	bl	8001448 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80016b4:	f7ff fe9a 	bl	80013ec <SSD1306_UpdateScreen>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <ssd1306_I2C_Init>:
//   | |   / /| |     
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void ssd1306_I2C_Init() {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <ssd1306_I2C_Init+0x24>)
 80016c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016c6:	e002      	b.n	80016ce <ssd1306_I2C_Init+0x12>
		p--;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	0003d090 	.word	0x0003d090

080016e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b0c7      	sub	sp, #284	; 0x11c
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4604      	mov	r4, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80016f2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80016f6:	600a      	str	r2, [r1, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016fe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001702:	4622      	mov	r2, r4
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800170e:	4602      	mov	r2, r0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800171a:	460a      	mov	r2, r1
 800171c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800171e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001726:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800172a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001738:	e015      	b.n	8001766 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800173a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800173e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001742:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	441a      	add	r2, r3
 800174a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800174e:	3301      	adds	r3, #1
 8001750:	7811      	ldrb	r1, [r2, #0]
 8001752:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001756:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800175a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800175c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001760:	3301      	adds	r3, #1
 8001762:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001766:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800176a:	b29b      	uxth	r3, r3
 800176c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001770:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001774:	8812      	ldrh	r2, [r2, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d8df      	bhi.n	800173a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800177a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800177e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b299      	uxth	r1, r3
 8001786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800178a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	f107 020c 	add.w	r2, r7, #12
 8001798:	200a      	movs	r0, #10
 800179a:	9000      	str	r0, [sp, #0]
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <ssd1306_I2C_WriteMulti+0xc8>)
 800179e:	f002 fb3b 	bl	8003e18 <HAL_I2C_Master_Transmit>
}
 80017a2:	bf00      	nop
 80017a4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	2000093c 	.word	0x2000093c

080017b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	460b      	mov	r3, r1
 80017bc:	71bb      	strb	r3, [r7, #6]
 80017be:	4613      	mov	r3, r2
 80017c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017c6:	797b      	ldrb	r3, [r7, #5]
 80017c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	b299      	uxth	r1, r3
 80017ce:	f107 020c 	add.w	r2, r7, #12
 80017d2:	230a      	movs	r3, #10
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2302      	movs	r3, #2
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <ssd1306_I2C_Write+0x38>)
 80017da:	f002 fb1d 	bl	8003e18 <HAL_I2C_Master_Transmit>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000093c 	.word	0x2000093c

080017ec <Transmit_InitializeModule>:
*******************************************************************************/

/*****************************Module Function Definitions.*********************/

Std_ReturnType Transmit_InitializeModule(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
   // Initalize static variable in this module
   Static_uint32CodeSize                       = INITIALIZE_WITH_ZERO;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <Transmit_InitializeModule+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                          = INITIALIZE_WITH_ZERO;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <Transmit_InitializeModule+0x5c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter                 = INITIALIZE_WITH_ZERO;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <Transmit_InitializeModule+0x60>)
 80017fe:	2200      	movs	r2, #0
 8001800:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets                = INITIALIZE_WITH_ZERO;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <Transmit_InitializeModule+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket          = INITIALIZE_WITH_ZERO;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <Transmit_InitializeModule+0x68>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
   Static_InstallPercentage					   = INITIALIZE_WITH_ZERO;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <Transmit_InitializeModule+0x6c>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
   Static_InstallUpdateProgeress			   = INITIALIZE_WITH_ZERO;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <Transmit_InitializeModule+0x70>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
   // Initialize current state variable
   Static_StateVariable                        = IDLE_STATE;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <Transmit_InitializeModule+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
   // Fill state array with function represent each state
   Static_ArrayOfStates[IDLE_STATE]            = Transmit_IdleState;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <Transmit_InitializeModule+0x78>)
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <Transmit_InitializeModule+0x7c>)
 8001826:	601a      	str	r2, [r3, #0]
   Static_ArrayOfStates[GET_TRANSMIT_HEADER]   = Transmit_GetTransmitHeader;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <Transmit_InitializeModule+0x78>)
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <Transmit_InitializeModule+0x80>)
 800182c:	605a      	str	r2, [r3, #4]
   Static_ArrayOfStates[CONSUME_TRANSMIT_DATA] = Transmit_ConsumeTransmitData;
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <Transmit_InitializeModule+0x78>)
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <Transmit_InitializeModule+0x84>)
 8001832:	609a      	str	r2, [r3, #8]
   Static_ArrayOfStates[FINISHING_STATE]       = Transmit_FinishingState;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <Transmit_InitializeModule+0x78>)
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <Transmit_InitializeModule+0x88>)
 8001838:	60da      	str	r2, [r3, #12]

   return E_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	200008ec 	.word	0x200008ec
 8001848:	200008f0 	.word	0x200008f0
 800184c:	200008f2 	.word	0x200008f2
 8001850:	200008f4 	.word	0x200008f4
 8001854:	200008f6 	.word	0x200008f6
 8001858:	200008f8 	.word	0x200008f8
 800185c:	200008fc 	.word	0x200008fc
 8001860:	200008fd 	.word	0x200008fd
 8001864:	20000900 	.word	0x20000900
 8001868:	080018ad 	.word	0x080018ad
 800186c:	080018f9 	.word	0x080018f9
 8001870:	080019b9 	.word	0x080019b9
 8001874:	08001b3d 	.word	0x08001b3d

08001878 <Transmit_MainFunction>:

Std_ReturnType Transmit_MainFunction(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
   Std_ReturnType       Local_ReturnStatus = E_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
   State_PtrToFunction  RunState;
   RunState           = Static_ArrayOfStates[Static_StateVariable];
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <Transmit_MainFunction+0x2c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <Transmit_MainFunction+0x30>)
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	603b      	str	r3, [r7, #0]
   Local_ReturnStatus = RunState(NULL_PTR);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2000      	movs	r0, #0
 8001894:	4798      	blx	r3
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
   return Local_ReturnStatus;
 800189a:	79fb      	ldrb	r3, [r7, #7]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200008fd 	.word	0x200008fd
 80018a8:	20000900 	.word	0x20000900

080018ac <Transmit_IdleState>:

/*****************************Private Functions' Definitions*******************************/

/*****************************Functions Represent states***********************************/
static Std_ReturnType Transmit_IdleState(void *Cpy_voidPtr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus       = E_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
   FlagType       Local_uint8HeaderFlagValue  = HEADER_NOT_SET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73bb      	strb	r3, [r7, #14]
   // Get Header Flag Value.
   Local_ReturnStatus = RTE_READ_HEADER_ACK_FLAG(&Local_uint8HeaderFlagValue);
 80018bc:	f107 030e 	add.w	r3, r7, #14
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb4b 	bl	8000f5c <Rte_ReadHeaderAckFlag>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
   if(E_OK == Local_ReturnStatus)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <Transmit_IdleState+0x38>
   {
      // Check The Header Flag Value
      if(HEADER_SET == Local_uint8HeaderFlagValue)
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d103      	bne.n	80018de <Transmit_IdleState+0x32>
      {
         // Go to Get and Transmit Header State.
         Static_StateVariable = GET_TRANSMIT_HEADER;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <Transmit_IdleState+0x48>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e004      	b.n	80018e8 <Transmit_IdleState+0x3c>
      }
      else
      {
         Local_ReturnStatus = HEADER_NOT_SET;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e001      	b.n	80018e8 <Transmit_IdleState+0x3c>
      }
   }
   else
   {
      Local_ReturnStatus = E_NOT_OK;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200008fd 	.word	0x200008fd

080018f8 <Transmit_GetTransmitHeader>:

static Std_ReturnType Transmit_GetTransmitHeader(void *Cpy_voidPtr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus                            = E_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t        Local_HeaderBuffer[HEADER_INFORMATION_SIZE]   = {INITIALIZE_WITH_ZERO};
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
   uint8_t        Local_uint8NodeId                           	= INITIALIZE_WITH_ZERO;
 800190e:	2300      	movs	r3, #0
 8001910:	76fb      	strb	r3, [r7, #27]
   uint32_t       Local_uint32CodeSize                       	= INITIALIZE_WITH_ZERO;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
   uint32_t       Local_uint32CrcValue                      	= INITIALIZE_WITH_ZERO;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
   uint8_t        Local_uint8ReceivedAck                        = INITIALIZE_WITH_ZERO;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
   // Consume Header Information.     
   Transmit_ConsumeHeader(&Local_uint8NodeId, &Local_uint32CodeSize, &Local_uint32CrcValue);
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	f107 0114 	add.w	r1, r7, #20
 8001926:	f107 031b 	add.w	r3, r7, #27
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f944 	bl	8001bb8 <Transmit_ConsumeHeader>
   // Save Size and Node Id.
   Transmit_SaveHeader(&Local_uint8NodeId, &Local_uint32CodeSize);
 8001930:	f107 0214 	add.w	r2, r7, #20
 8001934:	f107 031b 	add.w	r3, r7, #27
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f992 	bl	8001c64 <Transmit_SaveHeader>
   // Handle header information
   Transmit_HandleHeader(Local_uint32CodeSize, Local_uint32CrcValue, Local_HeaderBuffer);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	f107 021c 	add.w	r2, r7, #28
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f951 	bl	8001bf0 <Transmit_HandleHeader>
   /************************Sequence Between Gateway and Boot_loader********************/

   // Request Program control.
   CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_CONTROL_SESSION);
 800194e:	7efb      	ldrb	r3, [r7, #27]
 8001950:	2110      	movs	r1, #16
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe78 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe feeb 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACCEPT_UPGRADE_REQUEST == Local_uint8ReceivedAck)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b50      	cmp	r3, #80	; 0x50
 8001966:	d113      	bne.n	8001990 <Transmit_GetTransmitHeader+0x98>
   {
      // Request sending Header.
      CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_GWY_REQUEST_SENDING_HEADER);
 8001968:	7efb      	ldrb	r3, [r7, #27]
 800196a:	2134      	movs	r1, #52	; 0x34
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fe6b 	bl	8000648 <CAN_IF_Transmit_UDS_Request>

      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001972:	f107 030f 	add.w	r3, r7, #15
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fede 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

      if (UDS_MCU_ACCEPT_RECEIVING_HEADER == Local_uint8ReceivedAck)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b73      	cmp	r3, #115	; 0x73
 8001980:	d106      	bne.n	8001990 <Transmit_GetTransmitHeader+0x98>
      {
         // Sending header.
    	 CAN_IF_Trasmit_Data_Frame(Local_uint8NodeId, Local_HeaderBuffer, HEADER_INFORMATION_SIZE);
 8001982:	7efb      	ldrb	r3, [r7, #27]
 8001984:	f107 011c 	add.w	r1, r7, #28
 8001988:	2208      	movs	r2, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fe8e 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
   else
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001990:	f107 030f 	add.w	r3, r7, #15
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fecf 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED == Local_uint8ReceivedAck)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b74      	cmp	r3, #116	; 0x74
 800199e:	d102      	bne.n	80019a6 <Transmit_GetTransmitHeader+0xae>
   {
	   Static_StateVariable = CONSUME_TRANSMIT_DATA;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <Transmit_GetTransmitHeader+0xbc>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80019a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200008fd 	.word	0x200008fd

080019b8 <Transmit_ConsumeTransmitData>:

static Std_ReturnType Transmit_ConsumeTransmitData(void *Cpy_voidPtr)
{    
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
   FlagType         Local_uint8BufferFlagValue              = BUFFER_NOT_SET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
   uint8_t          *Local_uint8DataBuffer                  = NULL_PTR ;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
   uint8_t          Local_uint8ReceivedAck                  = INITIALIZE_WITH_ZERO;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

   // Calculate number of packets and number of bytes in the last packet.
   Static_uint16NumberOfPackets            = (Static_uint32CodeSize) / (DATA_BUFFER_SIZE);
 80019cc:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <Transmit_ConsumeTransmitData+0x160>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <Transmit_ConsumeTransmitData+0x164>)
 80019d6:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket      = (Static_uint32CodeSize) % (DATA_BUFFER_SIZE);
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <Transmit_ConsumeTransmitData+0x160>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <Transmit_ConsumeTransmitData+0x168>)
 80019e6:	701a      	strb	r2, [r3, #0]
   // Get Buffer Flag Value.
   RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Local_uint8BufferFlagValue);
 80019e8:	f107 0317 	add.w	r3, r7, #23
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb43 	bl	8001078 <Rte_ReadDecryptedDataBufferFlag>
   // Check The Buffer Flag Value
   if(BUFFER_SET == Local_uint8BufferFlagValue)
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f040 8089 	bne.w	8001b0c <Transmit_ConsumeTransmitData+0x154>
   {
      // Consume Data and Increase packet counter by 1
      RTE_READ_DECRYPTED_DATA_BUFFER(&Local_uint8DataBuffer);
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff faf4 	bl	8000fec <Rte_ReadDecryptedDataBuffer>
      // Request Sending line of code code.
      CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_REQUEST_SENDING_PACKET_OF_CODE);
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <Transmit_ConsumeTransmitData+0x16c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2136      	movs	r1, #54	; 0x36
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fe1c 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001a10:	f107 030f 	add.w	r3, r7, #15
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fe8f 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
      // Check The node ack
      if(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE == Local_uint8ReceivedAck)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b75      	cmp	r3, #117	; 0x75
 8001a1e:	d175      	bne.n	8001b0c <Transmit_ConsumeTransmitData+0x154>
      {
         // condition to know are we will send the last packet or ordinary packet.
         if(Static_uint16PacketsCounter < Static_uint16NumberOfPackets)
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <Transmit_ConsumeTransmitData+0x170>)
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <Transmit_ConsumeTransmitData+0x164>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d250      	bcs.n	8001ace <Transmit_ConsumeTransmitData+0x116>
         {
            // Sending 64 byte of DATA_BUFFER_SIZE
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, DATA_BUFFER_SIZE);
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <Transmit_ConsumeTransmitData+0x16c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	2208      	movs	r2, #8
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fe39 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
        	CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001a3a:	f107 030f 	add.w	r3, r7, #15
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fe7a 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b76      	cmp	r3, #118	; 0x76
 8001a48:	d160      	bne.n	8001b0c <Transmit_ConsumeTransmitData+0x154>
            {
               // Increase packet counter by 1
				Static_uint16PacketsCounter++;
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <Transmit_ConsumeTransmitData+0x170>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <Transmit_ConsumeTransmitData+0x170>)
 8001a54:	801a      	strh	r2, [r3, #0]
				if ((Static_uint16PacketsCounter == Static_uint16NumberOfPackets)
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <Transmit_ConsumeTransmitData+0x170>)
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <Transmit_ConsumeTransmitData+0x164>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d107      	bne.n	8001a72 <Transmit_ConsumeTransmitData+0xba>
					&& (Static_uint8NumOfBytesInLastPacket == ZERO_BYTE))
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <Transmit_ConsumeTransmitData+0x168>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <Transmit_ConsumeTransmitData+0xba>
				{
					Static_StateVariable = FINISHING_STATE;
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <Transmit_ConsumeTransmitData+0x174>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e005      	b.n	8001a7e <Transmit_ConsumeTransmitData+0xc6>
				}
				else
				{
					// Reset Buffer flag
					RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fade 	bl	8001034 <Rte_WriteDecryptedDataBufferFlag>
					// Change System State To De_crypt state.
					RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f7ff fb21 	bl	80010c0 <Rte_WriteSystemState>
				}
				Static_InstallPercentage = ((float)Static_uint16PacketsCounter /(float) Static_uint16NumberOfPackets) ;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <Transmit_ConsumeTransmitData+0x170>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fc18 	bl	80002b8 <__aeabi_ui2f>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <Transmit_ConsumeTransmitData+0x164>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fc12 	bl	80002b8 <__aeabi_ui2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4619      	mov	r1, r3
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7fe fd19 	bl	80004d0 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <Transmit_ConsumeTransmitData+0x178>)
 8001aa4:	601a      	str	r2, [r3, #0]
				Static_InstallUpdateProgeress = Static_InstallPercentage * 100 ;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <Transmit_ConsumeTransmitData+0x178>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <Transmit_ConsumeTransmitData+0x17c>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fc5b 	bl	8000368 <__aeabi_fmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fda7 	bl	8000608 <__aeabi_f2uiz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <Transmit_ConsumeTransmitData+0x180>)
 8001ac0:	701a      	strb	r2, [r3, #0]
				/* Write to RTE to Signal UserIntrface Module */
				RTE_WRITE_DOWNLOAD_PROGRESS (Static_InstallUpdateProgeress);
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <Transmit_ConsumeTransmitData+0x180>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fb86 	bl	80011d8 <Rte_WriteUpdateProgress>
 8001acc:	e01e      	b.n	8001b0c <Transmit_ConsumeTransmitData+0x154>
            else
            {
               //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
            }
         }
         else if (Static_uint8NumOfBytesInLastPacket != 0)
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <Transmit_ConsumeTransmitData+0x168>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01a      	beq.n	8001b0c <Transmit_ConsumeTransmitData+0x154>
         {
            // Sending the rest of data
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, Static_uint8NumOfBytesInLastPacket);
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <Transmit_ConsumeTransmitData+0x16c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	6939      	ldr	r1, [r7, #16]
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <Transmit_ConsumeTransmitData+0x168>)
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fde3 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
            CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001ae6:	f107 030f 	add.w	r3, r7, #15
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fe24 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b76      	cmp	r3, #118	; 0x76
 8001af4:	d10a      	bne.n	8001b0c <Transmit_ConsumeTransmitData+0x154>
            {
               // Go to Finish State.
               Static_StateVariable = FINISHING_STATE;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <Transmit_ConsumeTransmitData+0x174>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	701a      	strb	r2, [r3, #0]
               Static_InstallUpdateProgeress = 100;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <Transmit_ConsumeTransmitData+0x180>)
 8001afe:	2264      	movs	r2, #100	; 0x64
 8001b00:	701a      	strb	r2, [r3, #0]
               RTE_WRITE_DOWNLOAD_PROGRESS(Static_InstallUpdateProgeress);
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <Transmit_ConsumeTransmitData+0x180>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb66 	bl	80011d8 <Rte_WriteUpdateProgress>
         //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
      } 
   }  
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200008ec 	.word	0x200008ec
 8001b1c:	200008f4 	.word	0x200008f4
 8001b20:	200008f6 	.word	0x200008f6
 8001b24:	200008f0 	.word	0x200008f0
 8001b28:	200008f2 	.word	0x200008f2
 8001b2c:	200008fd 	.word	0x200008fd
 8001b30:	200008f8 	.word	0x200008f8
 8001b34:	42c80000 	.word	0x42c80000
 8001b38:	200008fc 	.word	0x200008fc

08001b3c <Transmit_FinishingState>:

static Std_ReturnType Transmit_FinishingState(void *Cpy_voidPtr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
   uint8_t Local_uint8_tReceivedAck = INITIALIZE_WITH_ZERO;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
   // Reset Buffer flag
   RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fa73 	bl	8001034 <Rte_WriteDecryptedDataBufferFlag>
   // Ack node of the end of code transmission
   CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <Transmit_FinishingState+0x64>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2137      	movs	r1, #55	; 0x37
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd77 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8_tReceivedAck);
 8001b5a:	f107 030f 	add.w	r3, r7, #15
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fdea 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
   if(UDS_MCU_ACKNOWLEDGE_RECEIVED_CODE == Local_uint8_tReceivedAck)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b77      	cmp	r3, #119	; 0x77
 8001b68:	d105      	bne.n	8001b76 <Transmit_FinishingState+0x3a>
   {
      // Go To Idle State Here
      Static_StateVariable = IDLE_STATE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <Transmit_FinishingState+0x68>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
      // Change System State To System Done Update
      RTE_WRITE_SYSTEM_STATE(SYS_DONE_UPDATE);
 8001b70:	2005      	movs	r0, #5
 8001b72:	f7ff faa5 	bl	80010c0 <Rte_WriteSystemState>
   }
	 	// Reinit variables 
   Static_uint32CodeSize              = INITIALIZE_WITH_ZERO;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <Transmit_FinishingState+0x6c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                 = INITIALIZE_WITH_ZERO;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <Transmit_FinishingState+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter        = INITIALIZE_WITH_ZERO;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <Transmit_FinishingState+0x70>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets       = INITIALIZE_WITH_ZERO;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <Transmit_FinishingState+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket = INITIALIZE_WITH_ZERO;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <Transmit_FinishingState+0x78>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200008f0 	.word	0x200008f0
 8001ba4:	200008fd 	.word	0x200008fd
 8001ba8:	200008ec 	.word	0x200008ec
 8001bac:	200008f2 	.word	0x200008f2
 8001bb0:	200008f4 	.word	0x200008f4
 8001bb4:	200008f6 	.word	0x200008f6

08001bb8 <Transmit_ConsumeHeader>:

/*******************************Auxiliary Private Function***************************/

static Std_ReturnType Transmit_ConsumeHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size,uint32_t *Cpy_Crc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
   Std_ReturnType Local_ReturnStatus = E_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
   // Consume Header Information.     
   Local_ReturnStatus                = RTE_READ_NODE_ID  (Cpy_NodeId);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff f919 	bl	8000e00 <Rte_ReadNodeId>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CODE_SIZE(Cpy_Size);
 8001bd2:	68b8      	ldr	r0, [r7, #8]
 8001bd4:	f7ff f958 	bl	8000e88 <Rte_ReadCodeSize>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CRC_VALUE(Cpy_Crc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff f977 	bl	8000ed0 <Rte_ReadCrc>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
   return Local_ReturnStatus;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <Transmit_HandleHeader>:

static Std_ReturnType Transmit_HandleHeader(uint32_t Cpy_Size,uint32_t Cpy_Crc,uint8_t *Cpy_PtrToBytes)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
   // Convert code size into bytes and store it in buffer.
   Cpy_PtrToBytes[FIRST_BYTE]   = (Cpy_Size & GET_BYTE);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SECOND_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0a1a      	lsrs	r2, r3, #8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[THIRD_BYTE]   = ((Cpy_Size >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0c1a      	lsrs	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3302      	adds	r3, #2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[FOURTH_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	0e1a      	lsrs	r2, r3, #24
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3303      	adds	r3, #3
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
   // Convert CRC Value into bytes and store it in buffer.
   Cpy_PtrToBytes[FIFTH_BYTE]   = (Cpy_Crc  & GET_BYTE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SIXTH_BYTE]   = ((Cpy_Crc  >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0a1a      	lsrs	r2, r3, #8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3305      	adds	r3, #5
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SEVENTH_BYTE] = ((Cpy_Crc  >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0c1a      	lsrs	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3306      	adds	r3, #6
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[EIGHTH_BYTE]  = ((Cpy_Crc  >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0e1a      	lsrs	r2, r3, #24
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3307      	adds	r3, #7
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
   return E_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <Transmit_SaveHeader>:

static Std_ReturnType Transmit_SaveHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
   // Store Node Id To Use It to determinr the node.
   Static_uint8NodeId    = *Cpy_NodeId;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <Transmit_SaveHeader+0x28>)
 8001c74:	701a      	strb	r2, [r3, #0]
   // Store Size To Use It to calculate number of packts.
   Static_uint32CodeSize = *Cpy_Size;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <Transmit_SaveHeader+0x2c>)
 8001c7c:	6013      	str	r3, [r2, #0]
   return E_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200008f0 	.word	0x200008f0
 8001c90:	200008ec 	.word	0x200008ec

08001c94 <UserInterface_InitializeModule>:
/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void UserInterface_InitializeModule(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	/* Init Variables */
	Global_UiInternalState = UI_IDLE ;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <UserInterface_InitializeModule+0x24>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
	Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <UserInterface_InitializeModule+0x28>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	Global_DownloadProgress = 0 ;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <UserInterface_InitializeModule+0x2c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
	/* Init Screan */
	SSD1306_Init(); // initialize the display
 8001caa:	f7ff fadb 	bl	8001264 <SSD1306_Init>
	Interface_IdleScreen();
 8001cae:	f000 f8af 	bl	8001e10 <Interface_IdleScreen>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000910 	.word	0x20000910
 8001cbc:	20000912 	.word	0x20000912
 8001cc0:	20000913 	.word	0x20000913

08001cc4 <UserInterface_MainFunction>:


void UserInterface_MainFunction (void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
	switch (Global_UiInternalState)
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	f200 808a 	bhi.w	8001de8 <UserInterface_MainFunction+0x124>
 8001cd4:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <UserInterface_MainFunction+0x18>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001cf9 	.word	0x08001cf9
 8001ce0:	08001d21 	.word	0x08001d21
 8001ce4:	08001d27 	.word	0x08001d27
 8001ce8:	08001d43 	.word	0x08001d43
 8001cec:	08001d65 	.word	0x08001d65
 8001cf0:	08001d97 	.word	0x08001d97
 8001cf4:	08001dc7 	.word	0x08001dc7
	{
		/*****************************UI_IDLE***********************************/
		case UI_IDLE :
		{
			Std_ReturnType Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8001cf8:	4842      	ldr	r0, [pc, #264]	; (8001e04 <UserInterface_MainFunction+0x140>)
 8001cfa:	f7ff fa03 	bl	8001104 <Rte_ReadSystemState>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	717b      	strb	r3, [r7, #5]
			if (E_OK == Local_Error)
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d171      	bne.n	8001dec <UserInterface_MainFunction+0x128>
			{
				if (SYS_NEW_UPDATE_REQ == Global_SystemState)
 8001d08:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <UserInterface_MainFunction+0x140>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d16d      	bne.n	8001dec <UserInterface_MainFunction+0x128>
				{
					/* Clear Screen first before writing*/
					Interface_CleanScrean();
 8001d10:	f000 f994 	bl	800203c <Interface_CleanScrean>
					/* Init Get Response scereen */
					Interface_GetResponseScreen();
 8001d14:	f000 f89e 	bl	8001e54 <Interface_GetResponseScreen>
					/* Change internal state */
					Global_UiInternalState = UI_GET_RESPONSE ;
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
			}
			else 
			{
				/* Error */
			}
			break;
 8001d1e:	e065      	b.n	8001dec <UserInterface_MainFunction+0x128>
		}
		
		/*****************************UI_GET_RESPONSE ***********************************/
		case UI_GET_RESPONSE :
		{
			Interface_ProcessButton();
 8001d20:	f000 f994 	bl	800204c <Interface_ProcessButton>
			break;
 8001d24:	e067      	b.n	8001df6 <UserInterface_MainFunction+0x132>
		
		/*****************************UI_ACCEPT_UPDATE***********************************/
		case UI_ACCEPT_UPDATE :
		{
			/* Clear Screan */
			Interface_CleanScrean();
 8001d26:	f000 f989 	bl	800203c <Interface_CleanScrean>
			/* Init Download Screen */
			Interface_DownloadingScreen();
 8001d2a:	f000 f8d3 	bl	8001ed4 <Interface_DownloadingScreen>
			
			/* Update user response */
			RTE_WRITE_USER_RESPONSE (ACCEPT_UPDATE);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff fa0c 	bl	800114c <Rte_WriteUserResponse>
			/* Update system state */
			RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff f9c3 	bl	80010c0 <Rte_WriteSystemState>
			
			/* Update Internal state */
			Global_UiInternalState = UI_DOWNLOADING ;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	701a      	strb	r2, [r3, #0]
			break;
 8001d40:	e059      	b.n	8001df6 <UserInterface_MainFunction+0x132>
		
		/*****************************UI_REJECT_UPDATE***********************************/
		case UI_REJECT_UPDATE :
		{
			/* Clear Screan */
			Interface_CleanScrean();
 8001d42:	f000 f97b 	bl	800203c <Interface_CleanScrean>
			
			/* Update user response */
			RTE_WRITE_USER_RESPONSE (REFUSE_UPDATE);
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff fa00 	bl	800114c <Rte_WriteUserResponse>
			/* Update system state */
			RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff f9b7 	bl	80010c0 <Rte_WriteSystemState>
			
			/* Reinit vaiables */
			Global_UiInternalState = UI_IDLE ;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <UserInterface_MainFunction+0x144>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
			Interface_IdleScreen();
 8001d5e:	f000 f857 	bl	8001e10 <Interface_IdleScreen>
			break;
 8001d62:	e048      	b.n	8001df6 <UserInterface_MainFunction+0x132>
		
		/*****************************UI_DOWNLOADING***********************************/
		case UI_DOWNLOADING : 
		{
			Std_ReturnType Local_Error ;
			Local_Error = RTE_READ_DOWNLOAD_PROGRESS(&Global_DownloadProgress);
 8001d64:	4829      	ldr	r0, [pc, #164]	; (8001e0c <UserInterface_MainFunction+0x148>)
 8001d66:	f7ff fa59 	bl	800121c <Rte_ReadUpdateProgress>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71bb      	strb	r3, [r7, #6]
			
			if (E_OK == Local_Error)
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d13d      	bne.n	8001df0 <UserInterface_MainFunction+0x12c>
			{
				Interface_UpdateDownloadingScreen(Global_DownloadProgress);
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <UserInterface_MainFunction+0x148>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f8df 	bl	8001f3c <Interface_UpdateDownloadingScreen>
				if (100 == Global_DownloadProgress)
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <UserInterface_MainFunction+0x148>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d134      	bne.n	8001df0 <UserInterface_MainFunction+0x12c>
				{
					/* Clear Screan */
					Interface_CleanScrean();
 8001d86:	f000 f959 	bl	800203c <Interface_CleanScrean>
					Interface_InstallScreen();
 8001d8a:	f000 f92d 	bl	8001fe8 <Interface_InstallScreen>
					/* Update internal state */
					Global_UiInternalState = UI_INSTALLING ;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001d90:	2205      	movs	r2, #5
 8001d92:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				
			}
			break;
 8001d94:	e02c      	b.n	8001df0 <UserInterface_MainFunction+0x12c>
		}
		
		/*****************************UI_INSTALLING***********************************/
		case UI_INSTALLING : 
		{
			Std_ReturnType Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8001d96:	481b      	ldr	r0, [pc, #108]	; (8001e04 <UserInterface_MainFunction+0x140>)
 8001d98:	f7ff f9b4 	bl	8001104 <Rte_ReadSystemState>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
			if (E_OK == Local_Error)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d126      	bne.n	8001df4 <UserInterface_MainFunction+0x130>
			{
				if (SYS_DONE_UPDATE == Global_SystemState)
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <UserInterface_MainFunction+0x140>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d122      	bne.n	8001df4 <UserInterface_MainFunction+0x130>
				{
					/* CleanScrean*/
					Interface_CleanScrean();
 8001dae:	f000 f945 	bl	800203c <Interface_CleanScrean>
					/* Update screan*/
					Interface_DoneScreen();
 8001db2:	f000 f8ef 	bl	8001f94 <Interface_DoneScreen>
					/* Wait for a time */
					HAL_Delay(2000);
 8001db6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dba:	f000 fd59 	bl	8002870 <HAL_Delay>
					/* Update internal state */
					Global_UiInternalState = UI_END_STATE ;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* Report error*/
			}
			break;
 8001dc4:	e016      	b.n	8001df4 <UserInterface_MainFunction+0x130>
		
		/*****************************UI_END_STATE***********************************/
		case UI_END_STATE : 
		{
			/* Reinit vaiables */
			Global_UiInternalState = UI_IDLE ;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <UserInterface_MainFunction+0x13c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
			Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <UserInterface_MainFunction+0x144>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
			Global_DownloadProgress = 0 ;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <UserInterface_MainFunction+0x148>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
			
			Interface_CleanScrean();
 8001dd8:	f000 f930 	bl	800203c <Interface_CleanScrean>
			/* Update screen */
			Interface_IdleScreen();
 8001ddc:	f000 f818 	bl	8001e10 <Interface_IdleScreen>
			
			/* Return system state to idle */
			RTE_WRITE_SYSTEM_STATE(SYS_IDLE);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff f96d 	bl	80010c0 <Rte_WriteSystemState>
			break;
 8001de6:	e006      	b.n	8001df6 <UserInterface_MainFunction+0x132>
		}
		/*****************************DEFUALT (ERROR)***********************************/
		default :
			/* Error */
			break ;
 8001de8:	bf00      	nop
 8001dea:	e004      	b.n	8001df6 <UserInterface_MainFunction+0x132>
			break;
 8001dec:	bf00      	nop
 8001dee:	e002      	b.n	8001df6 <UserInterface_MainFunction+0x132>
			break;
 8001df0:	bf00      	nop
 8001df2:	e000      	b.n	8001df6 <UserInterface_MainFunction+0x132>
			break;
 8001df4:	bf00      	nop
	}
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000910 	.word	0x20000910
 8001e04:	20000911 	.word	0x20000911
 8001e08:	20000912 	.word	0x20000912
 8001e0c:	20000913 	.word	0x20000913

08001e10 <Interface_IdleScreen>:

/**************************************************************************/
/*                        Private Functions                               */
/**************************************************************************/
static void Interface_IdleScreen (void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	/* Set Backgroun color */
	SSD1306_GotoXY (10,10); // goto 10, 10
 8001e14:	210a      	movs	r1, #10
 8001e16:	200a      	movs	r0, #10
 8001e18:	f7ff fb8c 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("FOTA SYSTEM", &Font_11x18, 1); // print Hello
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4909      	ldr	r1, [pc, #36]	; (8001e44 <Interface_IdleScreen+0x34>)
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <Interface_IdleScreen+0x38>)
 8001e22:	f7ff fc1d 	bl	8001660 <SSD1306_Puts>
    SSD1306_GotoXY (5, 30);
 8001e26:	211e      	movs	r1, #30
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f7ff fb83 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("Waiting Update!!", &Font_7x10, 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4906      	ldr	r1, [pc, #24]	; (8001e4c <Interface_IdleScreen+0x3c>)
 8001e32:	4807      	ldr	r0, [pc, #28]	; (8001e50 <Interface_IdleScreen+0x40>)
 8001e34:	f7ff fc14 	bl	8001660 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 8001e38:	f7ff fad8 	bl	80013ec <SSD1306_UpdateScreen>
	SSD1306_UpdateScreen(); //display
 8001e3c:	f7ff fad6 	bl	80013ec <SSD1306_UpdateScreen>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000008 	.word	0x20000008
 8001e48:	080066d4 	.word	0x080066d4
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	080066e0 	.word	0x080066e0

08001e54 <Interface_GetResponseScreen>:


static void Interface_GetResponseScreen (void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (20, 0);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2014      	movs	r0, #20
 8001e5c:	f7ff fb6a 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("New Update", &Font_7x10, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4916      	ldr	r1, [pc, #88]	; (8001ebc <Interface_GetResponseScreen+0x68>)
 8001e64:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <Interface_GetResponseScreen+0x6c>)
 8001e66:	f7ff fbfb 	bl	8001660 <SSD1306_Puts>
    SSD1306_GotoXY (20, 10);
 8001e6a:	210a      	movs	r1, #10
 8001e6c:	2014      	movs	r0, #20
 8001e6e:	f7ff fb61 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("Available", &Font_7x10, 1);
 8001e72:	2201      	movs	r2, #1
 8001e74:	4911      	ldr	r1, [pc, #68]	; (8001ebc <Interface_GetResponseScreen+0x68>)
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <Interface_GetResponseScreen+0x70>)
 8001e78:	f7ff fbf2 	bl	8001660 <SSD1306_Puts>
    SSD1306_GotoXY (30, 30);
 8001e7c:	211e      	movs	r1, #30
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f7ff fb58 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("Accept", &Font_7x10, 1);
 8001e84:	2201      	movs	r2, #1
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <Interface_GetResponseScreen+0x68>)
 8001e88:	480f      	ldr	r0, [pc, #60]	; (8001ec8 <Interface_GetResponseScreen+0x74>)
 8001e8a:	f7ff fbe9 	bl	8001660 <SSD1306_Puts>
    SSD1306_GotoXY (30, 40);
 8001e8e:	2128      	movs	r1, #40	; 0x28
 8001e90:	201e      	movs	r0, #30
 8001e92:	f7ff fb4f 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts ("Reject", &Font_7x10, 1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	4908      	ldr	r1, [pc, #32]	; (8001ebc <Interface_GetResponseScreen+0x68>)
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <Interface_GetResponseScreen+0x78>)
 8001e9c:	f7ff fbe0 	bl	8001660 <SSD1306_Puts>

    SSD1306_GotoXY (20, 30);
 8001ea0:	211e      	movs	r1, #30
 8001ea2:	2014      	movs	r0, #20
 8001ea4:	f7ff fb46 	bl	8001534 <SSD1306_GotoXY>
    SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4904      	ldr	r1, [pc, #16]	; (8001ebc <Interface_GetResponseScreen+0x68>)
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <Interface_GetResponseScreen+0x7c>)
 8001eae:	f7ff fbd7 	bl	8001660 <SSD1306_Puts>

    SSD1306_UpdateScreen(); //display
 8001eb2:	f7ff fa9b 	bl	80013ec <SSD1306_UpdateScreen>
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	080066f4 	.word	0x080066f4
 8001ec4:	08006700 	.word	0x08006700
 8001ec8:	0800670c 	.word	0x0800670c
 8001ecc:	08006714 	.word	0x08006714
 8001ed0:	0800671c 	.word	0x0800671c

08001ed4 <Interface_DownloadingScreen>:

static void Interface_DownloadingScreen (void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8001ed8:	210a      	movs	r1, #10
 8001eda:	2028      	movs	r0, #40	; 0x28
 8001edc:	f7ff fb2a 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("Download", &Font_7x10, 1);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4911      	ldr	r1, [pc, #68]	; (8001f28 <Interface_DownloadingScreen+0x54>)
 8001ee4:	4811      	ldr	r0, [pc, #68]	; (8001f2c <Interface_DownloadingScreen+0x58>)
 8001ee6:	f7ff fbbb 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 8001eea:	2114      	movs	r1, #20
 8001eec:	2028      	movs	r0, #40	; 0x28
 8001eee:	f7ff fb21 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("  in", &Font_7x10, 1);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <Interface_DownloadingScreen+0x54>)
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <Interface_DownloadingScreen+0x5c>)
 8001ef8:	f7ff fbb2 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8001efc:	211e      	movs	r1, #30
 8001efe:	2028      	movs	r0, #40	; 0x28
 8001f00:	f7ff fb18 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("Progress", &Font_7x10, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <Interface_DownloadingScreen+0x54>)
 8001f08:	480a      	ldr	r0, [pc, #40]	; (8001f34 <Interface_DownloadingScreen+0x60>)
 8001f0a:	f7ff fba9 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8001f0e:	2128      	movs	r1, #40	; 0x28
 8001f10:	2032      	movs	r0, #50	; 0x32
 8001f12:	f7ff fb0f 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("  0%", &Font_7x10, 1);
 8001f16:	2201      	movs	r2, #1
 8001f18:	4903      	ldr	r1, [pc, #12]	; (8001f28 <Interface_DownloadingScreen+0x54>)
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <Interface_DownloadingScreen+0x64>)
 8001f1c:	f7ff fba0 	bl	8001660 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f20:	f7ff fa64 	bl	80013ec <SSD1306_UpdateScreen>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	08006720 	.word	0x08006720
 8001f30:	0800672c 	.word	0x0800672c
 8001f34:	08006734 	.word	0x08006734
 8001f38:	08006740 	.word	0x08006740

08001f3c <Interface_UpdateDownloadingScreen>:

static void Interface_UpdateDownloadingScreen (uint8_t Cpy_Progress)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
	/**/
	char local_DateBuffer[4];
	/* Clear Current Progress Text */
	sprintf(local_DateBuffer, "%d", Cpy_Progress);
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <Interface_UpdateDownloadingScreen+0x4c>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 ff02 	bl	8005d58 <siprintf>
	SSD1306_GotoXY (50, 40);
 8001f54:	2128      	movs	r1, #40	; 0x28
 8001f56:	2032      	movs	r0, #50	; 0x32
 8001f58:	f7ff faec 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	490b      	ldr	r1, [pc, #44]	; (8001f8c <Interface_UpdateDownloadingScreen+0x50>)
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <Interface_UpdateDownloadingScreen+0x54>)
 8001f62:	f7ff fb7d 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8001f66:	2128      	movs	r1, #40	; 0x28
 8001f68:	2032      	movs	r0, #50	; 0x32
 8001f6a:	f7ff fae3 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts (local_DateBuffer, &Font_7x10, 1);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2201      	movs	r2, #1
 8001f74:	4905      	ldr	r1, [pc, #20]	; (8001f8c <Interface_UpdateDownloadingScreen+0x50>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fb72 	bl	8001660 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f7c:	f7ff fa36 	bl	80013ec <SSD1306_UpdateScreen>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08006748 	.word	0x08006748
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	0800674c 	.word	0x0800674c

08001f94 <Interface_DoneScreen>:

static void Interface_DoneScreen (void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8001f98:	210a      	movs	r1, #10
 8001f9a:	2028      	movs	r0, #40	; 0x28
 8001f9c:	f7ff faca 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("Download", &Font_7x10, 1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <Interface_DoneScreen+0x44>)
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <Interface_DoneScreen+0x48>)
 8001fa6:	f7ff fb5b 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (35, 20);
 8001faa:	2114      	movs	r1, #20
 8001fac:	2023      	movs	r0, #35	; 0x23
 8001fae:	f7ff fac1 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("Completed", &Font_7x10, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <Interface_DoneScreen+0x44>)
 8001fb6:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <Interface_DoneScreen+0x4c>)
 8001fb8:	f7ff fb52 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 8001fbc:	211e      	movs	r1, #30
 8001fbe:	2032      	movs	r0, #50	; 0x32
 8001fc0:	f7ff fab8 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts (" -_-  ", &Font_7x10, 1);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <Interface_DoneScreen+0x44>)
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <Interface_DoneScreen+0x50>)
 8001fca:	f7ff fb49 	bl	8001660 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001fce:	f7ff fa0d 	bl	80013ec <SSD1306_UpdateScreen>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	08006720 	.word	0x08006720
 8001fe0:	08006754 	.word	0x08006754
 8001fe4:	08006760 	.word	0x08006760

08001fe8 <Interface_InstallScreen>:

static void Interface_InstallScreen(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	/* Update Screan */
	SSD1306_GotoXY (40, 10);
 8001fec:	210a      	movs	r1, #10
 8001fee:	2028      	movs	r0, #40	; 0x28
 8001ff0:	f7ff faa0 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts ("Installing", &Font_7x10, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	490d      	ldr	r1, [pc, #52]	; (800202c <Interface_InstallScreen+0x44>)
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <Interface_InstallScreen+0x48>)
 8001ffa:	f7ff fb31 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 8001ffe:	2114      	movs	r1, #20
 8002000:	2028      	movs	r0, #40	; 0x28
 8002002:	f7ff fa97 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts (" Firmware", &Font_7x10, 1);
 8002006:	2201      	movs	r2, #1
 8002008:	4908      	ldr	r1, [pc, #32]	; (800202c <Interface_InstallScreen+0x44>)
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <Interface_InstallScreen+0x4c>)
 800200c:	f7ff fb28 	bl	8001660 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8002010:	211e      	movs	r1, #30
 8002012:	2028      	movs	r0, #40	; 0x28
 8002014:	f7ff fa8e 	bl	8001534 <SSD1306_GotoXY>
	SSD1306_Puts (" to MCU ", &Font_7x10, 1);
 8002018:	2201      	movs	r2, #1
 800201a:	4904      	ldr	r1, [pc, #16]	; (800202c <Interface_InstallScreen+0x44>)
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <Interface_InstallScreen+0x50>)
 800201e:	f7ff fb1f 	bl	8001660 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002022:	f7ff f9e3 	bl	80013ec <SSD1306_UpdateScreen>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000
 8002030:	08006768 	.word	0x08006768
 8002034:	08006774 	.word	0x08006774
 8002038:	08006780 	.word	0x08006780

0800203c <Interface_CleanScrean>:

static void Interface_CleanScrean(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002040:	f7ff fb33 	bl	80016aa <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8002044:	f7ff f9d2 	bl	80013ec <SSD1306_UpdateScreen>
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <Interface_ProcessButton>:

static void Interface_ProcessButton (void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	while(1)
	{
	  if(HAL_GPIO_ReadPin(SWITCH_BTN_GPIO_Port, SWITCH_BTN_Pin) ==  GPIO_PIN_RESET)
 8002050:	2102      	movs	r1, #2
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <Interface_ProcessButton+0xd0>)
 8002054:	f001 fd6c 	bl	8003b30 <HAL_GPIO_ReadPin>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d13a      	bne.n	80020d4 <Interface_ProcessButton+0x88>
	  {
		  while(HAL_GPIO_ReadPin(SWITCH_BTN_GPIO_Port, SWITCH_BTN_Pin) ==  GPIO_PIN_RESET);// Hold until button release
 800205e:	bf00      	nop
 8002060:	2102      	movs	r1, #2
 8002062:	482e      	ldr	r0, [pc, #184]	; (800211c <Interface_ProcessButton+0xd0>)
 8002064:	f001 fd64 	bl	8003b30 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f8      	beq.n	8002060 <Interface_ProcessButton+0x14>
		  if(Global_CursorState == UI_CURSOR_AT_ACCEPT)
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <Interface_ProcessButton+0xd4>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <Interface_ProcessButton+0x56>
		  {
			  SSD1306_GotoXY (20, 30);
 8002076:	211e      	movs	r1, #30
 8002078:	2014      	movs	r0, #20
 800207a:	f7ff fa5b 	bl	8001534 <SSD1306_GotoXY>
			  SSD1306_Puts (" ", &Font_7x10, 1);	//Cursor init point to Accept
 800207e:	2201      	movs	r2, #1
 8002080:	4928      	ldr	r1, [pc, #160]	; (8002124 <Interface_ProcessButton+0xd8>)
 8002082:	4829      	ldr	r0, [pc, #164]	; (8002128 <Interface_ProcessButton+0xdc>)
 8002084:	f7ff faec 	bl	8001660 <SSD1306_Puts>
			  SSD1306_GotoXY (20, 40);
 8002088:	2128      	movs	r1, #40	; 0x28
 800208a:	2014      	movs	r0, #20
 800208c:	f7ff fa52 	bl	8001534 <SSD1306_GotoXY>
			  SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 8002090:	2201      	movs	r2, #1
 8002092:	4924      	ldr	r1, [pc, #144]	; (8002124 <Interface_ProcessButton+0xd8>)
 8002094:	4825      	ldr	r0, [pc, #148]	; (800212c <Interface_ProcessButton+0xe0>)
 8002096:	f7ff fae3 	bl	8001660 <SSD1306_Puts>
			  Global_CursorState = UI_CURSOR_AT_REJECT;
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <Interface_ProcessButton+0xd4>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e018      	b.n	80020d4 <Interface_ProcessButton+0x88>
		  }
		  else if(Global_CursorState == UI_CURSOR_AT_REJECT)
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <Interface_ProcessButton+0xd4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d114      	bne.n	80020d4 <Interface_ProcessButton+0x88>
		  {
			  SSD1306_GotoXY (20, 30);
 80020aa:	211e      	movs	r1, #30
 80020ac:	2014      	movs	r0, #20
 80020ae:	f7ff fa41 	bl	8001534 <SSD1306_GotoXY>
			  SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 80020b2:	2201      	movs	r2, #1
 80020b4:	491b      	ldr	r1, [pc, #108]	; (8002124 <Interface_ProcessButton+0xd8>)
 80020b6:	481d      	ldr	r0, [pc, #116]	; (800212c <Interface_ProcessButton+0xe0>)
 80020b8:	f7ff fad2 	bl	8001660 <SSD1306_Puts>
			  SSD1306_GotoXY (20, 40);
 80020bc:	2128      	movs	r1, #40	; 0x28
 80020be:	2014      	movs	r0, #20
 80020c0:	f7ff fa38 	bl	8001534 <SSD1306_GotoXY>
			  SSD1306_Puts (" ", &Font_7x10, 1);	//Cursor init point to Accept
 80020c4:	2201      	movs	r2, #1
 80020c6:	4917      	ldr	r1, [pc, #92]	; (8002124 <Interface_ProcessButton+0xd8>)
 80020c8:	4817      	ldr	r0, [pc, #92]	; (8002128 <Interface_ProcessButton+0xdc>)
 80020ca:	f7ff fac9 	bl	8001660 <SSD1306_Puts>
			  Global_CursorState = UI_CURSOR_AT_ACCEPT;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <Interface_ProcessButton+0xd4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  //error
		  }
	  }
	  SSD1306_UpdateScreen(); //display
 80020d4:	f7ff f98a 	bl	80013ec <SSD1306_UpdateScreen>
	  HAL_Delay(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f000 fbc9 	bl	8002870 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(OK_BNT_GPIO_Port, OK_BNT_Pin) ==  GPIO_PIN_RESET)
 80020de:	2104      	movs	r1, #4
 80020e0:	480e      	ldr	r0, [pc, #56]	; (800211c <Interface_ProcessButton+0xd0>)
 80020e2:	f001 fd25 	bl	8003b30 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1b1      	bne.n	8002050 <Interface_ProcessButton+0x4>
	  {
		 while(HAL_GPIO_ReadPin(OK_BNT_GPIO_Port, OK_BNT_Pin) ==  GPIO_PIN_RESET);// Hold until button release
 80020ec:	bf00      	nop
 80020ee:	2104      	movs	r1, #4
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <Interface_ProcessButton+0xd0>)
 80020f2:	f001 fd1d 	bl	8003b30 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f8      	beq.n	80020ee <Interface_ProcessButton+0xa2>
		 switch (Global_CursorState)
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <Interface_ProcessButton+0xd4>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <Interface_ProcessButton+0xbe>
 8002104:	2b01      	cmp	r3, #1
 8002106:	d004      	beq.n	8002112 <Interface_ProcessButton+0xc6>
 8002108:	e007      	b.n	800211a <Interface_ProcessButton+0xce>
		 {
			case UI_CURSOR_AT_ACCEPT :
				/* Update System State */
				Global_UiInternalState = UI_ACCEPT_UPDATE ;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <Interface_ProcessButton+0xe4>)
 800210c:	2202      	movs	r2, #2
 800210e:	701a      	strb	r2, [r3, #0]
				break ;
 8002110:	e003      	b.n	800211a <Interface_ProcessButton+0xce>

			case UI_CURSOR_AT_REJECT :
				Global_UiInternalState = UI_REJECT_UPDATE ;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <Interface_ProcessButton+0xe4>)
 8002114:	2203      	movs	r2, #3
 8002116:	701a      	strb	r2, [r3, #0]
				break ;
 8002118:	bf00      	nop
	  if(HAL_GPIO_ReadPin(SWITCH_BTN_GPIO_Port, SWITCH_BTN_Pin) ==  GPIO_PIN_RESET)
 800211a:	e799      	b.n	8002050 <Interface_ProcessButton+0x4>
 800211c:	40010800 	.word	0x40010800
 8002120:	20000912 	.word	0x20000912
 8002124:	20000000 	.word	0x20000000
 8002128:	0800678c 	.word	0x0800678c
 800212c:	0800671c 	.word	0x0800671c
 8002130:	20000910 	.word	0x20000910

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213a:	f000 fb37 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213e:	f000 f82d 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002142:	f000 f923 	bl	800238c <MX_GPIO_Init>
  MX_CAN_Init();
 8002146:	f000 f86f 	bl	8002228 <MX_CAN_Init>
  MX_I2C1_Init();
 800214a:	f000 f8c7 	bl	80022dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800214e:	f000 f8f3 	bl	8002338 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8002152:	4811      	ldr	r0, [pc, #68]	; (8002198 <main+0x64>)
 8002154:	f000 fd74 	bl	8002c40 <HAL_CAN_Start>

  ReceiveUpdate_InitializeModule();
 8002158:	f7fe fbf0 	bl	800093c <ReceiveUpdate_InitializeModule>
  Transmit_InitializeModule();
 800215c:	f7ff fb46 	bl	80017ec <Transmit_InitializeModule>
  Decrypt_Address_Read_Init();
 8002160:	f7fe fb0c 	bl	800077c <Decrypt_Address_Read_Init>
  UserInterface_InitializeModule();
 8002164:	f7ff fd96 	bl	8001c94 <UserInterface_InitializeModule>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		RTE_READ_SYSTEM_STATE(&state);
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe ffca 	bl	8001104 <Rte_ReadSystemState>
		if (state == SYS_REC_UPDATE){
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d102      	bne.n	800217c <main+0x48>
			ReceiveUpdate_MainFunction();
 8002176:	f7fe fc29 	bl	80009cc <ReceiveUpdate_MainFunction>
 800217a:	e00a      	b.n	8002192 <main+0x5e>
		}
		else if (state == SYS_DECRYPT)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d102      	bne.n	8002188 <main+0x54>
		{
			Decrypt_MainFunction();
 8002182:	f7fe fb09 	bl	8000798 <Decrypt_MainFunction>
 8002186:	e004      	b.n	8002192 <main+0x5e>
		}
		else if (state == SYS_SEND_UPDATE)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d101      	bne.n	8002192 <main+0x5e>
		{
			Transmit_MainFunction();
 800218e:	f7ff fb73 	bl	8001878 <Transmit_MainFunction>
		}
		else
		{
			//do nothing
		}
		UserInterface_MainFunction();
 8002192:	f7ff fd97 	bl	8001cc4 <UserInterface_MainFunction>
		RTE_READ_SYSTEM_STATE(&state);
 8002196:	e7e7      	b.n	8002168 <main+0x34>
 8002198:	20000914 	.word	0x20000914

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b090      	sub	sp, #64	; 0x40
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fdf4 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d0:	2302      	movs	r3, #2
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fa9d 	bl	8004724 <HAL_RCC_OscConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021f0:	f000 f932 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f4:	230f      	movs	r3, #15
 80021f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f8:	2302      	movs	r3, #2
 80021fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fd0a 	bl	8004c28 <HAL_RCC_ClockConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800221a:	f000 f91d 	bl	8002458 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <MX_CAN_Init+0xa8>)
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <MX_CAN_Init+0xac>)
 8002230:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002234:	2204      	movs	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <MX_CAN_Init+0xa8>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002246:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800224a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_CAN_Init+0xa8>)
 800224e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002252:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002256:	2200      	movs	r2, #0
 8002258:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_CAN_Init+0xa8>)
 800225c:	2200      	movs	r2, #0
 800225e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002262:	2200      	movs	r2, #0
 8002264:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002268:	2200      	movs	r2, #0
 800226a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_CAN_Init+0xa8>)
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_CAN_Init+0xa8>)
 8002274:	2200      	movs	r2, #0
 8002276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002278:	4815      	ldr	r0, [pc, #84]	; (80022d0 <MX_CAN_Init+0xa8>)
 800227a:	f000 fb1d 	bl	80028b8 <HAL_CAN_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002284:	f000 f8e8 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //Initialize Variable for CAN
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_CAN_Init+0xb0>)
 800228a:	2201      	movs	r2, #1
 800228c:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_CAN_Init+0xb0>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_CAN_Init+0xb0>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_CAN_Init+0xb0>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022c0:	220a      	movs	r2, #10
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80022c4:	4904      	ldr	r1, [pc, #16]	; (80022d8 <MX_CAN_Init+0xb0>)
 80022c6:	4802      	ldr	r0, [pc, #8]	; (80022d0 <MX_CAN_Init+0xa8>)
 80022c8:	f000 fbf1 	bl	8002aae <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000914 	.word	0x20000914
 80022d4:	40006400 	.word	0x40006400
 80022d8:	200009d8 	.word	0x200009d8

080022dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <MX_I2C1_Init+0x50>)
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <MX_I2C1_Init+0x54>)
 80022e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <MX_I2C1_Init+0x50>)
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <MX_I2C1_Init+0x58>)
 80022ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <MX_I2C1_Init+0x50>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <MX_I2C1_Init+0x50>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <MX_I2C1_Init+0x50>)
 80022fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <MX_I2C1_Init+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <MX_I2C1_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <MX_I2C1_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <MX_I2C1_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <MX_I2C1_Init+0x50>)
 800231a:	f001 fc39 	bl	8003b90 <HAL_I2C_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002324:	f000 f898 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000093c 	.word	0x2000093c
 8002330:	40005400 	.word	0x40005400
 8002334:	00061a80 	.word	0x00061a80

08002338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART1_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002370:	f002 fde8 	bl	8004f44 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 f86d 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000990 	.word	0x20000990
 8002388:	40013800 	.word	0x40013800

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <MX_GPIO_Init+0xc0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a29      	ldr	r2, [pc, #164]	; (800244c <MX_GPIO_Init+0xc0>)
 80023a6:	f043 0310 	orr.w	r3, r3, #16
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <MX_GPIO_Init+0xc0>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <MX_GPIO_Init+0xc0>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a23      	ldr	r2, [pc, #140]	; (800244c <MX_GPIO_Init+0xc0>)
 80023be:	f043 0320 	orr.w	r3, r3, #32
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_GPIO_Init+0xc0>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <MX_GPIO_Init+0xc0>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <MX_GPIO_Init+0xc0>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <MX_GPIO_Init+0xc0>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <MX_GPIO_Init+0xc0>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <MX_GPIO_Init+0xc0>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <MX_GPIO_Init+0xc0>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002400:	2200      	movs	r2, #0
 8002402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002406:	4812      	ldr	r0, [pc, #72]	; (8002450 <MX_GPIO_Init+0xc4>)
 8002408:	f001 fba9 	bl	8003b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800240c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2302      	movs	r3, #2
 800241c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	4619      	mov	r1, r3
 8002424:	480a      	ldr	r0, [pc, #40]	; (8002450 <MX_GPIO_Init+0xc4>)
 8002426:	f001 f9ff 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_BTN_Pin OK_BNT_Pin */
  GPIO_InitStruct.Pin = SWITCH_BTN_Pin|OK_BNT_Pin;
 800242a:	2306      	movs	r3, #6
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_GPIO_Init+0xc8>)
 800243e:	f001 f9f3 	bl	8003828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002442:	bf00      	nop
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	40011000 	.word	0x40011000
 8002454:	40010800 	.word	0x40010800

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002460:	e7fe      	b.n	8002460 <Error_Handler+0x8>
	...

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_MspInit+0x5c>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_MspInit+0x5c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6193      	str	r3, [r2, #24]
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_MspInit+0x5c>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_MspInit+0x5c>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_MspInit+0x5c>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_MspInit+0x5c>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_MspInit+0x60>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_MspInit+0x60>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010000 	.word	0x40010000

080024c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_CAN_MspInit+0x8c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d131      	bne.n	800254c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_CAN_MspInit+0x90>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_CAN_MspInit+0x90>)
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	61d3      	str	r3, [r2, #28]
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_CAN_MspInit+0x90>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_CAN_MspInit+0x90>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <HAL_CAN_MspInit+0x90>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_CAN_MspInit+0x90>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800251c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4619      	mov	r1, r3
 800252c:	480b      	ldr	r0, [pc, #44]	; (800255c <HAL_CAN_MspInit+0x94>)
 800252e:	f001 f97b 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_CAN_MspInit+0x94>)
 8002548:	f001 f96e 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40006400 	.word	0x40006400
 8002558:	40021000 	.word	0x40021000
 800255c:	40010800 	.word	0x40010800

08002560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_I2C_MspInit+0x70>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d123      	bne.n	80025c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002598:	23c0      	movs	r3, #192	; 0xc0
 800259a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259c:	2312      	movs	r3, #18
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <HAL_I2C_MspInit+0x78>)
 80025ac:	f001 f93c 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 80025b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ba:	61d3      	str	r3, [r2, #28]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_I2C_MspInit+0x74>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40005400 	.word	0x40005400
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010c00 	.word	0x40010c00

080025dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a20      	ldr	r2, [pc, #128]	; (8002678 <HAL_UART_MspInit+0x9c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d139      	bne.n	8002670 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_UART_MspInit+0xa0>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <HAL_UART_MspInit+0xa0>)
 8002602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_UART_MspInit+0xa0>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_UART_MspInit+0xa0>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_UART_MspInit+0xa0>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_UART_MspInit+0xa0>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800262c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4619      	mov	r1, r3
 8002640:	480f      	ldr	r0, [pc, #60]	; (8002680 <HAL_UART_MspInit+0xa4>)
 8002642:	f001 f8f1 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	4809      	ldr	r0, [pc, #36]	; (8002680 <HAL_UART_MspInit+0xa4>)
 800265c:	f001 f8e4 	bl	8003828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	2025      	movs	r0, #37	; 0x25
 8002666:	f000 fdf6 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800266a:	2025      	movs	r0, #37	; 0x25
 800266c:	f000 fe0f 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	40010800 	.word	0x40010800

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <NMI_Handler+0x4>

0800268a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <MemManage_Handler+0x4>

08002696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ca:	f000 f8b5 	bl	8002838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <USART1_IRQHandler+0x10>)
 80026da:	f002 fdbd 	bl	8005258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000990 	.word	0x20000990

080026e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <_sbrk+0x5c>)
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <_sbrk+0x60>)
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002718:	f003 fb46 	bl	8005da8 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20005000 	.word	0x20005000
 8002748:	00000400 	.word	0x00000400
 800274c:	20000a48 	.word	0x20000a48
 8002750:	20000bb8 	.word	0x20000bb8

08002754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002760:	f7ff fff8 	bl	8002754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002766:	490c      	ldr	r1, [pc, #48]	; (8002798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <LoopFillZerobss+0x16>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800277c:	4c09      	ldr	r4, [pc, #36]	; (80027a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278a:	f003 fb13 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7ff fcd1 	bl	8002134 <main>
  bx lr
 8002792:	4770      	bx	lr
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800279c:	08007cc0 	.word	0x08007cc0
  ldr r2, =_sbss
 80027a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027a4:	20000bb8 	.word	0x20000bb8

080027a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_2_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_Init+0x28>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_Init+0x28>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 fd3f 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f000 f808 	bl	80027d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7ff fe4c 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x54>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_InitTick+0x58>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fd57 	bl	80032aa <HAL_SYSTICK_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00e      	b.n	8002824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d80a      	bhi.n	8002822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280c:	2200      	movs	r2, #0
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f000 fd1f 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_InitTick+0x5c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000010 	.word	0x20000010
 8002830:	20000018 	.word	0x20000018
 8002834:	20000014 	.word	0x20000014

08002838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x1c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_IncTick+0x20>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_IncTick+0x20>)
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000018 	.word	0x20000018
 8002858:	20000a4c 	.word	0x20000a4c

0800285c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <HAL_GetTick+0x10>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000a4c 	.word	0x20000a4c

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff fff0 	bl	800285c <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffe0 	bl	800285c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000018 	.word	0x20000018

080028b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0ed      	b.n	8002aa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fdf6 	bl	80024c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ec:	f7ff ffb6 	bl	800285c <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028f2:	e012      	b.n	800291a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f4:	f7ff ffb2 	bl	800285c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d90b      	bls.n	800291a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2205      	movs	r2, #5
 8002912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0c5      	b.n	8002aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0e5      	beq.n	80028f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0202 	bic.w	r2, r2, #2
 8002936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002938:	f7ff ff90 	bl	800285c <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800293e:	e012      	b.n	8002966 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002940:	f7ff ff8c 	bl	800285c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b0a      	cmp	r3, #10
 800294c:	d90b      	bls.n	8002966 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2205      	movs	r2, #5
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e09f      	b.n	8002aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e5      	bne.n	8002940 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d108      	bne.n	800298e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7e5b      	ldrb	r3, [r3, #25]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d108      	bne.n	80029b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e007      	b.n	80029c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e9b      	ldrb	r3, [r3, #26]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e007      	b.n	80029f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0220 	bic.w	r2, r2, #32
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7edb      	ldrb	r3, [r3, #27]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0210 	bic.w	r2, r2, #16
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0210 	orr.w	r2, r2, #16
 8002a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7f1b      	ldrb	r3, [r3, #28]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d108      	bne.n	8002a36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0208 	orr.w	r2, r2, #8
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e007      	b.n	8002a46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7f5b      	ldrb	r3, [r3, #29]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0204 	orr.w	r2, r2, #4
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e007      	b.n	8002a70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	ea42 0103 	orr.w	r1, r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d003      	beq.n	8002ad4 <HAL_CAN_ConfigFilter+0x26>
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	f040 80aa 	bne.w	8002c28 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2201      	movs	r2, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d123      	bne.n	8002b56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3248      	adds	r2, #72	; 0x48
 8002b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b4c:	6979      	ldr	r1, [r7, #20]
 8002b4e:	3348      	adds	r3, #72	; 0x48
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d122      	bne.n	8002ba4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3248      	adds	r2, #72	; 0x48
 8002b84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b9a:	6979      	ldr	r1, [r7, #20]
 8002b9c:	3348      	adds	r3, #72	; 0x48
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bbe:	e007      	b.n	8002bd0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bea:	e007      	b.n	8002bfc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e006      	b.n	8002c36 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d12e      	bne.n	8002cb2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7ff fdf6 	bl	800285c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c72:	e012      	b.n	8002c9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff fdf2 	bl	800285c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90b      	bls.n	8002c9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e012      	b.n	8002cc0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e006      	b.n	8002cc0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cdc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce6:	7ffb      	ldrb	r3, [r7, #31]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d003      	beq.n	8002cf4 <HAL_CAN_AddTxMessage+0x2c>
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	f040 80ad 	bne.w	8002e4e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8095 	beq.w	8002e3e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	0e1b      	lsrs	r3, r3, #24
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6809      	ldr	r1, [r1, #0]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3318      	adds	r3, #24
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	440b      	add	r3, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00f      	b.n	8002d6c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d56:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d60:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3318      	adds	r3, #24
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	440b      	add	r3, r1
 8002d6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3318      	adds	r3, #24
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	7d1b      	ldrb	r3, [r3, #20]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d111      	bne.n	8002dac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6811      	ldr	r1, [r2, #0]
 8002d9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3318      	adds	r3, #24
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	440b      	add	r3, r1
 8002da8:	3304      	adds	r3, #4
 8002daa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3307      	adds	r3, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	061a      	lsls	r2, r3, #24
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3306      	adds	r3, #6
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3305      	adds	r3, #5
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	3204      	adds	r2, #4
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	4610      	mov	r0, r2
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6811      	ldr	r1, [r2, #0]
 8002dd4:	ea43 0200 	orr.w	r2, r3, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002de2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3303      	adds	r3, #3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	061a      	lsls	r2, r3, #24
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3302      	adds	r3, #2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	4610      	mov	r0, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	ea43 0200 	orr.w	r2, r3, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3318      	adds	r3, #24
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	6811      	ldr	r1, [r2, #0]
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3318      	adds	r3, #24
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	440b      	add	r3, r1
 8002e38:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e00e      	b.n	8002e5c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e006      	b.n	8002e5c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3724      	adds	r7, #36	; 0x24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d003      	beq.n	8002e8a <HAL_CAN_GetRxMessage+0x24>
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f040 8103 	bne.w	8003090 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10e      	bne.n	8002eae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0f7      	b.n	800309e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0e8      	b.n	800309e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	331b      	adds	r3, #27
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0204 	and.w	r2, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	331b      	adds	r3, #27
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	4413      	add	r3, r2
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0d5b      	lsrs	r3, r3, #21
 8002efa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	4413      	add	r3, r2
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	08db      	lsrs	r3, r3, #3
 8002f14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	331b      	adds	r3, #27
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0202 	and.w	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	331b      	adds	r3, #27
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	e00b      	b.n	8002f6a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	331b      	adds	r3, #27
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	331b      	adds	r3, #27
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	331b      	adds	r3, #27
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0a1a      	lsrs	r2, r3, #8
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0c1a      	lsrs	r2, r3, #16
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	3302      	adds	r3, #2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e1a      	lsrs	r2, r3, #24
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4413      	add	r3, r2
 8003008:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3304      	adds	r3, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	4413      	add	r3, r2
 8003020:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0a1a      	lsrs	r2, r3, #8
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	3305      	adds	r3, #5
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4413      	add	r3, r2
 800303a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0c1a      	lsrs	r2, r3, #16
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	3306      	adds	r3, #6
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	4413      	add	r3, r2
 8003054:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e1a      	lsrs	r2, r3, #24
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	3307      	adds	r3, #7
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0220 	orr.w	r2, r2, #32
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	e007      	b.n	800308c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e006      	b.n	800309e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4906      	ldr	r1, [pc, #24]	; (8003140 <__NVIC_EnableIRQ+0x34>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	; (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff90 	bl	8003144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff2d 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff42 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff90 	bl	8003198 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5f 	bl	8003144 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff35 	bl	800310c <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d008      	beq.n	80032ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e020      	b.n	800332e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020e 	bic.w	r2, r2, #14
 80032fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d005      	beq.n	800335c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e051      	b.n	8003400 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020e 	bic.w	r2, r2, #14
 800336a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_DMA_Abort_IT+0xd4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d029      	beq.n	80033da <HAL_DMA_Abort_IT+0xa2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_DMA_Abort_IT+0xd8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_Abort_IT+0x9e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <HAL_DMA_Abort_IT+0xdc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01a      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x98>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_DMA_Abort_IT+0xe0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d012      	beq.n	80033ca <HAL_DMA_Abort_IT+0x92>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_DMA_Abort_IT+0xe4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00a      	beq.n	80033c4 <HAL_DMA_Abort_IT+0x8c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_DMA_Abort_IT+0xe8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d102      	bne.n	80033be <HAL_DMA_Abort_IT+0x86>
 80033b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033bc:	e00e      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c2:	e00b      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c8:	e008      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ce:	e005      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d4:	e002      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033d6:	2310      	movs	r3, #16
 80033d8:	e000      	b.n	80033dc <HAL_DMA_Abort_IT+0xa4>
 80033da:	2301      	movs	r3, #1
 80033dc:	4a11      	ldr	r2, [pc, #68]	; (8003424 <HAL_DMA_Abort_IT+0xec>)
 80033de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
    } 
  }
  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020008 	.word	0x40020008
 8003410:	4002001c 	.word	0x4002001c
 8003414:	40020030 	.word	0x40020030
 8003418:	40020044 	.word	0x40020044
 800341c:	40020058 	.word	0x40020058
 8003420:	4002006c 	.word	0x4002006c
 8003424:	40020000 	.word	0x40020000

08003428 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <HAL_FLASH_Program+0xd8>)
 8003444:	7e1b      	ldrb	r3, [r3, #24]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_FLASH_Program+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e054      	b.n	80034f8 <HAL_FLASH_Program+0xd0>
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <HAL_FLASH_Program+0xd8>)
 8003450:	2201      	movs	r2, #1
 8003452:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003458:	f000 f8a8 	bl	80035ac <FLASH_WaitForLastOperation>
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d144      	bne.n	80034f0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800346c:	2301      	movs	r3, #1
 800346e:	757b      	strb	r3, [r7, #21]
 8003470:	e007      	b.n	8003482 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d102      	bne.n	800347e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003478:	2302      	movs	r3, #2
 800347a:	757b      	strb	r3, [r7, #21]
 800347c:	e001      	b.n	8003482 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800347e:	2304      	movs	r3, #4
 8003480:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003482:	2300      	movs	r3, #0
 8003484:	75bb      	strb	r3, [r7, #22]
 8003486:	e02d      	b.n	80034e4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003488:	7dbb      	ldrb	r3, [r7, #22]
 800348a:	005a      	lsls	r2, r3, #1
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	eb02 0c03 	add.w	ip, r2, r3
 8003492:	7dbb      	ldrb	r3, [r7, #22]
 8003494:	0119      	lsls	r1, r3, #4
 8003496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800349a:	f1c1 0620 	rsb	r6, r1, #32
 800349e:	f1a1 0020 	sub.w	r0, r1, #32
 80034a2:	fa22 f401 	lsr.w	r4, r2, r1
 80034a6:	fa03 f606 	lsl.w	r6, r3, r6
 80034aa:	4334      	orrs	r4, r6
 80034ac:	fa23 f000 	lsr.w	r0, r3, r0
 80034b0:	4304      	orrs	r4, r0
 80034b2:	fa23 f501 	lsr.w	r5, r3, r1
 80034b6:	b2a3      	uxth	r3, r4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4660      	mov	r0, ip
 80034bc:	f000 f85a 	bl	8003574 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034c4:	f000 f872 	bl	80035ac <FLASH_WaitForLastOperation>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_FLASH_Program+0xdc>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_FLASH_Program+0xdc>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80034de:	7dbb      	ldrb	r3, [r7, #22]
 80034e0:	3301      	adds	r3, #1
 80034e2:	75bb      	strb	r3, [r7, #22]
 80034e4:	7dba      	ldrb	r2, [r7, #22]
 80034e6:	7d7b      	ldrb	r3, [r7, #21]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3cd      	bcc.n	8003488 <HAL_FLASH_Program+0x60>
 80034ec:	e000      	b.n	80034f0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80034ee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_FLASH_Program+0xd8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	761a      	strb	r2, [r3, #24]

  return status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	20000a50 	.word	0x20000a50
 8003504:	40022000 	.word	0x40022000

08003508 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_FLASH_Unlock+0x40>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_FLASH_Unlock+0x40>)
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_FLASH_Unlock+0x44>)
 8003522:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_FLASH_Unlock+0x40>)
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_FLASH_Unlock+0x48>)
 8003528:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_FLASH_Unlock+0x40>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800353a:	79fb      	ldrb	r3, [r7, #7]
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	45670123 	.word	0x45670123
 8003550:	cdef89ab 	.word	0xcdef89ab

08003554 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_FLASH_Lock+0x1c>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_FLASH_Lock+0x1c>)
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40022000 	.word	0x40022000

08003574 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <FLASH_Program_HalfWord+0x30>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <FLASH_Program_HalfWord+0x34>)
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <FLASH_Program_HalfWord+0x34>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	887a      	ldrh	r2, [r7, #2]
 8003596:	801a      	strh	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000a50 	.word	0x20000a50
 80035a8:	40022000 	.word	0x40022000

080035ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff f952 	bl	800285c <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035ba:	e010      	b.n	80035de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d00c      	beq.n	80035de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <FLASH_WaitForLastOperation+0x2e>
 80035ca:	f7ff f947 	bl	800285c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d201      	bcs.n	80035de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e025      	b.n	800362a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e8      	bne.n	80035bc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 80035f8:	2220      	movs	r2, #32
 80035fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <FLASH_WaitForLastOperation+0x88>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003620:	f000 f80a 	bl	8003638 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40022000 	.word	0x40022000

08003638 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003658:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f043 0310 	orr.w	r3, r3, #16
 8003660:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003678:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <FLASH_SetErrorCode+0x9c>)
 8003698:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f240 1201 	movw	r2, #257	; 0x101
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d106      	bne.n	80036be <FLASH_SetErrorCode+0x86>
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	61d3      	str	r3, [r2, #28]
}  
 80036bc:	e002      	b.n	80036c4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <FLASH_SetErrorCode+0x98>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60d3      	str	r3, [r2, #12]
}  
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40022000 	.word	0x40022000
 80036d4:	20000a50 	.word	0x20000a50

080036d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_FLASHEx_Erase+0xd0>)
 80036ec:	7e1b      	ldrb	r3, [r3, #24]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_FLASHEx_Erase+0x1e>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e053      	b.n	800379e <HAL_FLASHEx_Erase+0xc6>
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_FLASHEx_Erase+0xd0>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d116      	bne.n	8003732 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003704:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003708:	f7ff ff50 	bl	80035ac <FLASH_WaitForLastOperation>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d141      	bne.n	8003796 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003712:	2001      	movs	r0, #1
 8003714:	f000 f84c 	bl	80037b0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800371c:	f7ff ff46 	bl	80035ac <FLASH_WaitForLastOperation>
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_FLASHEx_Erase+0xd4>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_FLASHEx_Erase+0xd4>)
 800372a:	f023 0304 	bic.w	r3, r3, #4
 800372e:	6113      	str	r3, [r2, #16]
 8003730:	e031      	b.n	8003796 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003732:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003736:	f7ff ff39 	bl	80035ac <FLASH_WaitForLastOperation>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d12a      	bne.n	8003796 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	e019      	b.n	8003784 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003750:	68b8      	ldr	r0, [r7, #8]
 8003752:	f000 f849 	bl	80037e8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800375a:	f7ff ff27 	bl	80035ac <FLASH_WaitForLastOperation>
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_FLASHEx_Erase+0xd4>)
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_FLASHEx_Erase+0xd4>)
 8003768:	f023 0302 	bic.w	r3, r3, #2
 800376c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	601a      	str	r2, [r3, #0]
            break;
 800377a:	e00c      	b.n	8003796 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003782:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	029a      	lsls	r2, r3, #10
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4413      	add	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3dc      	bcc.n	8003750 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_FLASHEx_Erase+0xd0>)
 8003798:	2200      	movs	r2, #0
 800379a:	761a      	strb	r2, [r3, #24]

  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000a50 	.word	0x20000a50
 80037ac:	40022000 	.word	0x40022000

080037b0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <FLASH_MassErase+0x30>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <FLASH_MassErase+0x34>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <FLASH_MassErase+0x34>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <FLASH_MassErase+0x34>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <FLASH_MassErase+0x34>)
 80037d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000a50 	.word	0x20000a50
 80037e4:	40022000 	.word	0x40022000

080037e8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <FLASH_PageErase+0x38>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <FLASH_PageErase+0x3c>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <FLASH_PageErase+0x3c>)
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <FLASH_PageErase+0x3c>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <FLASH_PageErase+0x3c>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	4a05      	ldr	r2, [pc, #20]	; (8003824 <FLASH_PageErase+0x3c>)
 800380e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003812:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000a50 	.word	0x20000a50
 8003824:	40022000 	.word	0x40022000

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b08b      	sub	sp, #44	; 0x2c
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383a:	e169      	b.n	8003b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800383c:	2201      	movs	r2, #1
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 8158 	bne.w	8003b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a9a      	ldr	r2, [pc, #616]	; (8003ac8 <HAL_GPIO_Init+0x2a0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d05e      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
 8003864:	4a98      	ldr	r2, [pc, #608]	; (8003ac8 <HAL_GPIO_Init+0x2a0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d875      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 800386a:	4a98      	ldr	r2, [pc, #608]	; (8003acc <HAL_GPIO_Init+0x2a4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d058      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
 8003870:	4a96      	ldr	r2, [pc, #600]	; (8003acc <HAL_GPIO_Init+0x2a4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d86f      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 8003876:	4a96      	ldr	r2, [pc, #600]	; (8003ad0 <HAL_GPIO_Init+0x2a8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d052      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
 800387c:	4a94      	ldr	r2, [pc, #592]	; (8003ad0 <HAL_GPIO_Init+0x2a8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d869      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 8003882:	4a94      	ldr	r2, [pc, #592]	; (8003ad4 <HAL_GPIO_Init+0x2ac>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04c      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
 8003888:	4a92      	ldr	r2, [pc, #584]	; (8003ad4 <HAL_GPIO_Init+0x2ac>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d863      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 800388e:	4a92      	ldr	r2, [pc, #584]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d046      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
 8003894:	4a90      	ldr	r2, [pc, #576]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d85d      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 800389a:	2b12      	cmp	r3, #18
 800389c:	d82a      	bhi.n	80038f4 <HAL_GPIO_Init+0xcc>
 800389e:	2b12      	cmp	r3, #18
 80038a0:	d859      	bhi.n	8003956 <HAL_GPIO_Init+0x12e>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <HAL_GPIO_Init+0x80>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	08003923 	.word	0x08003923
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	0800390f 	.word	0x0800390f
 80038b4:	08003951 	.word	0x08003951
 80038b8:	08003957 	.word	0x08003957
 80038bc:	08003957 	.word	0x08003957
 80038c0:	08003957 	.word	0x08003957
 80038c4:	08003957 	.word	0x08003957
 80038c8:	08003957 	.word	0x08003957
 80038cc:	08003957 	.word	0x08003957
 80038d0:	08003957 	.word	0x08003957
 80038d4:	08003957 	.word	0x08003957
 80038d8:	08003957 	.word	0x08003957
 80038dc:	08003957 	.word	0x08003957
 80038e0:	08003957 	.word	0x08003957
 80038e4:	08003957 	.word	0x08003957
 80038e8:	08003957 	.word	0x08003957
 80038ec:	08003905 	.word	0x08003905
 80038f0:	08003919 	.word	0x08003919
 80038f4:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_GPIO_Init+0x2b4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038fa:	e02c      	b.n	8003956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	623b      	str	r3, [r7, #32]
          break;
 8003902:	e029      	b.n	8003958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	623b      	str	r3, [r7, #32]
          break;
 800390c:	e024      	b.n	8003958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	3308      	adds	r3, #8
 8003914:	623b      	str	r3, [r7, #32]
          break;
 8003916:	e01f      	b.n	8003958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	330c      	adds	r3, #12
 800391e:	623b      	str	r3, [r7, #32]
          break;
 8003920:	e01a      	b.n	8003958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800392a:	2304      	movs	r3, #4
 800392c:	623b      	str	r3, [r7, #32]
          break;
 800392e:	e013      	b.n	8003958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003938:	2308      	movs	r3, #8
 800393a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	611a      	str	r2, [r3, #16]
          break;
 8003942:	e009      	b.n	8003958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003944:	2308      	movs	r3, #8
 8003946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	615a      	str	r2, [r3, #20]
          break;
 800394e:	e003      	b.n	8003958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003950:	2300      	movs	r3, #0
 8003952:	623b      	str	r3, [r7, #32]
          break;
 8003954:	e000      	b.n	8003958 <HAL_GPIO_Init+0x130>
          break;
 8003956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2bff      	cmp	r3, #255	; 0xff
 800395c:	d801      	bhi.n	8003962 <HAL_GPIO_Init+0x13a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	e001      	b.n	8003966 <HAL_GPIO_Init+0x13e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2bff      	cmp	r3, #255	; 0xff
 800396c:	d802      	bhi.n	8003974 <HAL_GPIO_Init+0x14c>
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	e002      	b.n	800397a <HAL_GPIO_Init+0x152>
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	3b08      	subs	r3, #8
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	210f      	movs	r1, #15
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	431a      	orrs	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80b1 	beq.w	8003b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039a8:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <HAL_GPIO_Init+0x2b8>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4a4c      	ldr	r2, [pc, #304]	; (8003ae0 <HAL_GPIO_Init+0x2b8>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6193      	str	r3, [r2, #24]
 80039b4:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_GPIO_Init+0x2b8>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039c0:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <HAL_GPIO_Init+0x2bc>)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	3302      	adds	r3, #2
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	220f      	movs	r2, #15
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a40      	ldr	r2, [pc, #256]	; (8003ae8 <HAL_GPIO_Init+0x2c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_GPIO_Init+0x1ec>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_GPIO_Init+0x2c4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00d      	beq.n	8003a10 <HAL_GPIO_Init+0x1e8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <HAL_GPIO_Init+0x2c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <HAL_GPIO_Init+0x1e4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <HAL_GPIO_Init+0x2cc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_GPIO_Init+0x1e0>
 8003a04:	2303      	movs	r3, #3
 8003a06:	e006      	b.n	8003a16 <HAL_GPIO_Init+0x1ee>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	e004      	b.n	8003a16 <HAL_GPIO_Init+0x1ee>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e002      	b.n	8003a16 <HAL_GPIO_Init+0x1ee>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_GPIO_Init+0x1ee>
 8003a14:	2300      	movs	r3, #0
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	f002 0203 	and.w	r2, r2, #3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4093      	lsls	r3, r2
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a26:	492f      	ldr	r1, [pc, #188]	; (8003ae4 <HAL_GPIO_Init+0x2bc>)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	492c      	ldr	r1, [pc, #176]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a4e:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4928      	ldr	r1, [pc, #160]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	4922      	ldr	r1, [pc, #136]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60cb      	str	r3, [r1, #12]
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	491e      	ldr	r1, [pc, #120]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	4918      	ldr	r1, [pc, #96]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4914      	ldr	r1, [pc, #80]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d021      	beq.n	8003afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	490e      	ldr	r1, [pc, #56]	; (8003af8 <HAL_GPIO_Init+0x2d0>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	e021      	b.n	8003b0a <HAL_GPIO_Init+0x2e2>
 8003ac6:	bf00      	nop
 8003ac8:	10320000 	.word	0x10320000
 8003acc:	10310000 	.word	0x10310000
 8003ad0:	10220000 	.word	0x10220000
 8003ad4:	10210000 	.word	0x10210000
 8003ad8:	10120000 	.word	0x10120000
 8003adc:	10110000 	.word	0x10110000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010800 	.word	0x40010800
 8003aec:	40010c00 	.word	0x40010c00
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_GPIO_Init+0x304>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	4909      	ldr	r1, [pc, #36]	; (8003b2c <HAL_GPIO_Init+0x304>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f47f ae8e 	bne.w	800383c <HAL_GPIO_Init+0x14>
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	372c      	adds	r7, #44	; 0x2c
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e001      	b.n	8003b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	807b      	strh	r3, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b6e:	787b      	ldrb	r3, [r7, #1]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b74:	887a      	ldrh	r2, [r7, #2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b7a:	e003      	b.n	8003b84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	041a      	lsls	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e12b      	b.n	8003dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fe fcd2 	bl	8002560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f001 f960 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a81      	ldr	r2, [pc, #516]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d807      	bhi.n	8003c14 <HAL_I2C_Init+0x84>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_I2C_Init+0x278>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e006      	b.n	8003c22 <HAL_I2C_Init+0x92>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a7d      	ldr	r2, [pc, #500]	; (8003e0c <HAL_I2C_Init+0x27c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf94      	ite	ls
 8003c1c:	2301      	movls	r3, #1
 8003c1e:	2300      	movhi	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0e7      	b.n	8003dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a78      	ldr	r2, [pc, #480]	; (8003e10 <HAL_I2C_Init+0x280>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d802      	bhi.n	8003c64 <HAL_I2C_Init+0xd4>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	e009      	b.n	8003c78 <HAL_I2C_Init+0xe8>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a69      	ldr	r2, [pc, #420]	; (8003e14 <HAL_I2C_Init+0x284>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	495c      	ldr	r1, [pc, #368]	; (8003e04 <HAL_I2C_Init+0x274>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d819      	bhi.n	8003ccc <HAL_I2C_Init+0x13c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e59      	subs	r1, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cac:	400b      	ands	r3, r1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_I2C_Init+0x138>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e59      	subs	r1, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	e051      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	e04f      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d111      	bne.n	8003cf8 <HAL_I2C_Init+0x168>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e012      	b.n	8003d1e <HAL_I2C_Init+0x18e>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	0099      	lsls	r1, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Init+0x196>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e022      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <HAL_I2C_Init+0x1bc>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e58      	subs	r0, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Init+0x1dc>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	6809      	ldr	r1, [r1, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6911      	ldr	r1, [r2, #16]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	4311      	orrs	r1, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	000186a0 	.word	0x000186a0
 8003e08:	001e847f 	.word	0x001e847f
 8003e0c:	003d08ff 	.word	0x003d08ff
 8003e10:	431bde83 	.word	0x431bde83
 8003e14:	10624dd3 	.word	0x10624dd3

08003e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	460b      	mov	r3, r1
 8003e26:	817b      	strh	r3, [r7, #10]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7fe fd16 	bl	800285c <HAL_GetTick>
 8003e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	f040 80e0 	bne.w	8004000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2319      	movs	r3, #25
 8003e46:	2201      	movs	r2, #1
 8003e48:	4970      	ldr	r1, [pc, #448]	; (800400c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fa92 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0d3      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2C_Master_Transmit+0x50>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0cc      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d007      	beq.n	8003e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a50      	ldr	r2, [pc, #320]	; (8004010 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed0:	8979      	ldrh	r1, [r7, #10]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f9ca 	bl	8004270 <I2C_MasterRequestWrite>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e08d      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003efc:	e066      	b.n	8003fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb50 	bl	80045a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_I2C_Master_Transmit+0x188>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	6a39      	ldr	r1, [r7, #32]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fb47 	bl	8004638 <I2C_WaitOnBTFFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d107      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e01a      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d194      	bne.n	8003efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	00100002 	.word	0x00100002
 8004010:	ffff0000 	.word	0xffff0000

08004014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	460b      	mov	r3, r1
 8004022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7fe fc1a 	bl	800285c <HAL_GetTick>
 8004028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 8111 	bne.w	800425e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	4988      	ldr	r1, [pc, #544]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f994 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	e104      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_I2C_IsDeviceReady+0x50>
 8004060:	2302      	movs	r3, #2
 8004062:	e0fd      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d007      	beq.n	800408a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_I2C_IsDeviceReady+0x258>)
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f952 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e4:	d103      	bne.n	80040ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b6      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004102:	f7fe fbab 	bl	800285c <HAL_GetTick>
 8004106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004136:	e025      	b.n	8004184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fe fb90 	bl	800285c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <HAL_I2C_IsDeviceReady+0x13a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	22a0      	movs	r2, #160	; 0xa0
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2ba0      	cmp	r3, #160	; 0xa0
 800418e:	d005      	beq.n	800419c <HAL_I2C_IsDeviceReady+0x188>
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_I2C_IsDeviceReady+0x188>
 8004196:	7dbb      	ldrb	r3, [r7, #22]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0cd      	beq.n	8004138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d129      	bne.n	8004206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	4921      	ldr	r1, [pc, #132]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f8c6 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e036      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e02c      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800421e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2319      	movs	r3, #25
 8004226:	2201      	movs	r2, #1
 8004228:	490f      	ldr	r1, [pc, #60]	; (8004268 <HAL_I2C_IsDeviceReady+0x254>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8a2 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e012      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3301      	adds	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	f4ff af32 	bcc.w	80040ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d006      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d003      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00b      	b.n	80042c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b12      	cmp	r3, #18
 80042b2:	d107      	bne.n	80042c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f84f 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ea:	d103      	bne.n	80042f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e035      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d108      	bne.n	8004314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004310:	611a      	str	r2, [r3, #16]
 8004312:	e01b      	b.n	800434c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	11db      	asrs	r3, r3, #7
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f063 030f 	orn	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <I2C_MasterRequestWrite+0xfc>)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f898 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e010      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <I2C_MasterRequestWrite+0x100>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f888 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010008 	.word	0x00010008
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	e048      	b.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d044      	beq.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fa65 	bl	800285c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d139      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	e00c      	b.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d116      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e023      	b.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10d      	bne.n	800443e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	e00c      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d093      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004476:	e071      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d123      	bne.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e067      	b.n	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d041      	beq.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fe f9c0 	bl	800285c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d136      	bne.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10c      	bne.n	8004512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e00b      	b.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	43da      	mvns	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e021      	b.n	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10c      	bne.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e00b      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f af6d 	bne.w	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b4:	e034      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f886 	bl	80046c8 <I2C_IsAcknowledgeFailed>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e034      	b.n	8004630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d028      	beq.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fe f945 	bl	800285c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d016      	beq.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d1c3      	bne.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004644:	e034      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f83e 	bl	80046c8 <I2C_IsAcknowledgeFailed>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e034      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d028      	beq.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe f8fd 	bl	800285c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11d      	bne.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d016      	beq.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d1c3      	bne.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d11b      	bne.n	8004718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e272      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8087 	beq.w	8004852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b04      	cmp	r3, #4
 800474e:	d00c      	beq.n	800476a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004750:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d112      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
 800475c:	4b8c      	ldr	r3, [pc, #560]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d10b      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476a:	4b89      	ldr	r3, [pc, #548]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06c      	beq.n	8004850 <HAL_RCC_OscConfig+0x12c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d168      	bne.n	8004850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e24c      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x76>
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a7f      	ldr	r2, [pc, #508]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e02e      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x98>
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7a      	ldr	r2, [pc, #488]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b78      	ldr	r3, [pc, #480]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a77      	ldr	r2, [pc, #476]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0xbc>
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a71      	ldr	r2, [pc, #452]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047e0:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6a      	ldr	r2, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fe f82c 	bl	800285c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fe f828 	bl	800285c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e200      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b5d      	ldr	r3, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xe4>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fe f818 	bl	800285c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fe f814 	bl	800285c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1ec      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x10c>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d063      	beq.n	8004926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485e:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e1c0      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4939      	ldr	r1, [pc, #228]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	e03a      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fd ffcd 	bl	800285c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fd ffc9 	bl	800285c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1a1      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4927      	ldr	r1, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd ffac 	bl	800285c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004908:	f7fd ffa8 	bl	800285c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e180      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03a      	beq.n	80049a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7fd ff8c 	bl	800285c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7fd ff88 	bl	800285c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e160      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004966:	2001      	movs	r0, #1
 8004968:	f000 face 	bl	8004f08 <RCC_Delay>
 800496c:	e01c      	b.n	80049a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fd ff72 	bl	800285c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e00f      	b.n	800499c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fd ff6e 	bl	800285c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d908      	bls.n	800499c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e146      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	42420000 	.word	0x42420000
 8004998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b92      	ldr	r3, [pc, #584]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e9      	bne.n	800497c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a6 	beq.w	8004b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b8b      	ldr	r3, [pc, #556]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4a87      	ldr	r2, [pc, #540]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	61d3      	str	r3, [r2, #28]
 80049d2:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b82      	ldr	r3, [pc, #520]	; (8004bec <HAL_RCC_OscConfig+0x4c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d118      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b7f      	ldr	r3, [pc, #508]	; (8004bec <HAL_RCC_OscConfig+0x4c8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7e      	ldr	r2, [pc, #504]	; (8004bec <HAL_RCC_OscConfig+0x4c8>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fd ff2f 	bl	800285c <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7fd ff2b 	bl	800285c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e103      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b75      	ldr	r3, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x4c8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x312>
 8004a28:	4b6f      	ldr	r3, [pc, #444]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4a6e      	ldr	r2, [pc, #440]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6213      	str	r3, [r2, #32]
 8004a34:	e02d      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x334>
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a69      	ldr	r2, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6213      	str	r3, [r2, #32]
 8004a4a:	4b67      	ldr	r3, [pc, #412]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a66      	ldr	r2, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	e01c      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x356>
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4a60      	ldr	r2, [pc, #384]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	e00b      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a5a      	ldr	r2, [pc, #360]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a57      	ldr	r2, [pc, #348]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fedf 	bl	800285c <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd fedb 	bl	800285c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e0b1      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	4b4b      	ldr	r3, [pc, #300]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ee      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x37e>
 8004ac4:	e014      	b.n	8004af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fec9 	bl	800285c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd fec5 	bl	800285c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e09b      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ee      	bne.n	8004ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4b3c      	ldr	r3, [pc, #240]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8087 	beq.w	8004c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d061      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d146      	bne.n	8004bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b20:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fd fe99 	bl	800285c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fd fe95 	bl	800285c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e06d      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b40:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4921      	ldr	r1, [pc, #132]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b68:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a19      	ldr	r1, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	491b      	ldr	r1, [pc, #108]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fd fe69 	bl	800285c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fd fe65 	bl	800285c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e03d      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x46a>
 8004bac:	e035      	b.n	8004c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fe52 	bl	800285c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd fe4e 	bl	800285c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e026      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x498>
 8004bda:	e01e      	b.n	8004c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e019      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_OscConfig+0x500>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000

08004c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0d0      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d910      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b67      	ldr	r3, [pc, #412]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4965      	ldr	r1, [pc, #404]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0b8      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4a58      	ldr	r2, [pc, #352]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c9c:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	494d      	ldr	r1, [pc, #308]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d040      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d115      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e07f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e073      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e06b      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d06:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f023 0203 	bic.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4936      	ldr	r1, [pc, #216]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d18:	f7fd fda0 	bl	800285c <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fd fd9c 	bl	800285c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e053      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 020c 	and.w	r2, r3, #12
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d1eb      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d210      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0207 	bic.w	r2, r3, #7
 8004d5e:	4922      	ldr	r1, [pc, #136]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e032      	b.n	8004dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4916      	ldr	r1, [pc, #88]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	490e      	ldr	r1, [pc, #56]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db6:	f000 f821 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490a      	ldr	r1, [pc, #40]	; (8004df0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x1d0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fcfe 	bl	80027d8 <HAL_InitTick>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40021000 	.word	0x40021000
 8004df0:	08007c58 	.word	0x08007c58
 8004df4:	20000010 	.word	0x20000010
 8004df8:	20000014 	.word	0x20000014

08004dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d002      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x30>
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x36>
 8004e2a:	e027      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2e:	613b      	str	r3, [r7, #16]
      break;
 8004e30:	e027      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0c9b      	lsrs	r3, r3, #18
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0c5b      	lsrs	r3, r3, #17
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a0d      	ldr	r2, [pc, #52]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e5e:	fb03 f202 	mul.w	r2, r3, r2
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e004      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	613b      	str	r3, [r7, #16]
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e7e:	613b      	str	r3, [r7, #16]
      break;
 8004e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e82:	693b      	ldr	r3, [r7, #16]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	007a1200 	.word	0x007a1200
 8004e98:	08007c70 	.word	0x08007c70
 8004e9c:	08007c80 	.word	0x08007c80
 8004ea0:	003d0900 	.word	0x003d0900

08004ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea8:	4b02      	ldr	r3, [pc, #8]	; (8004eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	20000010 	.word	0x20000010

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	f7ff fff2 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	08007c68 	.word	0x08007c68

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ee4:	f7ff ffde 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	0adb      	lsrs	r3, r3, #11
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08007c68 	.word	0x08007c68

08004f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <RCC_Delay+0x34>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <RCC_Delay+0x38>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0a5b      	lsrs	r3, r3, #9
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f24:	bf00      	nop
  }
  while (Delay --);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1e5a      	subs	r2, r3, #1
 8004f2a:	60fa      	str	r2, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f9      	bne.n	8004f24 <RCC_Delay+0x1c>
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000010 	.word	0x20000010
 8004f40:	10624dd3 	.word	0x10624dd3

08004f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e042      	b.n	8004fdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd fb36 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fe57 	bl	8005c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b20      	cmp	r3, #32
 8005002:	d16d      	bne.n	80050e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_UART_Transmit+0x2c>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e066      	b.n	80050e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005022:	f7fd fc1b 	bl	800285c <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005058:	e02a      	b.n	80050b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fba6 	bl	80057b6 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e036      	b.n	80050e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	3302      	adds	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e007      	b.n	80050a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1cf      	bne.n	800505a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fb76 	bl	80057b6 <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e006      	b.n	80050e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08a      	sub	sp, #40	; 0x28
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	d17c      	bne.n	8005204 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Receive+0x2c>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e075      	b.n	8005206 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2222      	movs	r2, #34	; 0x22
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800512e:	f7fd fb95 	bl	800285c <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005148:	d108      	bne.n	800515c <HAL_UART_Receive+0x72>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e003      	b.n	8005164 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005164:	e043      	b.n	80051ee <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	2120      	movs	r1, #32
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fb20 	bl	80057b6 <UART_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e042      	b.n	8005206 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	b29a      	uxth	r2, r3
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3302      	adds	r3, #2
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e01f      	b.n	80051e0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d007      	beq.n	80051ba <HAL_UART_Receive+0xd0>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_UART_Receive+0xde>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e008      	b.n	80051da <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1b6      	bne.n	8005166 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b20      	cmp	r3, #32
 8005226:	d112      	bne.n	800524e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_UART_Receive_IT+0x26>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e00b      	b.n	8005250 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	461a      	mov	r2, r3
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fb24 	bl	8005892 <UART_Start_Receive_IT>
 800524a:	4603      	mov	r3, r0
 800524c:	e000      	b.n	8005250 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b0ba      	sub	sp, #232	; 0xe8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10f      	bne.n	80052be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
 80052aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc01 	bl	8005abe <UART_Receive_IT>
      return;
 80052bc:	e25b      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80de 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
 80052c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80d1 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
 8005312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f043 0202 	orr.w	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d105      	bne.n	8005372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 81f2 	beq.w	800576c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb8c 	bl	8005abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <HAL_UART_IRQHandler+0x17a>
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04f      	beq.n	8005472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa96 	bl	8005904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d041      	beq.n	800546a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800541e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800542a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d9      	bne.n	80053e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d013      	beq.n	8005462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	4a7e      	ldr	r2, [pc, #504]	; (8005638 <HAL_UART_IRQHandler+0x3e0>)
 8005440:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd ff76 	bl	8003338 <HAL_DMA_Abort_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005460:	e00e      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f993 	bl	800578e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	e00a      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f98f 	bl	800578e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	e006      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f98b 	bl	800578e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800547e:	e175      	b.n	800576c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	bf00      	nop
    return;
 8005482:	e173      	b.n	800576c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 814f 	bne.w	800572c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8148 	beq.w	800572c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8141 	beq.w	800572c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80b6 	beq.w	800563c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8145 	beq.w	8005770 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ee:	429a      	cmp	r2, r3
 80054f0:	f080 813e 	bcs.w	8005770 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b20      	cmp	r3, #32
 8005504:	f000 8088 	beq.w	8005618 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800551e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005534:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005540:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800554c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1d9      	bne.n	8005508 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005578:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800557c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005580:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800558a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e1      	bne.n	8005554 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e3      	bne.n	8005590 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80055fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd fe55 	bl	80032c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005626:	b29b      	uxth	r3, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8b6 	bl	80057a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005634:	e09c      	b.n	8005770 <HAL_UART_IRQHandler+0x518>
 8005636:	bf00      	nop
 8005638:	080059c9 	.word	0x080059c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005644:	b29b      	uxth	r3, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 808e 	beq.w	8005774 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8089 	beq.w	8005774 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005686:	647a      	str	r2, [r7, #68]	; 0x44
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e3      	bne.n	8005662 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	623b      	str	r3, [r7, #32]
   return(result);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056be:	633a      	str	r2, [r7, #48]	; 0x30
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e3      	bne.n	800569a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0310 	bic.w	r3, r3, #16
 80056f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	617b      	str	r3, [r7, #20]
   return(result);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e3      	bne.n	80056e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800571e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f83b 	bl	80057a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572a:	e023      	b.n	8005774 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_UART_IRQHandler+0x4f4>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f953 	bl	80059f0 <UART_Transmit_IT>
    return;
 800574a:	e014      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <HAL_UART_IRQHandler+0x51e>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f992 	bl	8005a8e <UART_EndTransmit_IT>
    return;
 800576a:	e004      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
    return;
 800576c:	bf00      	nop
 800576e:	e002      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
      return;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <HAL_UART_IRQHandler+0x51e>
      return;
 8005774:	bf00      	nop
  }
}
 8005776:	37e8      	adds	r7, #232	; 0xe8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b090      	sub	sp, #64	; 0x40
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c6:	e050      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d04c      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d6:	f7fd f841 	bl	800285c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d241      	bcs.n	800586a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005806:	637a      	str	r2, [r7, #52]	; 0x34
 8005808:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800580c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	613b      	str	r3, [r7, #16]
   return(result);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800583a:	623a      	str	r2, [r7, #32]
 800583c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	69f9      	ldr	r1, [r7, #28]
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	61bb      	str	r3, [r7, #24]
   return(result);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e00f      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4013      	ands	r3, r2
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	429a      	cmp	r2, r3
 8005886:	d09f      	beq.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3740      	adds	r7, #64	; 0x40
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	4613      	mov	r3, r2
 800589e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2222      	movs	r2, #34	; 0x22
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0220 	orr.w	r2, r2, #32
 80058f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b095      	sub	sp, #84	; 0x54
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800592c:	643a      	str	r2, [r7, #64]	; 0x40
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e5      	bne.n	800590c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	d119      	bne.n	80059b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	60bb      	str	r3, [r7, #8]
   return(result);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599c:	61ba      	str	r2, [r7, #24]
 800599e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6979      	ldr	r1, [r7, #20]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	613b      	str	r3, [r7, #16]
   return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059be:	bf00      	nop
 80059c0:	3754      	adds	r7, #84	; 0x54
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fed3 	bl	800578e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b21      	cmp	r3, #33	; 0x21
 8005a02:	d13e      	bne.n	8005a82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d114      	bne.n	8005a38 <UART_Transmit_IT+0x48>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d110      	bne.n	8005a38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]
 8005a36:	e008      	b.n	8005a4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	1c59      	adds	r1, r3, #1
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6211      	str	r1, [r2, #32]
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4619      	mov	r1, r3
 8005a58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fe64 	bl	800577c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b08c      	sub	sp, #48	; 0x30
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b22      	cmp	r3, #34	; 0x22
 8005ad0:	f040 80ae 	bne.w	8005c30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	d117      	bne.n	8005b0e <UART_Receive_IT+0x50>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d113      	bne.n	8005b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b0c:	e026      	b.n	8005b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d007      	beq.n	8005b32 <UART_Receive_IT+0x74>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <UART_Receive_IT+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e008      	b.n	8005b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d15d      	bne.n	8005c2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0220 	bic.w	r2, r2, #32
 8005b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d135      	bne.n	8005c22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d10a      	bne.n	8005c14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fdc0 	bl	80057a0 <HAL_UARTEx_RxEventCallback>
 8005c20:	e002      	b.n	8005c28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb f87a 	bl	8000d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e002      	b.n	8005c32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3730      	adds	r7, #48	; 0x30
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c76:	f023 030c 	bic.w	r3, r3, #12
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	430b      	orrs	r3, r1
 8005c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <UART_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d103      	bne.n	8005cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ca4:	f7ff f91c 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7ff f904 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8005cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009a      	lsls	r2, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <UART_SetConfig+0x118>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	0119      	lsls	r1, r3, #4
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <UART_SetConfig+0x118>)
 8005cea:	fba3 0302 	umull	r0, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2064      	movs	r0, #100	; 0x64
 8005cf2:	fb00 f303 	mul.w	r3, r0, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	3332      	adds	r3, #50	; 0x32
 8005cfc:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <UART_SetConfig+0x118>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d08:	4419      	add	r1, r3
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009a      	lsls	r2, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <UART_SetConfig+0x118>)
 8005d22:	fba3 0302 	umull	r0, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2064      	movs	r0, #100	; 0x64
 8005d2a:	fb00 f303 	mul.w	r3, r0, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	3332      	adds	r3, #50	; 0x32
 8005d34:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <UART_SetConfig+0x118>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	440a      	add	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40013800 	.word	0x40013800
 8005d54:	51eb851f 	.word	0x51eb851f

08005d58 <siprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d5e:	b500      	push	{lr}
 8005d60:	b09c      	sub	sp, #112	; 0x70
 8005d62:	ab1d      	add	r3, sp, #116	; 0x74
 8005d64:	9002      	str	r0, [sp, #8]
 8005d66:	9006      	str	r0, [sp, #24]
 8005d68:	9107      	str	r1, [sp, #28]
 8005d6a:	9104      	str	r1, [sp, #16]
 8005d6c:	4808      	ldr	r0, [pc, #32]	; (8005d90 <siprintf+0x38>)
 8005d6e:	4909      	ldr	r1, [pc, #36]	; (8005d94 <siprintf+0x3c>)
 8005d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	a902      	add	r1, sp, #8
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	f000 f98e 	bl	800609c <_svfiprintf_r>
 8005d80:	2200      	movs	r2, #0
 8005d82:	9b02      	ldr	r3, [sp, #8]
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	b01c      	add	sp, #112	; 0x70
 8005d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d8c:	b003      	add	sp, #12
 8005d8e:	4770      	bx	lr
 8005d90:	20000068 	.word	0x20000068
 8005d94:	ffff0208 	.word	0xffff0208

08005d98 <memset>:
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4402      	add	r2, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <__errno>:
 8005da8:	4b01      	ldr	r3, [pc, #4]	; (8005db0 <__errno+0x8>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	20000068 	.word	0x20000068

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	2600      	movs	r6, #0
 8005db8:	4d0c      	ldr	r5, [pc, #48]	; (8005dec <__libc_init_array+0x38>)
 8005dba:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <__libc_init_array+0x3c>)
 8005dbc:	1b64      	subs	r4, r4, r5
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	42a6      	cmp	r6, r4
 8005dc2:	d109      	bne.n	8005dd8 <__libc_init_array+0x24>
 8005dc4:	f000 fc7a 	bl	80066bc <_init>
 8005dc8:	2600      	movs	r6, #0
 8005dca:	4d0a      	ldr	r5, [pc, #40]	; (8005df4 <__libc_init_array+0x40>)
 8005dcc:	4c0a      	ldr	r4, [pc, #40]	; (8005df8 <__libc_init_array+0x44>)
 8005dce:	1b64      	subs	r4, r4, r5
 8005dd0:	10a4      	asrs	r4, r4, #2
 8005dd2:	42a6      	cmp	r6, r4
 8005dd4:	d105      	bne.n	8005de2 <__libc_init_array+0x2e>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ddc:	4798      	blx	r3
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7ee      	b.n	8005dc0 <__libc_init_array+0xc>
 8005de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de6:	4798      	blx	r3
 8005de8:	3601      	adds	r6, #1
 8005dea:	e7f2      	b.n	8005dd2 <__libc_init_array+0x1e>
 8005dec:	08007cb8 	.word	0x08007cb8
 8005df0:	08007cb8 	.word	0x08007cb8
 8005df4:	08007cb8 	.word	0x08007cb8
 8005df8:	08007cbc 	.word	0x08007cbc

08005dfc <__retarget_lock_acquire_recursive>:
 8005dfc:	4770      	bx	lr

08005dfe <__retarget_lock_release_recursive>:
 8005dfe:	4770      	bx	lr

08005e00 <_free_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4605      	mov	r5, r0
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d040      	beq.n	8005e8a <_free_r+0x8a>
 8005e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0c:	1f0c      	subs	r4, r1, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfb8      	it	lt
 8005e12:	18e4      	addlt	r4, r4, r3
 8005e14:	f000 f8dc 	bl	8005fd0 <__malloc_lock>
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <_free_r+0x8c>)
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	b933      	cbnz	r3, 8005e2c <_free_r+0x2c>
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	6014      	str	r4, [r2, #0]
 8005e22:	4628      	mov	r0, r5
 8005e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e28:	f000 b8d8 	b.w	8005fdc <__malloc_unlock>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d908      	bls.n	8005e42 <_free_r+0x42>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	1821      	adds	r1, r4, r0
 8005e34:	428b      	cmp	r3, r1
 8005e36:	bf01      	itttt	eq
 8005e38:	6819      	ldreq	r1, [r3, #0]
 8005e3a:	685b      	ldreq	r3, [r3, #4]
 8005e3c:	1809      	addeq	r1, r1, r0
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	e7ed      	b.n	8005e1e <_free_r+0x1e>
 8005e42:	461a      	mov	r2, r3
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b10b      	cbz	r3, 8005e4c <_free_r+0x4c>
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d9fa      	bls.n	8005e42 <_free_r+0x42>
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	1850      	adds	r0, r2, r1
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d10b      	bne.n	8005e6c <_free_r+0x6c>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	4401      	add	r1, r0
 8005e58:	1850      	adds	r0, r2, r1
 8005e5a:	4283      	cmp	r3, r0
 8005e5c:	6011      	str	r1, [r2, #0]
 8005e5e:	d1e0      	bne.n	8005e22 <_free_r+0x22>
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4408      	add	r0, r1
 8005e66:	6010      	str	r0, [r2, #0]
 8005e68:	6053      	str	r3, [r2, #4]
 8005e6a:	e7da      	b.n	8005e22 <_free_r+0x22>
 8005e6c:	d902      	bls.n	8005e74 <_free_r+0x74>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	e7d6      	b.n	8005e22 <_free_r+0x22>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	1821      	adds	r1, r4, r0
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1809      	addeq	r1, r1, r0
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6063      	str	r3, [r4, #4]
 8005e86:	6054      	str	r4, [r2, #4]
 8005e88:	e7cb      	b.n	8005e22 <_free_r+0x22>
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000bb0 	.word	0x20000bb0

08005e90 <sbrk_aligned>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4e0e      	ldr	r6, [pc, #56]	; (8005ecc <sbrk_aligned+0x3c>)
 8005e94:	460c      	mov	r4, r1
 8005e96:	6831      	ldr	r1, [r6, #0]
 8005e98:	4605      	mov	r5, r0
 8005e9a:	b911      	cbnz	r1, 8005ea2 <sbrk_aligned+0x12>
 8005e9c:	f000 fbaa 	bl	80065f4 <_sbrk_r>
 8005ea0:	6030      	str	r0, [r6, #0]
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fba5 	bl	80065f4 <_sbrk_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d00a      	beq.n	8005ec4 <sbrk_aligned+0x34>
 8005eae:	1cc4      	adds	r4, r0, #3
 8005eb0:	f024 0403 	bic.w	r4, r4, #3
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d007      	beq.n	8005ec8 <sbrk_aligned+0x38>
 8005eb8:	1a21      	subs	r1, r4, r0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fb9a 	bl	80065f4 <_sbrk_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d101      	bne.n	8005ec8 <sbrk_aligned+0x38>
 8005ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ec8:	4620      	mov	r0, r4
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	20000bb4 	.word	0x20000bb4

08005ed0 <_malloc_r>:
 8005ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed4:	1ccd      	adds	r5, r1, #3
 8005ed6:	f025 0503 	bic.w	r5, r5, #3
 8005eda:	3508      	adds	r5, #8
 8005edc:	2d0c      	cmp	r5, #12
 8005ede:	bf38      	it	cc
 8005ee0:	250c      	movcc	r5, #12
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	db01      	blt.n	8005eec <_malloc_r+0x1c>
 8005ee8:	42a9      	cmp	r1, r5
 8005eea:	d905      	bls.n	8005ef8 <_malloc_r+0x28>
 8005eec:	230c      	movs	r3, #12
 8005eee:	2600      	movs	r6, #0
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fcc <_malloc_r+0xfc>
 8005efc:	f000 f868 	bl	8005fd0 <__malloc_lock>
 8005f00:	f8d8 3000 	ldr.w	r3, [r8]
 8005f04:	461c      	mov	r4, r3
 8005f06:	bb5c      	cbnz	r4, 8005f60 <_malloc_r+0x90>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f7ff ffc0 	bl	8005e90 <sbrk_aligned>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	4604      	mov	r4, r0
 8005f14:	d155      	bne.n	8005fc2 <_malloc_r+0xf2>
 8005f16:	f8d8 4000 	ldr.w	r4, [r8]
 8005f1a:	4626      	mov	r6, r4
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	d145      	bne.n	8005fac <_malloc_r+0xdc>
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d048      	beq.n	8005fb6 <_malloc_r+0xe6>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	4631      	mov	r1, r6
 8005f28:	4638      	mov	r0, r7
 8005f2a:	eb04 0903 	add.w	r9, r4, r3
 8005f2e:	f000 fb61 	bl	80065f4 <_sbrk_r>
 8005f32:	4581      	cmp	r9, r0
 8005f34:	d13f      	bne.n	8005fb6 <_malloc_r+0xe6>
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	4638      	mov	r0, r7
 8005f3a:	1a6d      	subs	r5, r5, r1
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7ff ffa7 	bl	8005e90 <sbrk_aligned>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d037      	beq.n	8005fb6 <_malloc_r+0xe6>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	442b      	add	r3, r5
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d038      	beq.n	8005fc6 <_malloc_r+0xf6>
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	42a2      	cmp	r2, r4
 8005f58:	d12b      	bne.n	8005fb2 <_malloc_r+0xe2>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e00f      	b.n	8005f80 <_malloc_r+0xb0>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	1b52      	subs	r2, r2, r5
 8005f64:	d41f      	bmi.n	8005fa6 <_malloc_r+0xd6>
 8005f66:	2a0b      	cmp	r2, #11
 8005f68:	d917      	bls.n	8005f9a <_malloc_r+0xca>
 8005f6a:	1961      	adds	r1, r4, r5
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	6025      	str	r5, [r4, #0]
 8005f70:	bf18      	it	ne
 8005f72:	6059      	strne	r1, [r3, #4]
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	bf08      	it	eq
 8005f78:	f8c8 1000 	streq.w	r1, [r8]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 f829 	bl	8005fdc <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0ae      	beq.n	8005ef2 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7ab      	b.n	8005ef2 <_malloc_r+0x22>
 8005f9a:	42a3      	cmp	r3, r4
 8005f9c:	6862      	ldr	r2, [r4, #4]
 8005f9e:	d1dd      	bne.n	8005f5c <_malloc_r+0x8c>
 8005fa0:	f8c8 2000 	str.w	r2, [r8]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xb0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7ac      	b.n	8005f06 <_malloc_r+0x36>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b4      	b.n	8005f1c <_malloc_r+0x4c>
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	e7cc      	b.n	8005f50 <_malloc_r+0x80>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	4638      	mov	r0, r7
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	f000 f80e 	bl	8005fdc <__malloc_unlock>
 8005fc0:	e797      	b.n	8005ef2 <_malloc_r+0x22>
 8005fc2:	6025      	str	r5, [r4, #0]
 8005fc4:	e7dc      	b.n	8005f80 <_malloc_r+0xb0>
 8005fc6:	605b      	str	r3, [r3, #4]
 8005fc8:	deff      	udf	#255	; 0xff
 8005fca:	bf00      	nop
 8005fcc:	20000bb0 	.word	0x20000bb0

08005fd0 <__malloc_lock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__malloc_lock+0x8>)
 8005fd2:	f7ff bf13 	b.w	8005dfc <__retarget_lock_acquire_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000bac 	.word	0x20000bac

08005fdc <__malloc_unlock>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__malloc_unlock+0x8>)
 8005fde:	f7ff bf0e 	b.w	8005dfe <__retarget_lock_release_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	20000bac 	.word	0x20000bac

08005fe8 <__ssputs_r>:
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	461f      	mov	r7, r3
 8005fee:	688e      	ldr	r6, [r1, #8]
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	42be      	cmp	r6, r7
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	4690      	mov	r8, r2
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	d82c      	bhi.n	8006056 <__ssputs_r+0x6e>
 8005ffc:	898a      	ldrh	r2, [r1, #12]
 8005ffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006002:	d026      	beq.n	8006052 <__ssputs_r+0x6a>
 8006004:	6965      	ldr	r5, [r4, #20]
 8006006:	6909      	ldr	r1, [r1, #16]
 8006008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800600c:	eba3 0901 	sub.w	r9, r3, r1
 8006010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006014:	1c7b      	adds	r3, r7, #1
 8006016:	444b      	add	r3, r9
 8006018:	106d      	asrs	r5, r5, #1
 800601a:	429d      	cmp	r5, r3
 800601c:	bf38      	it	cc
 800601e:	461d      	movcc	r5, r3
 8006020:	0553      	lsls	r3, r2, #21
 8006022:	d527      	bpl.n	8006074 <__ssputs_r+0x8c>
 8006024:	4629      	mov	r1, r5
 8006026:	f7ff ff53 	bl	8005ed0 <_malloc_r>
 800602a:	4606      	mov	r6, r0
 800602c:	b360      	cbz	r0, 8006088 <__ssputs_r+0xa0>
 800602e:	464a      	mov	r2, r9
 8006030:	6921      	ldr	r1, [r4, #16]
 8006032:	f000 fafd 	bl	8006630 <memcpy>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	6126      	str	r6, [r4, #16]
 8006044:	444e      	add	r6, r9
 8006046:	6026      	str	r6, [r4, #0]
 8006048:	463e      	mov	r6, r7
 800604a:	6165      	str	r5, [r4, #20]
 800604c:	eba5 0509 	sub.w	r5, r5, r9
 8006050:	60a5      	str	r5, [r4, #8]
 8006052:	42be      	cmp	r6, r7
 8006054:	d900      	bls.n	8006058 <__ssputs_r+0x70>
 8006056:	463e      	mov	r6, r7
 8006058:	4632      	mov	r2, r6
 800605a:	4641      	mov	r1, r8
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	f000 faaf 	bl	80065c0 <memmove>
 8006062:	2000      	movs	r0, #0
 8006064:	68a3      	ldr	r3, [r4, #8]
 8006066:	1b9b      	subs	r3, r3, r6
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4433      	add	r3, r6
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	462a      	mov	r2, r5
 8006076:	f000 fae9 	bl	800664c <_realloc_r>
 800607a:	4606      	mov	r6, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	d1e0      	bne.n	8006042 <__ssputs_r+0x5a>
 8006080:	4650      	mov	r0, sl
 8006082:	6921      	ldr	r1, [r4, #16]
 8006084:	f7ff febc 	bl	8005e00 <_free_r>
 8006088:	230c      	movs	r3, #12
 800608a:	f8ca 3000 	str.w	r3, [sl]
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	e7e9      	b.n	8006070 <__ssputs_r+0x88>

0800609c <_svfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4698      	mov	r8, r3
 80060a2:	898b      	ldrh	r3, [r1, #12]
 80060a4:	4607      	mov	r7, r0
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	460d      	mov	r5, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	b09d      	sub	sp, #116	; 0x74
 80060ae:	d50e      	bpl.n	80060ce <_svfiprintf_r+0x32>
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	b963      	cbnz	r3, 80060ce <_svfiprintf_r+0x32>
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	f7ff ff0b 	bl	8005ed0 <_malloc_r>
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	6128      	str	r0, [r5, #16]
 80060be:	b920      	cbnz	r0, 80060ca <_svfiprintf_r+0x2e>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e0d0      	b.n	800626c <_svfiprintf_r+0x1d0>
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	616b      	str	r3, [r5, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	2320      	movs	r3, #32
 80060d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d8:	2330      	movs	r3, #48	; 0x30
 80060da:	f04f 0901 	mov.w	r9, #1
 80060de:	f8cd 800c 	str.w	r8, [sp, #12]
 80060e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006284 <_svfiprintf_r+0x1e8>
 80060e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ea:	4623      	mov	r3, r4
 80060ec:	469a      	mov	sl, r3
 80060ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f2:	b10a      	cbz	r2, 80060f8 <_svfiprintf_r+0x5c>
 80060f4:	2a25      	cmp	r2, #37	; 0x25
 80060f6:	d1f9      	bne.n	80060ec <_svfiprintf_r+0x50>
 80060f8:	ebba 0b04 	subs.w	fp, sl, r4
 80060fc:	d00b      	beq.n	8006116 <_svfiprintf_r+0x7a>
 80060fe:	465b      	mov	r3, fp
 8006100:	4622      	mov	r2, r4
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ff6f 	bl	8005fe8 <__ssputs_r>
 800610a:	3001      	adds	r0, #1
 800610c:	f000 80a9 	beq.w	8006262 <_svfiprintf_r+0x1c6>
 8006110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006112:	445a      	add	r2, fp
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80a1 	beq.w	8006262 <_svfiprintf_r+0x1c6>
 8006120:	2300      	movs	r3, #0
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612a:	f10a 0a01 	add.w	sl, sl, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006136:	931a      	str	r3, [sp, #104]	; 0x68
 8006138:	4654      	mov	r4, sl
 800613a:	2205      	movs	r2, #5
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	4850      	ldr	r0, [pc, #320]	; (8006284 <_svfiprintf_r+0x1e8>)
 8006142:	f000 fa67 	bl	8006614 <memchr>
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	b9d8      	cbnz	r0, 8006182 <_svfiprintf_r+0xe6>
 800614a:	06d0      	lsls	r0, r2, #27
 800614c:	bf44      	itt	mi
 800614e:	2320      	movmi	r3, #32
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006154:	0711      	lsls	r1, r2, #28
 8006156:	bf44      	itt	mi
 8006158:	232b      	movmi	r3, #43	; 0x2b
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b2a      	cmp	r3, #42	; 0x2a
 8006164:	d015      	beq.n	8006192 <_svfiprintf_r+0xf6>
 8006166:	4654      	mov	r4, sl
 8006168:	2000      	movs	r0, #0
 800616a:	f04f 0c0a 	mov.w	ip, #10
 800616e:	9a07      	ldr	r2, [sp, #28]
 8006170:	4621      	mov	r1, r4
 8006172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006176:	3b30      	subs	r3, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d94d      	bls.n	8006218 <_svfiprintf_r+0x17c>
 800617c:	b1b0      	cbz	r0, 80061ac <_svfiprintf_r+0x110>
 800617e:	9207      	str	r2, [sp, #28]
 8006180:	e014      	b.n	80061ac <_svfiprintf_r+0x110>
 8006182:	eba0 0308 	sub.w	r3, r0, r8
 8006186:	fa09 f303 	lsl.w	r3, r9, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	46a2      	mov	sl, r4
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	e7d2      	b.n	8006138 <_svfiprintf_r+0x9c>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9103      	str	r1, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfbb      	ittet	lt
 800619e:	425b      	neglt	r3, r3
 80061a0:	f042 0202 	orrlt.w	r2, r2, #2
 80061a4:	9307      	strge	r3, [sp, #28]
 80061a6:	9307      	strlt	r3, [sp, #28]
 80061a8:	bfb8      	it	lt
 80061aa:	9204      	strlt	r2, [sp, #16]
 80061ac:	7823      	ldrb	r3, [r4, #0]
 80061ae:	2b2e      	cmp	r3, #46	; 0x2e
 80061b0:	d10c      	bne.n	80061cc <_svfiprintf_r+0x130>
 80061b2:	7863      	ldrb	r3, [r4, #1]
 80061b4:	2b2a      	cmp	r3, #42	; 0x2a
 80061b6:	d134      	bne.n	8006222 <_svfiprintf_r+0x186>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	3402      	adds	r4, #2
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	9203      	str	r2, [sp, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bfb8      	it	lt
 80061c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006288 <_svfiprintf_r+0x1ec>
 80061d0:	2203      	movs	r2, #3
 80061d2:	4650      	mov	r0, sl
 80061d4:	7821      	ldrb	r1, [r4, #0]
 80061d6:	f000 fa1d 	bl	8006614 <memchr>
 80061da:	b138      	cbz	r0, 80061ec <_svfiprintf_r+0x150>
 80061dc:	2240      	movs	r2, #64	; 0x40
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	eba0 000a 	sub.w	r0, r0, sl
 80061e4:	4082      	lsls	r2, r0
 80061e6:	4313      	orrs	r3, r2
 80061e8:	3401      	adds	r4, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f0:	2206      	movs	r2, #6
 80061f2:	4826      	ldr	r0, [pc, #152]	; (800628c <_svfiprintf_r+0x1f0>)
 80061f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f8:	f000 fa0c 	bl	8006614 <memchr>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d038      	beq.n	8006272 <_svfiprintf_r+0x1d6>
 8006200:	4b23      	ldr	r3, [pc, #140]	; (8006290 <_svfiprintf_r+0x1f4>)
 8006202:	bb1b      	cbnz	r3, 800624c <_svfiprintf_r+0x1b0>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	3307      	adds	r3, #7
 8006208:	f023 0307 	bic.w	r3, r3, #7
 800620c:	3308      	adds	r3, #8
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006212:	4433      	add	r3, r6
 8006214:	9309      	str	r3, [sp, #36]	; 0x24
 8006216:	e768      	b.n	80060ea <_svfiprintf_r+0x4e>
 8006218:	460c      	mov	r4, r1
 800621a:	2001      	movs	r0, #1
 800621c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006220:	e7a6      	b.n	8006170 <_svfiprintf_r+0xd4>
 8006222:	2300      	movs	r3, #0
 8006224:	f04f 0c0a 	mov.w	ip, #10
 8006228:	4619      	mov	r1, r3
 800622a:	3401      	adds	r4, #1
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	4620      	mov	r0, r4
 8006230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006234:	3a30      	subs	r2, #48	; 0x30
 8006236:	2a09      	cmp	r2, #9
 8006238:	d903      	bls.n	8006242 <_svfiprintf_r+0x1a6>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0c6      	beq.n	80061cc <_svfiprintf_r+0x130>
 800623e:	9105      	str	r1, [sp, #20]
 8006240:	e7c4      	b.n	80061cc <_svfiprintf_r+0x130>
 8006242:	4604      	mov	r4, r0
 8006244:	2301      	movs	r3, #1
 8006246:	fb0c 2101 	mla	r1, ip, r1, r2
 800624a:	e7f0      	b.n	800622e <_svfiprintf_r+0x192>
 800624c:	ab03      	add	r3, sp, #12
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	462a      	mov	r2, r5
 8006252:	4638      	mov	r0, r7
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <_svfiprintf_r+0x1f8>)
 8006256:	a904      	add	r1, sp, #16
 8006258:	f3af 8000 	nop.w
 800625c:	1c42      	adds	r2, r0, #1
 800625e:	4606      	mov	r6, r0
 8006260:	d1d6      	bne.n	8006210 <_svfiprintf_r+0x174>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	065b      	lsls	r3, r3, #25
 8006266:	f53f af2d 	bmi.w	80060c4 <_svfiprintf_r+0x28>
 800626a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626c:	b01d      	add	sp, #116	; 0x74
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	ab03      	add	r3, sp, #12
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	462a      	mov	r2, r5
 8006278:	4638      	mov	r0, r7
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <_svfiprintf_r+0x1f8>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	f000 f87d 	bl	800637c <_printf_i>
 8006282:	e7eb      	b.n	800625c <_svfiprintf_r+0x1c0>
 8006284:	08007c82 	.word	0x08007c82
 8006288:	08007c88 	.word	0x08007c88
 800628c:	08007c8c 	.word	0x08007c8c
 8006290:	00000000 	.word	0x00000000
 8006294:	08005fe9 	.word	0x08005fe9

08006298 <_printf_common>:
 8006298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	4616      	mov	r6, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	688a      	ldr	r2, [r1, #8]
 80062a2:	690b      	ldr	r3, [r1, #16]
 80062a4:	4607      	mov	r7, r0
 80062a6:	4293      	cmp	r3, r2
 80062a8:	bfb8      	it	lt
 80062aa:	4613      	movlt	r3, r2
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062b2:	460c      	mov	r4, r1
 80062b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b8:	b10a      	cbz	r2, 80062be <_printf_common+0x26>
 80062ba:	3301      	adds	r3, #1
 80062bc:	6033      	str	r3, [r6, #0]
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	0699      	lsls	r1, r3, #26
 80062c2:	bf42      	ittt	mi
 80062c4:	6833      	ldrmi	r3, [r6, #0]
 80062c6:	3302      	addmi	r3, #2
 80062c8:	6033      	strmi	r3, [r6, #0]
 80062ca:	6825      	ldr	r5, [r4, #0]
 80062cc:	f015 0506 	ands.w	r5, r5, #6
 80062d0:	d106      	bne.n	80062e0 <_printf_common+0x48>
 80062d2:	f104 0a19 	add.w	sl, r4, #25
 80062d6:	68e3      	ldr	r3, [r4, #12]
 80062d8:	6832      	ldr	r2, [r6, #0]
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	42ab      	cmp	r3, r5
 80062de:	dc2b      	bgt.n	8006338 <_printf_common+0xa0>
 80062e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062e4:	1e13      	subs	r3, r2, #0
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	bf18      	it	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	0692      	lsls	r2, r2, #26
 80062ee:	d430      	bmi.n	8006352 <_printf_common+0xba>
 80062f0:	4649      	mov	r1, r9
 80062f2:	4638      	mov	r0, r7
 80062f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f8:	47c0      	blx	r8
 80062fa:	3001      	adds	r0, #1
 80062fc:	d023      	beq.n	8006346 <_printf_common+0xae>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	6922      	ldr	r2, [r4, #16]
 8006302:	f003 0306 	and.w	r3, r3, #6
 8006306:	2b04      	cmp	r3, #4
 8006308:	bf14      	ite	ne
 800630a:	2500      	movne	r5, #0
 800630c:	6833      	ldreq	r3, [r6, #0]
 800630e:	f04f 0600 	mov.w	r6, #0
 8006312:	bf08      	it	eq
 8006314:	68e5      	ldreq	r5, [r4, #12]
 8006316:	f104 041a 	add.w	r4, r4, #26
 800631a:	bf08      	it	eq
 800631c:	1aed      	subeq	r5, r5, r3
 800631e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006322:	bf08      	it	eq
 8006324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006328:	4293      	cmp	r3, r2
 800632a:	bfc4      	itt	gt
 800632c:	1a9b      	subgt	r3, r3, r2
 800632e:	18ed      	addgt	r5, r5, r3
 8006330:	42b5      	cmp	r5, r6
 8006332:	d11a      	bne.n	800636a <_printf_common+0xd2>
 8006334:	2000      	movs	r0, #0
 8006336:	e008      	b.n	800634a <_printf_common+0xb2>
 8006338:	2301      	movs	r3, #1
 800633a:	4652      	mov	r2, sl
 800633c:	4649      	mov	r1, r9
 800633e:	4638      	mov	r0, r7
 8006340:	47c0      	blx	r8
 8006342:	3001      	adds	r0, #1
 8006344:	d103      	bne.n	800634e <_printf_common+0xb6>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	3501      	adds	r5, #1
 8006350:	e7c1      	b.n	80062d6 <_printf_common+0x3e>
 8006352:	2030      	movs	r0, #48	; 0x30
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006360:	4422      	add	r2, r4
 8006362:	3302      	adds	r3, #2
 8006364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006368:	e7c2      	b.n	80062f0 <_printf_common+0x58>
 800636a:	2301      	movs	r3, #1
 800636c:	4622      	mov	r2, r4
 800636e:	4649      	mov	r1, r9
 8006370:	4638      	mov	r0, r7
 8006372:	47c0      	blx	r8
 8006374:	3001      	adds	r0, #1
 8006376:	d0e6      	beq.n	8006346 <_printf_common+0xae>
 8006378:	3601      	adds	r6, #1
 800637a:	e7d9      	b.n	8006330 <_printf_common+0x98>

0800637c <_printf_i>:
 800637c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	7e0f      	ldrb	r7, [r1, #24]
 8006382:	4691      	mov	r9, r2
 8006384:	2f78      	cmp	r7, #120	; 0x78
 8006386:	4680      	mov	r8, r0
 8006388:	460c      	mov	r4, r1
 800638a:	469a      	mov	sl, r3
 800638c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800638e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006392:	d807      	bhi.n	80063a4 <_printf_i+0x28>
 8006394:	2f62      	cmp	r7, #98	; 0x62
 8006396:	d80a      	bhi.n	80063ae <_printf_i+0x32>
 8006398:	2f00      	cmp	r7, #0
 800639a:	f000 80d5 	beq.w	8006548 <_printf_i+0x1cc>
 800639e:	2f58      	cmp	r7, #88	; 0x58
 80063a0:	f000 80c1 	beq.w	8006526 <_printf_i+0x1aa>
 80063a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063ac:	e03a      	b.n	8006424 <_printf_i+0xa8>
 80063ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063b2:	2b15      	cmp	r3, #21
 80063b4:	d8f6      	bhi.n	80063a4 <_printf_i+0x28>
 80063b6:	a101      	add	r1, pc, #4	; (adr r1, 80063bc <_printf_i+0x40>)
 80063b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006429 	.word	0x08006429
 80063c4:	080063a5 	.word	0x080063a5
 80063c8:	080063a5 	.word	0x080063a5
 80063cc:	080063a5 	.word	0x080063a5
 80063d0:	080063a5 	.word	0x080063a5
 80063d4:	08006429 	.word	0x08006429
 80063d8:	080063a5 	.word	0x080063a5
 80063dc:	080063a5 	.word	0x080063a5
 80063e0:	080063a5 	.word	0x080063a5
 80063e4:	080063a5 	.word	0x080063a5
 80063e8:	0800652f 	.word	0x0800652f
 80063ec:	08006455 	.word	0x08006455
 80063f0:	080064e9 	.word	0x080064e9
 80063f4:	080063a5 	.word	0x080063a5
 80063f8:	080063a5 	.word	0x080063a5
 80063fc:	08006551 	.word	0x08006551
 8006400:	080063a5 	.word	0x080063a5
 8006404:	08006455 	.word	0x08006455
 8006408:	080063a5 	.word	0x080063a5
 800640c:	080063a5 	.word	0x080063a5
 8006410:	080064f1 	.word	0x080064f1
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	602a      	str	r2, [r5, #0]
 800641c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006424:	2301      	movs	r3, #1
 8006426:	e0a0      	b.n	800656a <_printf_i+0x1ee>
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	0607      	lsls	r7, r0, #24
 800642e:	f103 0104 	add.w	r1, r3, #4
 8006432:	6029      	str	r1, [r5, #0]
 8006434:	d501      	bpl.n	800643a <_printf_i+0xbe>
 8006436:	681e      	ldr	r6, [r3, #0]
 8006438:	e003      	b.n	8006442 <_printf_i+0xc6>
 800643a:	0646      	lsls	r6, r0, #25
 800643c:	d5fb      	bpl.n	8006436 <_printf_i+0xba>
 800643e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006442:	2e00      	cmp	r6, #0
 8006444:	da03      	bge.n	800644e <_printf_i+0xd2>
 8006446:	232d      	movs	r3, #45	; 0x2d
 8006448:	4276      	negs	r6, r6
 800644a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644e:	230a      	movs	r3, #10
 8006450:	4859      	ldr	r0, [pc, #356]	; (80065b8 <_printf_i+0x23c>)
 8006452:	e012      	b.n	800647a <_printf_i+0xfe>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	6029      	str	r1, [r5, #0]
 800645c:	0605      	lsls	r5, r0, #24
 800645e:	d501      	bpl.n	8006464 <_printf_i+0xe8>
 8006460:	681e      	ldr	r6, [r3, #0]
 8006462:	e002      	b.n	800646a <_printf_i+0xee>
 8006464:	0641      	lsls	r1, r0, #25
 8006466:	d5fb      	bpl.n	8006460 <_printf_i+0xe4>
 8006468:	881e      	ldrh	r6, [r3, #0]
 800646a:	2f6f      	cmp	r7, #111	; 0x6f
 800646c:	bf0c      	ite	eq
 800646e:	2308      	moveq	r3, #8
 8006470:	230a      	movne	r3, #10
 8006472:	4851      	ldr	r0, [pc, #324]	; (80065b8 <_printf_i+0x23c>)
 8006474:	2100      	movs	r1, #0
 8006476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800647a:	6865      	ldr	r5, [r4, #4]
 800647c:	2d00      	cmp	r5, #0
 800647e:	bfa8      	it	ge
 8006480:	6821      	ldrge	r1, [r4, #0]
 8006482:	60a5      	str	r5, [r4, #8]
 8006484:	bfa4      	itt	ge
 8006486:	f021 0104 	bicge.w	r1, r1, #4
 800648a:	6021      	strge	r1, [r4, #0]
 800648c:	b90e      	cbnz	r6, 8006492 <_printf_i+0x116>
 800648e:	2d00      	cmp	r5, #0
 8006490:	d04b      	beq.n	800652a <_printf_i+0x1ae>
 8006492:	4615      	mov	r5, r2
 8006494:	fbb6 f1f3 	udiv	r1, r6, r3
 8006498:	fb03 6711 	mls	r7, r3, r1, r6
 800649c:	5dc7      	ldrb	r7, [r0, r7]
 800649e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064a2:	4637      	mov	r7, r6
 80064a4:	42bb      	cmp	r3, r7
 80064a6:	460e      	mov	r6, r1
 80064a8:	d9f4      	bls.n	8006494 <_printf_i+0x118>
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d10b      	bne.n	80064c6 <_printf_i+0x14a>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	07de      	lsls	r6, r3, #31
 80064b2:	d508      	bpl.n	80064c6 <_printf_i+0x14a>
 80064b4:	6923      	ldr	r3, [r4, #16]
 80064b6:	6861      	ldr	r1, [r4, #4]
 80064b8:	4299      	cmp	r1, r3
 80064ba:	bfde      	ittt	le
 80064bc:	2330      	movle	r3, #48	; 0x30
 80064be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064c6:	1b52      	subs	r2, r2, r5
 80064c8:	6122      	str	r2, [r4, #16]
 80064ca:	464b      	mov	r3, r9
 80064cc:	4621      	mov	r1, r4
 80064ce:	4640      	mov	r0, r8
 80064d0:	f8cd a000 	str.w	sl, [sp]
 80064d4:	aa03      	add	r2, sp, #12
 80064d6:	f7ff fedf 	bl	8006298 <_printf_common>
 80064da:	3001      	adds	r0, #1
 80064dc:	d14a      	bne.n	8006574 <_printf_i+0x1f8>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	b004      	add	sp, #16
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	f043 0320 	orr.w	r3, r3, #32
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	2778      	movs	r7, #120	; 0x78
 80064f2:	4832      	ldr	r0, [pc, #200]	; (80065bc <_printf_i+0x240>)
 80064f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	6829      	ldr	r1, [r5, #0]
 80064fc:	061f      	lsls	r7, r3, #24
 80064fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006502:	d402      	bmi.n	800650a <_printf_i+0x18e>
 8006504:	065f      	lsls	r7, r3, #25
 8006506:	bf48      	it	mi
 8006508:	b2b6      	uxthmi	r6, r6
 800650a:	07df      	lsls	r7, r3, #31
 800650c:	bf48      	it	mi
 800650e:	f043 0320 	orrmi.w	r3, r3, #32
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	bf48      	it	mi
 8006516:	6023      	strmi	r3, [r4, #0]
 8006518:	b91e      	cbnz	r6, 8006522 <_printf_i+0x1a6>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	f023 0320 	bic.w	r3, r3, #32
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	2310      	movs	r3, #16
 8006524:	e7a6      	b.n	8006474 <_printf_i+0xf8>
 8006526:	4824      	ldr	r0, [pc, #144]	; (80065b8 <_printf_i+0x23c>)
 8006528:	e7e4      	b.n	80064f4 <_printf_i+0x178>
 800652a:	4615      	mov	r5, r2
 800652c:	e7bd      	b.n	80064aa <_printf_i+0x12e>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	6826      	ldr	r6, [r4, #0]
 8006532:	1d18      	adds	r0, r3, #4
 8006534:	6961      	ldr	r1, [r4, #20]
 8006536:	6028      	str	r0, [r5, #0]
 8006538:	0635      	lsls	r5, r6, #24
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	d501      	bpl.n	8006542 <_printf_i+0x1c6>
 800653e:	6019      	str	r1, [r3, #0]
 8006540:	e002      	b.n	8006548 <_printf_i+0x1cc>
 8006542:	0670      	lsls	r0, r6, #25
 8006544:	d5fb      	bpl.n	800653e <_printf_i+0x1c2>
 8006546:	8019      	strh	r1, [r3, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	4615      	mov	r5, r2
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	e7bc      	b.n	80064ca <_printf_i+0x14e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	2100      	movs	r1, #0
 8006554:	1d1a      	adds	r2, r3, #4
 8006556:	602a      	str	r2, [r5, #0]
 8006558:	681d      	ldr	r5, [r3, #0]
 800655a:	6862      	ldr	r2, [r4, #4]
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f859 	bl	8006614 <memchr>
 8006562:	b108      	cbz	r0, 8006568 <_printf_i+0x1ec>
 8006564:	1b40      	subs	r0, r0, r5
 8006566:	6060      	str	r0, [r4, #4]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	2300      	movs	r3, #0
 800656e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006572:	e7aa      	b.n	80064ca <_printf_i+0x14e>
 8006574:	462a      	mov	r2, r5
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	47d0      	blx	sl
 800657e:	3001      	adds	r0, #1
 8006580:	d0ad      	beq.n	80064de <_printf_i+0x162>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	079b      	lsls	r3, r3, #30
 8006586:	d413      	bmi.n	80065b0 <_printf_i+0x234>
 8006588:	68e0      	ldr	r0, [r4, #12]
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	4298      	cmp	r0, r3
 800658e:	bfb8      	it	lt
 8006590:	4618      	movlt	r0, r3
 8006592:	e7a6      	b.n	80064e2 <_printf_i+0x166>
 8006594:	2301      	movs	r3, #1
 8006596:	4632      	mov	r2, r6
 8006598:	4649      	mov	r1, r9
 800659a:	4640      	mov	r0, r8
 800659c:	47d0      	blx	sl
 800659e:	3001      	adds	r0, #1
 80065a0:	d09d      	beq.n	80064de <_printf_i+0x162>
 80065a2:	3501      	adds	r5, #1
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	9903      	ldr	r1, [sp, #12]
 80065a8:	1a5b      	subs	r3, r3, r1
 80065aa:	42ab      	cmp	r3, r5
 80065ac:	dcf2      	bgt.n	8006594 <_printf_i+0x218>
 80065ae:	e7eb      	b.n	8006588 <_printf_i+0x20c>
 80065b0:	2500      	movs	r5, #0
 80065b2:	f104 0619 	add.w	r6, r4, #25
 80065b6:	e7f5      	b.n	80065a4 <_printf_i+0x228>
 80065b8:	08007c93 	.word	0x08007c93
 80065bc:	08007ca4 	.word	0x08007ca4

080065c0 <memmove>:
 80065c0:	4288      	cmp	r0, r1
 80065c2:	b510      	push	{r4, lr}
 80065c4:	eb01 0402 	add.w	r4, r1, r2
 80065c8:	d902      	bls.n	80065d0 <memmove+0x10>
 80065ca:	4284      	cmp	r4, r0
 80065cc:	4623      	mov	r3, r4
 80065ce:	d807      	bhi.n	80065e0 <memmove+0x20>
 80065d0:	1e43      	subs	r3, r0, #1
 80065d2:	42a1      	cmp	r1, r4
 80065d4:	d008      	beq.n	80065e8 <memmove+0x28>
 80065d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065de:	e7f8      	b.n	80065d2 <memmove+0x12>
 80065e0:	4601      	mov	r1, r0
 80065e2:	4402      	add	r2, r0
 80065e4:	428a      	cmp	r2, r1
 80065e6:	d100      	bne.n	80065ea <memmove+0x2a>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065f2:	e7f7      	b.n	80065e4 <memmove+0x24>

080065f4 <_sbrk_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	2300      	movs	r3, #0
 80065f8:	4d05      	ldr	r5, [pc, #20]	; (8006610 <_sbrk_r+0x1c>)
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f7fc f872 	bl	80026e8 <_sbrk>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_sbrk_r+0x1a>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_sbrk_r+0x1a>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20000ba8 	.word	0x20000ba8

08006614 <memchr>:
 8006614:	4603      	mov	r3, r0
 8006616:	b510      	push	{r4, lr}
 8006618:	b2c9      	uxtb	r1, r1
 800661a:	4402      	add	r2, r0
 800661c:	4293      	cmp	r3, r2
 800661e:	4618      	mov	r0, r3
 8006620:	d101      	bne.n	8006626 <memchr+0x12>
 8006622:	2000      	movs	r0, #0
 8006624:	e003      	b.n	800662e <memchr+0x1a>
 8006626:	7804      	ldrb	r4, [r0, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	428c      	cmp	r4, r1
 800662c:	d1f6      	bne.n	800661c <memchr+0x8>
 800662e:	bd10      	pop	{r4, pc}

08006630 <memcpy>:
 8006630:	440a      	add	r2, r1
 8006632:	4291      	cmp	r1, r2
 8006634:	f100 33ff 	add.w	r3, r0, #4294967295
 8006638:	d100      	bne.n	800663c <memcpy+0xc>
 800663a:	4770      	bx	lr
 800663c:	b510      	push	{r4, lr}
 800663e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006642:	4291      	cmp	r1, r2
 8006644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006648:	d1f9      	bne.n	800663e <memcpy+0xe>
 800664a:	bd10      	pop	{r4, pc}

0800664c <_realloc_r>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	4680      	mov	r8, r0
 8006652:	4614      	mov	r4, r2
 8006654:	460e      	mov	r6, r1
 8006656:	b921      	cbnz	r1, 8006662 <_realloc_r+0x16>
 8006658:	4611      	mov	r1, r2
 800665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	f7ff bc37 	b.w	8005ed0 <_malloc_r>
 8006662:	b92a      	cbnz	r2, 8006670 <_realloc_r+0x24>
 8006664:	f7ff fbcc 	bl	8005e00 <_free_r>
 8006668:	4625      	mov	r5, r4
 800666a:	4628      	mov	r0, r5
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	f000 f81b 	bl	80066aa <_malloc_usable_size_r>
 8006674:	4284      	cmp	r4, r0
 8006676:	4607      	mov	r7, r0
 8006678:	d802      	bhi.n	8006680 <_realloc_r+0x34>
 800667a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800667e:	d812      	bhi.n	80066a6 <_realloc_r+0x5a>
 8006680:	4621      	mov	r1, r4
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff fc24 	bl	8005ed0 <_malloc_r>
 8006688:	4605      	mov	r5, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d0ed      	beq.n	800666a <_realloc_r+0x1e>
 800668e:	42bc      	cmp	r4, r7
 8006690:	4622      	mov	r2, r4
 8006692:	4631      	mov	r1, r6
 8006694:	bf28      	it	cs
 8006696:	463a      	movcs	r2, r7
 8006698:	f7ff ffca 	bl	8006630 <memcpy>
 800669c:	4631      	mov	r1, r6
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff fbae 	bl	8005e00 <_free_r>
 80066a4:	e7e1      	b.n	800666a <_realloc_r+0x1e>
 80066a6:	4635      	mov	r5, r6
 80066a8:	e7df      	b.n	800666a <_realloc_r+0x1e>

080066aa <_malloc_usable_size_r>:
 80066aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ae:	1f18      	subs	r0, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bfbc      	itt	lt
 80066b4:	580b      	ldrlt	r3, [r1, r0]
 80066b6:	18c0      	addlt	r0, r0, r3
 80066b8:	4770      	bx	lr
	...

080066bc <_init>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr

080066c8 <_fini>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr


BlinkLed_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002444  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002574  08002574  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800257c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002588  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002588  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005bbb  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001792  00000000  00000000  00025c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  000273c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c5  00000000  00000000  00027a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b8b  00000000  00000000  00027f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008354  00000000  00000000  0003eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fb1d  00000000  00000000  00046e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001898  00000000  00000000  000c6924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c81bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002538 	.word	0x08002538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002538 	.word	0x08002538

0800014c <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include "CAN_IF.h"

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d102      	bne.n	8000168 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 8000162:	2350      	movs	r3, #80	; 0x50
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <CAN_IF_Transmit_UDS_Request+0x20>
   }
   else{
	   Local_u8SendToNode = 0x60;
 8000168:	2360      	movs	r3, #96	; 0x60
 800016a:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <CAN_IF_Transmit_UDS_Request+0x54>)
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <CAN_IF_Transmit_UDS_Request+0x54>)
 8000174:	2200      	movs	r2, #0
 8000176:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <CAN_IF_Transmit_UDS_Request+0x54>)
 800017c:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <CAN_IF_Transmit_UDS_Request+0x54>)
 8000180:	2201      	movs	r2, #1
 8000182:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000184:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <CAN_IF_Transmit_UDS_Request+0x58>)
 8000186:	79bb      	ldrb	r3, [r7, #6]
 8000188:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <CAN_IF_Transmit_UDS_Request+0x5c>)
 800018c:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <CAN_IF_Transmit_UDS_Request+0x58>)
 800018e:	4904      	ldr	r1, [pc, #16]	; (80001a0 <CAN_IF_Transmit_UDS_Request+0x54>)
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <CAN_IF_Transmit_UDS_Request+0x60>)
 8000192:	f001 f90b 	bl	80013ac <HAL_CAN_AddTxMessage>
 8000196:	4603      	mov	r3, r0
}
 8000198:	4618      	mov	r0, r3
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000c0 	.word	0x200000c0
 80001a4:	200000f4 	.word	0x200000f4
 80001a8:	20000104 	.word	0x20000104
 80001ac:	20000098 	.word	0x20000098

080001b0 <CAN_IF_Trasmit_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Trasmit_Data_Frame(uint8_t Node ,const uint8_t *DataBuffer ,uint8_t DataLength){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	//Check Is buffer NULL
	if(DataBuffer == NULL){
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d101      	bne.n	80001ca <CAN_IF_Trasmit_Data_Frame+0x1a>
		return HAL_ERROR ;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e02b      	b.n	8000222 <CAN_IF_Trasmit_Data_Frame+0x72>
	}
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d102      	bne.n	80001d6 <CAN_IF_Trasmit_Data_Frame+0x26>
	   Local_u8SendToNode = 0x50; //Send to 0x101
 80001d0:	2350      	movs	r3, #80	; 0x50
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	e001      	b.n	80001da <CAN_IF_Trasmit_Data_Frame+0x2a>
   }
   else{
	   Local_u8SendToNode = 0x60; //Send to 0x102
 80001d6:	2360      	movs	r3, #96	; 0x60
 80001d8:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80001dc:	2200      	movs	r2, #0
 80001de:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80001e0:	4b12      	ldr	r3, [pc, #72]	; (800022c <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	4a10      	ldr	r2, [pc, #64]	; (800022c <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80001ea:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = DataLength;  // data length
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80001f0:	6113      	str	r3, [r2, #16]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 80001f2:	2300      	movs	r3, #0
 80001f4:	73bb      	strb	r3, [r7, #14]
 80001f6:	e009      	b.n	800020c <CAN_IF_Trasmit_Data_Frame+0x5c>
	  TxData[index] = *( DataBuffer + index );
 80001f8:	7bbb      	ldrb	r3, [r7, #14]
 80001fa:	683a      	ldr	r2, [r7, #0]
 80001fc:	441a      	add	r2, r3
 80001fe:	7bbb      	ldrb	r3, [r7, #14]
 8000200:	7811      	ldrb	r1, [r2, #0]
 8000202:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000204:	54d1      	strb	r1, [r2, r3]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 8000206:	7bbb      	ldrb	r3, [r7, #14]
 8000208:	3301      	adds	r3, #1
 800020a:	73bb      	strb	r3, [r7, #14]
 800020c:	7bba      	ldrb	r2, [r7, #14]
 800020e:	79bb      	ldrb	r3, [r7, #6]
 8000210:	429a      	cmp	r2, r3
 8000212:	d3f1      	bcc.n	80001f8 <CAN_IF_Trasmit_Data_Frame+0x48>
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <CAN_IF_Trasmit_Data_Frame+0x84>)
 8000216:	4a06      	ldr	r2, [pc, #24]	; (8000230 <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000218:	4904      	ldr	r1, [pc, #16]	; (800022c <CAN_IF_Trasmit_Data_Frame+0x7c>)
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <CAN_IF_Trasmit_Data_Frame+0x88>)
 800021c:	f001 f8c6 	bl	80013ac <HAL_CAN_AddTxMessage>
 8000220:	4603      	mov	r3, r0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	200000c0 	.word	0x200000c0
 8000230:	200000f4 	.word	0x200000f4
 8000234:	20000104 	.word	0x20000104
 8000238:	20000098 	.word	0x20000098

0800023c <CAN_IF_Receive_UDS_Respond>:

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000244:	bf00      	nop
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	f003 0303 	and.w	r3, r3, #3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000256:	4a09      	ldr	r2, [pc, #36]	; (800027c <CAN_IF_Receive_UDS_Respond+0x40>)
 8000258:	2100      	movs	r1, #0
 800025a:	4806      	ldr	r0, [pc, #24]	; (8000274 <CAN_IF_Receive_UDS_Respond+0x38>)
 800025c:	f001 f975 	bl	800154a <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000098 	.word	0x20000098
 8000278:	200000fc 	.word	0x200000fc
 800027c:	200000d8 	.word	0x200000d8

08000280 <Decrypt_Address_Read_Init>:
static GlobalFlag Global_BufferFlag  ;

volatile uint32_t Global_ReadAddress ;

void  Decrypt_Address_Read_Init (void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	Global_ReadAddress  = STORE_AREA_START_ADDRESS ;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <Decrypt_Address_Read_Init+0x14>)
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <Decrypt_Address_Read_Init+0x18>)
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000034 	.word	0x20000034
 8000298:	0800a800 	.word	0x0800a800

0800029c <Decrypt_MainFunction>:

void Decrypt_MainFunction (void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0

	Std_ReturnType status ;
	
	 /*check system state value "Data receive point "*/
		status = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 80002a2:	4820      	ldr	r0, [pc, #128]	; (8000324 <Decrypt_MainFunction+0x88>)
 80002a4:	f000 f9ea 	bl	800067c <Rte_ReadSystemState>
 80002a8:	4603      	mov	r3, r0
 80002aa:	71bb      	strb	r3, [r7, #6]
	
		/* Check if there is an error during read operation */
		if (E_OK == status)
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d133      	bne.n	800031a <Decrypt_MainFunction+0x7e>
		{			
			/* make sure that system state is Decrypt  */
			if (SYS_DECRYPT == Global_SystemState)
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <Decrypt_MainFunction+0x88>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d12f      	bne.n	800031a <Decrypt_MainFunction+0x7e>
			{
				  /*Read buffer Flag  "Data receive point "*/
			    status = RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Global_BufferFlag);
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <Decrypt_MainFunction+0x8c>)
 80002bc:	f000 f998 	bl	80005f0 <Rte_ReadDecryptedDataBufferFlag>
 80002c0:	4603      	mov	r3, r0
 80002c2:	71bb      	strb	r3, [r7, #6]
			   	/* Check if there is an error during read operation */
		        if (E_OK == status)
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d127      	bne.n	800031a <Decrypt_MainFunction+0x7e>
		        {
					   /* make sure that buffer state is not set  */
		            if (BUFFER_NOT_SET == Global_BufferFlag)
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <Decrypt_MainFunction+0x8c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d123      	bne.n	800031a <Decrypt_MainFunction+0x7e>
			        {
	                              /*access piont to decrypt SWC*/								
			      	          /*Read Decrypted Data from flash rom*/
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	e00f      	b.n	80002f8 <Decrypt_MainFunction+0x5c>
						{
		                	Global_PlainDataPtr[Local_Counter] = (*(volatile uint8_t*)(Global_ReadAddress) ) ;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <Decrypt_MainFunction+0x90>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	b2d1      	uxtb	r1, r2
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <Decrypt_MainFunction+0x94>)
 80002e6:	54d1      	strb	r1, [r2, r3]
							Global_ReadAddress++;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <Decrypt_MainFunction+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4a0f      	ldr	r2, [pc, #60]	; (800032c <Decrypt_MainFunction+0x90>)
 80002f0:	6013      	str	r3, [r2, #0]
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	3301      	adds	r3, #1
 80002f6:	71fb      	strb	r3, [r7, #7]
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2b07      	cmp	r3, #7
 80002fc:	d9ec      	bls.n	80002d8 <Decrypt_MainFunction+0x3c>
						}
              
						if( E_OK == status )
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d10a      	bne.n	800031a <Decrypt_MainFunction+0x7e>
//							    if( E_OK == status )
//                                {
//			                        /*Write decrypted buffer to decrypt port "Data send point "*/
//                                    status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
//								}
							status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
 8000304:	480a      	ldr	r0, [pc, #40]	; (8000330 <Decrypt_MainFunction+0x94>)
 8000306:	f000 f909 	bl	800051c <Rte_WriteDecryptedDataBuffer>
 800030a:	4603      	mov	r3, r0
 800030c:	71bb      	strb	r3, [r7, #6]
							 /*Change buffer flag value to set "Data send point "*/
							RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(BUFFER_SET);
 800030e:	2001      	movs	r0, #1
 8000310:	f000 f94c 	bl	80005ac <Rte_WriteDecryptedDataBufferFlag>

							 /*Change system flag to SEND , "Data send point "*/
							RTE_WRITE_SYSTEM_STATE(SYS_SEND_UPDATE);
 8000314:	2004      	movs	r0, #4
 8000316:	f000 f98f 	bl	8000638 <Rte_WriteSystemState>
			{
									/* Do nothing */
							/*system state is not Decrypt*/							
			}						
        }				      
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000030 	.word	0x20000030
 8000328:	20000031 	.word	0x20000031
 800032c:	20000034 	.word	0x20000034
 8000330:	20000028 	.word	0x20000028

08000334 <Rte_WriteNodeId>:

/**************************************************************************/
/*                         NodeId Port                                    */
/**************************************************************************/
Std_ReturnType Rte_WriteNodeId (uint8_t Cpy_NodeId)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800033e:	2300      	movs	r3, #0
 8000340:	73fb      	strb	r3, [r7, #15]
	
	if (Global_NodeIdPortState == IDLE)
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <Rte_WriteNodeId+0x3c>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d109      	bne.n	800035e <Rte_WriteNodeId+0x2a>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <Rte_WriteNodeId+0x3c>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_NodeId = Cpy_NodeId ; 
 8000350:	4a08      	ldr	r2, [pc, #32]	; (8000374 <Rte_WriteNodeId+0x40>)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <Rte_WriteNodeId+0x3c>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	e001      	b.n	8000362 <Rte_WriteNodeId+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800035e:	2301      	movs	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000362:	7bfb      	ldrb	r3, [r7, #15]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	2000004c 	.word	0x2000004c
 8000374:	20000040 	.word	0x20000040

08000378 <Rte_ReadNodeId>:

Std_ReturnType Rte_ReadNodeId (uint8_t *Cpy_NodeId)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_NodeIdPortState == IDLE) && (Cpy_NodeId != NULL_PTR))
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <Rte_ReadNodeId+0x40>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10d      	bne.n	80003a8 <Rte_ReadNodeId+0x30>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00a      	beq.n	80003a8 <Rte_ReadNodeId+0x30>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <Rte_ReadNodeId+0x40>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_NodeId) = Global_NodeId ; 
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <Rte_ReadNodeId+0x44>)
 800039a:	781a      	ldrb	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <Rte_ReadNodeId+0x40>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
 80003a6:	e001      	b.n	80003ac <Rte_ReadNodeId+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80003a8:	2301      	movs	r3, #1
 80003aa:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	2000004c 	.word	0x2000004c
 80003bc:	20000040 	.word	0x20000040

080003c0 <Rte_WriteCodeSize>:

/**************************************************************************/
/*                         CodeSize Port                                  */
/**************************************************************************/
Std_ReturnType Rte_WriteCodeSize(uint32_t Cpy_CodeSize)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
	
	if (Global_CodeSizePortState == IDLE)
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <Rte_WriteCodeSize+0x38>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d109      	bne.n	80003e8 <Rte_WriteCodeSize+0x28>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <Rte_WriteCodeSize+0x38>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_CodeSizeValue = Cpy_CodeSize ; 
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <Rte_WriteCodeSize+0x3c>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <Rte_WriteCodeSize+0x38>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	e001      	b.n	80003ec <Rte_WriteCodeSize+0x2c>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80003e8:	2301      	movs	r3, #1
 80003ea:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	2000004b 	.word	0x2000004b
 80003fc:	2000003c 	.word	0x2000003c

08000400 <Rte_ReadCodeSize>:

Std_ReturnType Rte_ReadCodeSize(uint32_t *Cpy_CodeSize)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000408:	2300      	movs	r3, #0
 800040a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_CodeSizePortState == IDLE) && (Cpy_CodeSize != NULL_PTR))
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <Rte_ReadCodeSize+0x40>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d10d      	bne.n	8000430 <Rte_ReadCodeSize+0x30>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d00a      	beq.n	8000430 <Rte_ReadCodeSize+0x30>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <Rte_ReadCodeSize+0x40>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_CodeSize) = Global_CodeSizeValue ; 
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <Rte_ReadCodeSize+0x44>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <Rte_ReadCodeSize+0x40>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	e001      	b.n	8000434 <Rte_ReadCodeSize+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000430:	2301      	movs	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	2000004b 	.word	0x2000004b
 8000444:	2000003c 	.word	0x2000003c

08000448 <Rte_ReadCrc>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadCrc(uint32_t *Cpy_Crc)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]

	if ( (Global_CrcPortState == IDLE) && (Cpy_Crc != NULL_PTR) )
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <Rte_ReadCrc+0x40>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10d      	bne.n	8000478 <Rte_ReadCrc+0x30>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00a      	beq.n	8000478 <Rte_ReadCrc+0x30>
	{
		/* Lock the port to write */
		Global_CrcPortState = BUSY ;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <Rte_ReadCrc+0x40>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_Crc) = Global_CrcValue ;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <Rte_ReadCrc+0x44>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CrcPortState = IDLE ;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <Rte_ReadCrc+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e001      	b.n	800047c <Rte_ReadCrc+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000478:	2301      	movs	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	2000004a 	.word	0x2000004a
 800048c:	20000038 	.word	0x20000038

08000490 <Rte_WriteHeaderAckFlag>:

/**************************************************************************/
/*                         Header Ack Flag Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteHeaderAckFlag(FlagType Cpy_HeaderAckFlag)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]
	
	if (Global_HeaderAckFlagState == IDLE)
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <Rte_WriteHeaderAckFlag+0x3c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d109      	bne.n	80004ba <Rte_WriteHeaderAckFlag+0x2a>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <Rte_WriteHeaderAckFlag+0x3c>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_HeaderAckFlag = Cpy_HeaderAckFlag ; 
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <Rte_WriteHeaderAckFlag+0x40>)
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <Rte_WriteHeaderAckFlag+0x3c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e001      	b.n	80004be <Rte_WriteHeaderAckFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80004ba:	2301      	movs	r3, #1
 80004bc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80004be:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	2000004d 	.word	0x2000004d
 80004d0:	20000041 	.word	0x20000041

080004d4 <Rte_ReadHeaderAckFlag>:

Std_ReturnType Rte_ReadHeaderAckFlag(FlagType *Cpy_HeaderAckFlag)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_HeaderAckFlagState == IDLE) && (Cpy_HeaderAckFlag != NULL_PTR) )
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <Rte_ReadHeaderAckFlag+0x40>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10d      	bne.n	8000504 <Rte_ReadHeaderAckFlag+0x30>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00a      	beq.n	8000504 <Rte_ReadHeaderAckFlag+0x30>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <Rte_ReadHeaderAckFlag+0x40>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_HeaderAckFlag) = Global_HeaderAckFlag ; 
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <Rte_ReadHeaderAckFlag+0x44>)
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <Rte_ReadHeaderAckFlag+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e001      	b.n	8000508 <Rte_ReadHeaderAckFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000504:	2301      	movs	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000508:	7bfb      	ldrb	r3, [r7, #15]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	2000004d 	.word	0x2000004d
 8000518:	20000041 	.word	0x20000041

0800051c <Rte_WriteDecryptedDataBuffer>:

/**************************************************************************/
/*                         Decrypted Data Buffer Port                     */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBuffer(uint8_t *Cpy_DecryptedDataBufferPtr)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
	
	if ((Global_DecryptedDataBufferState == IDLE)&& (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <Rte_WriteDecryptedDataBuffer+0x40>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10c      	bne.n	800054a <Rte_WriteDecryptedDataBuffer+0x2e>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d009      	beq.n	800054a <Rte_WriteDecryptedDataBuffer+0x2e>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <Rte_WriteDecryptedDataBuffer+0x40>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferPtr = Cpy_DecryptedDataBufferPtr ; 
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <Rte_WriteDecryptedDataBuffer+0x44>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <Rte_WriteDecryptedDataBuffer+0x40>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e001      	b.n	800054e <Rte_WriteDecryptedDataBuffer+0x32>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000004e 	.word	0x2000004e
 8000560:	20000044 	.word	0x20000044

08000564 <Rte_ReadDecryptedDataBuffer>:

Std_ReturnType Rte_ReadDecryptedDataBuffer(uint8_t **Cpy_DecryptedDataBufferPtr)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferState == IDLE) && (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10d      	bne.n	8000594 <Rte_ReadDecryptedDataBuffer+0x30>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <Rte_ReadDecryptedDataBuffer+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferPtr) = Global_DecryptedDataBufferPtr ; 
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <Rte_ReadDecryptedDataBuffer+0x44>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <Rte_ReadDecryptedDataBuffer+0x40>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e001      	b.n	8000598 <Rte_ReadDecryptedDataBuffer+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	2000004e 	.word	0x2000004e
 80005a8:	20000044 	.word	0x20000044

080005ac <Rte_WriteDecryptedDataBufferFlag>:

/**************************************************************************/
/*                         Decrypted Data Buffer Flag Port                */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBufferFlag(FlagType Cpy_DecryptedDataBufferFlag)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
	
	if (Global_DecryptedDataBufferFlagState == IDLE)
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <Rte_WriteDecryptedDataBufferFlag+0x2a>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferFlag = Cpy_DecryptedDataBufferFlag ; 
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <Rte_WriteDecryptedDataBufferFlag+0x40>)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e001      	b.n	80005da <Rte_WriteDecryptedDataBufferFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000004f 	.word	0x2000004f
 80005ec:	20000048 	.word	0x20000048

080005f0 <Rte_ReadDecryptedDataBufferFlag>:

Std_ReturnType Rte_ReadDecryptedDataBufferFlag(FlagType *Cpy_DecryptedDataBufferFlag)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferFlagState == IDLE) && (Cpy_DecryptedDataBufferFlag != NULL_PTR) )
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10d      	bne.n	8000620 <Rte_ReadDecryptedDataBufferFlag+0x30>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <Rte_ReadDecryptedDataBufferFlag+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferFlag) = Global_DecryptedDataBufferFlag ; 
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Rte_ReadDecryptedDataBufferFlag+0x44>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e001      	b.n	8000624 <Rte_ReadDecryptedDataBufferFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	2000004f 	.word	0x2000004f
 8000634:	20000048 	.word	0x20000048

08000638 <Rte_WriteSystemState>:

/**************************************************************************/
/*                         SystemState Port                               */
/**************************************************************************/
Std_ReturnType Rte_WriteSystemState(SystemStateType Cpy_SystemState)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000642:	2300      	movs	r3, #0
 8000644:	73fb      	strb	r3, [r7, #15]
	
	if (Global_SystemStateMachineState == IDLE)
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <Rte_WriteSystemState+0x3c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <Rte_WriteSystemState+0x2a>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <Rte_WriteSystemState+0x3c>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_SystemStateMachine = Cpy_SystemState ; 
 8000654:	4a08      	ldr	r2, [pc, #32]	; (8000678 <Rte_WriteSystemState+0x40>)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <Rte_WriteSystemState+0x3c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e001      	b.n	8000666 <Rte_WriteSystemState+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000050 	.word	0x20000050
 8000678:	20000049 	.word	0x20000049

0800067c <Rte_ReadSystemState>:

Std_ReturnType Rte_ReadSystemState(SystemStateType *Cpy_SystemState)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_SystemStateMachineState == IDLE) && (Cpy_SystemState != NULL_PTR))
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <Rte_ReadSystemState+0x40>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10d      	bne.n	80006ac <Rte_ReadSystemState+0x30>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <Rte_ReadSystemState+0x30>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <Rte_ReadSystemState+0x40>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_SystemState) = Global_SystemStateMachine ; 
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <Rte_ReadSystemState+0x44>)
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <Rte_ReadSystemState+0x40>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e001      	b.n	80006b0 <Rte_ReadSystemState+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000050 	.word	0x20000050
 80006c0:	20000049 	.word	0x20000049

080006c4 <Transmit_InitializeModule>:
*******************************************************************************/

/*****************************Module Function Definitions.*********************/

Std_ReturnType Transmit_InitializeModule(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
   // Initalize static variable in this module
   Static_uint32CodeSize                       = INITIALIZE_WITH_ZERO;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <Transmit_InitializeModule+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                          = INITIALIZE_WITH_ZERO;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <Transmit_InitializeModule+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter                 = INITIALIZE_WITH_ZERO;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <Transmit_InitializeModule+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets                = INITIALIZE_WITH_ZERO;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <Transmit_InitializeModule+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket          = INITIALIZE_WITH_ZERO;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Transmit_InitializeModule+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
   // Initialize current state variable
   Static_StateVariable                        = IDLE_STATE;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <Transmit_InitializeModule+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
   // Fill state array with function represent each state
   Static_ArrayOfStates[IDLE_STATE]            = Transmit_IdleState;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <Transmit_InitializeModule+0x64>)
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <Transmit_InitializeModule+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
   Static_ArrayOfStates[GET_TRANSMIT_HEADER]   = Transmit_GetTransmitHeader;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <Transmit_InitializeModule+0x64>)
 80006f4:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <Transmit_InitializeModule+0x6c>)
 80006f6:	605a      	str	r2, [r3, #4]
   Static_ArrayOfStates[CONSUME_TRANSMIT_DATA] = Transmit_ConsumeTransmitData;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <Transmit_InitializeModule+0x64>)
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <Transmit_InitializeModule+0x70>)
 80006fc:	609a      	str	r2, [r3, #8]
   Static_ArrayOfStates[FINISHING_STATE]       = Transmit_FinishingState;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <Transmit_InitializeModule+0x64>)
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <Transmit_InitializeModule+0x74>)
 8000702:	60da      	str	r2, [r3, #12]

   return E_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000054 	.word	0x20000054
 8000714:	20000058 	.word	0x20000058
 8000718:	2000005a 	.word	0x2000005a
 800071c:	2000005c 	.word	0x2000005c
 8000720:	2000005e 	.word	0x2000005e
 8000724:	2000005f 	.word	0x2000005f
 8000728:	20000060 	.word	0x20000060
 800072c:	08000771 	.word	0x08000771
 8000730:	080007bd 	.word	0x080007bd
 8000734:	08000861 	.word	0x08000861
 8000738:	08000979 	.word	0x08000979

0800073c <Transmit_MainFunction>:

Std_ReturnType Transmit_MainFunction(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
   Std_ReturnType       Local_ReturnStatus = E_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
   State_PtrToFunction  RunState;
   RunState           = Static_ArrayOfStates[Static_StateVariable];
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <Transmit_MainFunction+0x2c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <Transmit_MainFunction+0x30>)
 800074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000752:	603b      	str	r3, [r7, #0]
   Local_ReturnStatus = RunState(NULL_PTR);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2000      	movs	r0, #0
 8000758:	4798      	blx	r3
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
   return Local_ReturnStatus;
 800075e:	79fb      	ldrb	r3, [r7, #7]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000005f 	.word	0x2000005f
 800076c:	20000060 	.word	0x20000060

08000770 <Transmit_IdleState>:

/*****************************Private Functions' Definitions*******************************/

/*****************************Functions Represent states***********************************/
static Std_ReturnType Transmit_IdleState(void *Cpy_voidPtr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus       = E_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
   FlagType       Local_uint8HeaderFlagValue  = HEADER_NOT_SET;
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
   // Get Header Flag Value.
   Local_ReturnStatus = RTE_READ_HEADER_ACK_FLAG(&Local_uint8HeaderFlagValue);
 8000780:	f107 030e 	add.w	r3, r7, #14
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fea5 	bl	80004d4 <Rte_ReadHeaderAckFlag>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]
   if(E_OK == Local_ReturnStatus)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d109      	bne.n	80007a8 <Transmit_IdleState+0x38>
   {
      // Check The Header Flag Value
      if(HEADER_SET == Local_uint8HeaderFlagValue)
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d103      	bne.n	80007a2 <Transmit_IdleState+0x32>
      {
         // Go to Get and Transmit Header State.
         Static_StateVariable = GET_TRANSMIT_HEADER;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <Transmit_IdleState+0x48>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e004      	b.n	80007ac <Transmit_IdleState+0x3c>
      }
      else
      {
         Local_ReturnStatus = HEADER_NOT_SET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e001      	b.n	80007ac <Transmit_IdleState+0x3c>
      }
   }
   else
   {
      Local_ReturnStatus = E_NOT_OK;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000005f 	.word	0x2000005f

080007bc <Transmit_GetTransmitHeader>:

static Std_ReturnType Transmit_GetTransmitHeader(void *Cpy_voidPtr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus                            = E_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t        Local_HeaderBuffer[HEADER_INFORMATION_SIZE]   = {INITIALIZE_WITH_ZERO};
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
   uint8_t        Local_uint8NodeId                           	= INITIALIZE_WITH_ZERO;
 80007d2:	2300      	movs	r3, #0
 80007d4:	76fb      	strb	r3, [r7, #27]
   uint32_t       Local_uint32CodeSize                       	= INITIALIZE_WITH_ZERO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
   uint32_t       Local_uint32CrcValue                      	= INITIALIZE_WITH_ZERO;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
   uint8_t        Local_uint8ReceivedAck                        = INITIALIZE_WITH_ZERO;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
   // Consume Header Information.     
   Transmit_ConsumeHeader(&Local_uint8NodeId, &Local_uint32CodeSize, &Local_uint32CrcValue);
 80007e2:	f107 0210 	add.w	r2, r7, #16
 80007e6:	f107 0114 	add.w	r1, r7, #20
 80007ea:	f107 031b 	add.w	r3, r7, #27
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f900 	bl	80009f4 <Transmit_ConsumeHeader>
   // Save Size and Node Id.
   Transmit_SaveHeader(&Local_uint8NodeId, &Local_uint32CodeSize);
 80007f4:	f107 0214 	add.w	r2, r7, #20
 80007f8:	f107 031b 	add.w	r3, r7, #27
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f94e 	bl	8000aa0 <Transmit_SaveHeader>
   // Handle header information
   Transmit_HandleHeader(Local_uint32CodeSize, Local_uint32CrcValue, Local_HeaderBuffer);
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	6939      	ldr	r1, [r7, #16]
 8000808:	f107 021c 	add.w	r2, r7, #28
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f90d 	bl	8000a2c <Transmit_HandleHeader>
//
//   // Check received Ack
//   if(UDS_MCU_ACCEPT_UPGRADE_REQUEST == Local_uint8ReceivedAck)
//   {
      // Request sending Header.
      CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_GWY_REQUEST_SENDING_HEADER);
 8000812:	7efb      	ldrb	r3, [r7, #27]
 8000814:	2134      	movs	r1, #52	; 0x34
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fc98 	bl	800014c <CAN_IF_Transmit_UDS_Request>

      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800081c:	f107 030f 	add.w	r3, r7, #15
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fd0b 	bl	800023c <CAN_IF_Receive_UDS_Respond>

      if (UDS_MCU_ACCEPT_RECEIVING_HEADER == Local_uint8ReceivedAck)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b73      	cmp	r3, #115	; 0x73
 800082a:	d106      	bne.n	800083a <Transmit_GetTransmitHeader+0x7e>
      {
         // Sending header.
    	 CAN_IF_Trasmit_Data_Frame(Local_uint8NodeId, Local_HeaderBuffer, HEADER_INFORMATION_SIZE);
 800082c:	7efb      	ldrb	r3, [r7, #27]
 800082e:	f107 011c 	add.w	r1, r7, #28
 8000832:	2208      	movs	r2, #8
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcbb 	bl	80001b0 <CAN_IF_Trasmit_Data_Frame>
//   else
//   {
//      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
//   }
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800083a:	f107 030f 	add.w	r3, r7, #15
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcfc 	bl	800023c <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED == Local_uint8ReceivedAck)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b74      	cmp	r3, #116	; 0x74
 8000848:	d102      	bne.n	8000850 <Transmit_GetTransmitHeader+0x94>
   {
	   Static_StateVariable = CONSUME_TRANSMIT_DATA;
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <Transmit_GetTransmitHeader+0xa0>)
 800084c:	2202      	movs	r2, #2
 800084e:	701a      	strb	r2, [r3, #0]
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 8000850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000854:	4618      	mov	r0, r3
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000005f 	.word	0x2000005f

08000860 <Transmit_ConsumeTransmitData>:

static Std_ReturnType Transmit_ConsumeTransmitData(void *Cpy_voidPtr)
{    
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
   FlagType         Local_uint8BufferFlagValue              = BUFFER_NOT_SET;
 8000868:	2300      	movs	r3, #0
 800086a:	75fb      	strb	r3, [r7, #23]
   uint8_t          *Local_uint8DataBuffer                  = NULL_PTR ;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
   uint8_t          Local_uint8ReceivedAck                  = INITIALIZE_WITH_ZERO;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

   // Calculate number of packets and number of bytes in the last packet.
   Static_uint16NumberOfPackets            = (Static_uint32CodeSize) / (DATA_BUFFER_SIZE);
 8000874:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <Transmit_ConsumeTransmitData+0x100>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <Transmit_ConsumeTransmitData+0x104>)
 800087e:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket      = (Static_uint32CodeSize) % (DATA_BUFFER_SIZE);
 8000880:	4b37      	ldr	r3, [pc, #220]	; (8000960 <Transmit_ConsumeTransmitData+0x100>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <Transmit_ConsumeTransmitData+0x108>)
 800088e:	701a      	strb	r2, [r3, #0]
   // Get Buffer Flag Value.
   RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Local_uint8BufferFlagValue);
 8000890:	f107 0317 	add.w	r3, r7, #23
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff feab 	bl	80005f0 <Rte_ReadDecryptedDataBufferFlag>
   // Check The Buffer Flag Value
   if(BUFFER_SET == Local_uint8BufferFlagValue)
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d159      	bne.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
   {
      // Consume Data and Increase packet counter by 1
      RTE_READ_DECRYPTED_DATA_BUFFER(&Local_uint8DataBuffer);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe5d 	bl	8000564 <Rte_ReadDecryptedDataBuffer>
      // Request Sending line of code code.
      CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_REQUEST_SENDING_PACKET_OF_CODE);
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <Transmit_ConsumeTransmitData+0x10c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2136      	movs	r1, #54	; 0x36
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc4b 	bl	800014c <CAN_IF_Transmit_UDS_Request>
      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 80008b6:	f107 030f 	add.w	r3, r7, #15
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fcbe 	bl	800023c <CAN_IF_Receive_UDS_Respond>
      // Check The node ack
      if(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE == Local_uint8ReceivedAck)
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b75      	cmp	r3, #117	; 0x75
 80008c4:	d146      	bne.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
      {
         // condition to know are we will send the last packet or ordinary packet.
         if(Static_uint16PacketsCounter < Static_uint16NumberOfPackets)
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <Transmit_ConsumeTransmitData+0x110>)
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <Transmit_ConsumeTransmitData+0x104>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d229      	bcs.n	8000926 <Transmit_ConsumeTransmitData+0xc6>
         {
            // Sending 64 byte of DATA_BUFFER_SIZE
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, DATA_BUFFER_SIZE);
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <Transmit_ConsumeTransmitData+0x10c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	6939      	ldr	r1, [r7, #16]
 80008d8:	2208      	movs	r2, #8
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc68 	bl	80001b0 <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
        	CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 80008e0:	f107 030f 	add.w	r3, r7, #15
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fca9 	bl	800023c <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b76      	cmp	r3, #118	; 0x76
 80008ee:	d131      	bne.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
            {
               // Increase packet counter by 1
				Static_uint16PacketsCounter++;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <Transmit_ConsumeTransmitData+0x110>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <Transmit_ConsumeTransmitData+0x110>)
 80008fa:	801a      	strh	r2, [r3, #0]
				if ((Static_uint16PacketsCounter == Static_uint16NumberOfPackets)
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <Transmit_ConsumeTransmitData+0x110>)
 80008fe:	881a      	ldrh	r2, [r3, #0]
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <Transmit_ConsumeTransmitData+0x104>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d107      	bne.n	8000918 <Transmit_ConsumeTransmitData+0xb8>
					&& (Static_uint8NumOfBytesInLastPacket == ZERO_BYTE))
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <Transmit_ConsumeTransmitData+0x108>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d103      	bne.n	8000918 <Transmit_ConsumeTransmitData+0xb8>
				{
					Static_StateVariable = FINISHING_STATE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <Transmit_ConsumeTransmitData+0x114>)
 8000912:	2203      	movs	r2, #3
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e01d      	b.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
				}
				else
				{
					// Reset Buffer flag
					RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe47 	bl	80005ac <Rte_WriteDecryptedDataBufferFlag>
					// Change System State To De_crypt state.
					RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 800091e:	2003      	movs	r0, #3
 8000920:	f7ff fe8a 	bl	8000638 <Rte_WriteSystemState>
 8000924:	e016      	b.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
            else
            {
               //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
            }
         }
         else if (Static_uint8NumOfBytesInLastPacket != 0)
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <Transmit_ConsumeTransmitData+0x108>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d012      	beq.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
         {
            // Sending the rest of data
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, Static_uint8NumOfBytesInLastPacket);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <Transmit_ConsumeTransmitData+0x10c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	6939      	ldr	r1, [r7, #16]
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <Transmit_ConsumeTransmitData+0x108>)
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc39 	bl	80001b0 <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
            CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800093e:	f107 030f 	add.w	r3, r7, #15
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc7a 	bl	800023c <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b76      	cmp	r3, #118	; 0x76
 800094c:	d102      	bne.n	8000954 <Transmit_ConsumeTransmitData+0xf4>
            {
               // Go to Finish State.
               Static_StateVariable = FINISHING_STATE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <Transmit_ConsumeTransmitData+0x114>)
 8000950:	2203      	movs	r2, #3
 8000952:	701a      	strb	r2, [r3, #0]
         //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
      } 
   }  
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000054 	.word	0x20000054
 8000964:	2000005c 	.word	0x2000005c
 8000968:	2000005e 	.word	0x2000005e
 800096c:	20000058 	.word	0x20000058
 8000970:	2000005a 	.word	0x2000005a
 8000974:	2000005f 	.word	0x2000005f

08000978 <Transmit_FinishingState>:

static Std_ReturnType Transmit_FinishingState(void *Cpy_voidPtr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
   uint8_t Local_uint8_tReceivedAck = INITIALIZE_WITH_ZERO;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
   // Reset Buffer flag
   RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fe11 	bl	80005ac <Rte_WriteDecryptedDataBufferFlag>
   // Ack node of the end of code transmission
   CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <Transmit_FinishingState+0x64>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2137      	movs	r1, #55	; 0x37
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fbdb 	bl	800014c <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8_tReceivedAck);
 8000996:	f107 030f 	add.w	r3, r7, #15
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc4e 	bl	800023c <CAN_IF_Receive_UDS_Respond>
   if(UDS_MCU_ACKNOWLEDGE_RECEIVED_CODE == Local_uint8_tReceivedAck)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b77      	cmp	r3, #119	; 0x77
 80009a4:	d105      	bne.n	80009b2 <Transmit_FinishingState+0x3a>
   {
      // Go To Idle State Here
      Static_StateVariable = IDLE_STATE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <Transmit_FinishingState+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
      // Change System State To System Done Update
      RTE_WRITE_SYSTEM_STATE(SYS_DONE_UPDATE);
 80009ac:	2005      	movs	r0, #5
 80009ae:	f7ff fe43 	bl	8000638 <Rte_WriteSystemState>
   }
	 	// Reinit variables 
   Static_uint32CodeSize              = INITIALIZE_WITH_ZERO;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <Transmit_FinishingState+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                 = INITIALIZE_WITH_ZERO;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <Transmit_FinishingState+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter        = INITIALIZE_WITH_ZERO;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <Transmit_FinishingState+0x70>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets       = INITIALIZE_WITH_ZERO;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <Transmit_FinishingState+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket = INITIALIZE_WITH_ZERO;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <Transmit_FinishingState+0x78>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000058 	.word	0x20000058
 80009e0:	2000005f 	.word	0x2000005f
 80009e4:	20000054 	.word	0x20000054
 80009e8:	2000005a 	.word	0x2000005a
 80009ec:	2000005c 	.word	0x2000005c
 80009f0:	2000005e 	.word	0x2000005e

080009f4 <Transmit_ConsumeHeader>:

/*******************************Auxiliary Private Function***************************/

static Std_ReturnType Transmit_ConsumeHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size,uint32_t *Cpy_Crc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
   Std_ReturnType Local_ReturnStatus = E_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	75fb      	strb	r3, [r7, #23]
   // Consume Header Information.     
   Local_ReturnStatus                = RTE_READ_NODE_ID  (Cpy_NodeId);
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fcb7 	bl	8000378 <Rte_ReadNodeId>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CODE_SIZE(Cpy_Size);
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f7ff fcf6 	bl	8000400 <Rte_ReadCodeSize>
 8000a14:	4603      	mov	r3, r0
 8000a16:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CRC_VALUE(Cpy_Crc);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fd15 	bl	8000448 <Rte_ReadCrc>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
   return Local_ReturnStatus;
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <Transmit_HandleHeader>:

static Std_ReturnType Transmit_HandleHeader(uint32_t Cpy_Size,uint32_t Cpy_Crc,uint8_t *Cpy_PtrToBytes)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
   // Convert code size into bytes and store it in buffer.
   Cpy_PtrToBytes[FIRST_BYTE]   = (Cpy_Size & GET_BYTE);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SECOND_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	0a1a      	lsrs	r2, r3, #8
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[THIRD_BYTE]   = ((Cpy_Size >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	0c1a      	lsrs	r2, r3, #16
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3302      	adds	r3, #2
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[FOURTH_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	0e1a      	lsrs	r2, r3, #24
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	701a      	strb	r2, [r3, #0]
   // Convert CRC Value into bytes and store it in buffer.
   Cpy_PtrToBytes[FIFTH_BYTE]   = (Cpy_Crc  & GET_BYTE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SIXTH_BYTE]   = ((Cpy_Crc  >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	0a1a      	lsrs	r2, r3, #8
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3305      	adds	r3, #5
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SEVENTH_BYTE] = ((Cpy_Crc  >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	0c1a      	lsrs	r2, r3, #16
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3306      	adds	r3, #6
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[EIGHTH_BYTE]  = ((Cpy_Crc  >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	0e1a      	lsrs	r2, r3, #24
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3307      	adds	r3, #7
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	701a      	strb	r2, [r3, #0]
   return E_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
	...

08000aa0 <Transmit_SaveHeader>:

static Std_ReturnType Transmit_SaveHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
   // Store Node Id To Use It to determinr the node.
   Static_uint8NodeId    = *Cpy_NodeId;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <Transmit_SaveHeader+0x28>)
 8000ab0:	701a      	strb	r2, [r3, #0]
   // Store Size To Use It to calculate number of packts.
   Static_uint32CodeSize = *Cpy_Size;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <Transmit_SaveHeader+0x2c>)
 8000ab8:	6013      	str	r3, [r2, #0]
   return E_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000058 	.word	0x20000058
 8000acc:	20000054 	.word	0x20000054

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 f9ff 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f829 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f000 f8c9 	bl	8000c74 <MX_GPIO_Init>
  MX_CAN_Init();
 8000ae2:	f000 f86d 	bl	8000bc0 <MX_CAN_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  //Transmit_InitializeModule();
  //uint8_t state ;

  HAL_CAN_Start(&hcan);
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <main+0x5c>)
 8000ae8:	f000 fc1c 	bl	8001324 <HAL_CAN_Start>


  Transmit_InitializeModule();
 8000aec:	f7ff fdea 	bl	80006c4 <Transmit_InitializeModule>
  Decrypt_Address_Read_Init();
 8000af0:	f7ff fbc6 	bl	8000280 <Decrypt_Address_Read_Init>
  /* USER CODE END 2 */

	RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f7ff fd9f 	bl	8000638 <Rte_WriteSystemState>
	RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fcc8 	bl	8000490 <Rte_WriteHeaderAckFlag>
	RTE_WRITE_NODE_ID(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fc17 	bl	8000334 <Rte_WriteNodeId>
	RTE_WRITE_CODE_SIZE(0x12);
 8000b06:	2012      	movs	r0, #18
 8000b08:	f7ff fc5a 	bl	80003c0 <Rte_WriteCodeSize>
  while (1)
  {

	  while(1){

			RTE_READ_SYSTEM_STATE(&state);
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fdb4 	bl	800067c <Rte_ReadSystemState>
//			if (state == SYS_REC_UPDATE){
//				ReceiveUpdate_MainFunction();
//			}
			if (state == SYS_DECRYPT)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d102      	bne.n	8000b20 <main+0x50>
			{
				Decrypt_MainFunction();
 8000b1a:	f7ff fbbf 	bl	800029c <Decrypt_MainFunction>
 8000b1e:	e7f5      	b.n	8000b0c <main+0x3c>
			}
			else if (state == SYS_SEND_UPDATE)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d1f2      	bne.n	8000b0c <main+0x3c>
			{
				Transmit_MainFunction();
 8000b26:	f7ff fe09 	bl	800073c <Transmit_MainFunction>
			RTE_READ_SYSTEM_STATE(&state);
 8000b2a:	e7ef      	b.n	8000b0c <main+0x3c>
 8000b2c:	20000098 	.word	0x20000098

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fcce 	bl	80024e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b52:	2309      	movs	r3, #9
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 f8d1 	bl	8001d24 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f8d8 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fb3e 	bl	8002228 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000bb2:	f000 f8c3 	bl	8000d3c <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3740      	adds	r7, #64	; 0x40
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <MX_CAN_Init+0xac>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000be2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c10:	4815      	ldr	r0, [pc, #84]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000c12:	f000 f9c3 	bl	8000f9c <HAL_CAN_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f000 f88e 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //Initialize Variable for CAN
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000c5c:	4904      	ldr	r1, [pc, #16]	; (8000c70 <MX_CAN_Init+0xb0>)
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <MX_CAN_Init+0xa8>)
 8000c60:	f000 fa97 	bl	8001192 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000098 	.word	0x20000098
 8000c6c:	40006400 	.word	0x40006400
 8000c70:	20000070 	.word	0x20000070

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|IRQ_LED_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <MX_GPIO_Init+0xbc>)
 8000cd8:	f000 ffea 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin IRQ_LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin|IRQ_LED_Pin;
 8000cdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <MX_GPIO_Init+0xbc>)
 8000cf6:	f000 fe57 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_1_Pin */
  GPIO_InitStruct.Pin = IRQ_1_Pin;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_GPIO_Init+0xc0>)
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <MX_GPIO_Init+0xc4>)
 8000d0e:	f000 fe4b 	bl	80019a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2007      	movs	r0, #7
 8000d18:	f000 fe0f 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d1c:	2007      	movs	r0, #7
 8000d1e:	f000 fe28 	bl	8001972 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40011000 	.word	0x40011000
 8000d34:	10110000 	.word	0x10110000
 8000d38:	40010800 	.word	0x40010800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_MspInit+0x40>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_MspInit+0x40>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_MspInit+0x40>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x40>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_MspInit+0x40>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_MspInit+0x40>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <HAL_CAN_MspInit+0x8c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d131      	bne.n	8000e10 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_CAN_MspInit+0x90>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <HAL_CAN_MspInit+0x94>)
 8000df2:	f000 fdd9 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_CAN_MspInit+0x94>)
 8000e0c:	f000 fdcc 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40006400 	.word	0x40006400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010800 	.word	0x40010800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f87b 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_1_Pin);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 ff32 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff fff8 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e92:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea8:	4c09      	ldr	r4, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f001 fb1b 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fe09 	bl	8000ad0 <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec8:	0800257c 	.word	0x0800257c
  ldr r2, =_sbss
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed0:	2000010c 	.word	0x2000010c

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 fd1b 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff ff28 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fd33 	bl	800198e <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 fcfb 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000108 	.word	0x20000108

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000108 	.word	0x20000108

08000f9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e0ed      	b.n	800118a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fee6 	bl	8000d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd0:	f7ff ffda 	bl	8000f88 <HAL_GetTick>
 8000fd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fd6:	e012      	b.n	8000ffe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd8:	f7ff ffd6 	bl	8000f88 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b0a      	cmp	r3, #10
 8000fe4:	d90b      	bls.n	8000ffe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0c5      	b.n	800118a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0e5      	beq.n	8000fd8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0202 	bic.w	r2, r2, #2
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff ffb4 	bl	8000f88 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff ffb0 	bl	8000f88 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e09f      	b.n	800118a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e5      	bne.n	8001024 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e1b      	ldrb	r3, [r3, #24]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d108      	bne.n	8001072 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e007      	b.n	8001082 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e5b      	ldrb	r3, [r3, #25]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d108      	bne.n	800109c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e007      	b.n	80010ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e9b      	ldrb	r3, [r3, #26]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e007      	b.n	80010d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0220 	bic.w	r2, r2, #32
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7edb      	ldrb	r3, [r3, #27]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0210 	bic.w	r2, r2, #16
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e007      	b.n	8001100 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0210 	orr.w	r2, r2, #16
 80010fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7f1b      	ldrb	r3, [r3, #28]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0208 	orr.w	r2, r2, #8
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0208 	bic.w	r2, r2, #8
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7f5b      	ldrb	r3, [r3, #29]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0204 	orr.w	r2, r2, #4
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0204 	bic.w	r2, r2, #4
 8001152:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	ea42 0103 	orr.w	r1, r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001192:	b480      	push	{r7}
 8001194:	b087      	sub	sp, #28
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d003      	beq.n	80011b8 <HAL_CAN_ConfigFilter+0x26>
 80011b0:	7cfb      	ldrb	r3, [r7, #19]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	f040 80aa 	bne.w	800130c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2201      	movs	r2, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d123      	bne.n	800123a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	401a      	ands	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001214:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3248      	adds	r2, #72	; 0x48
 800121a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800122e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001230:	6979      	ldr	r1, [r7, #20]
 8001232:	3348      	adds	r3, #72	; 0x48
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d122      	bne.n	8001288 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001262:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3248      	adds	r2, #72	; 0x48
 8001268:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800127c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127e:	6979      	ldr	r1, [r7, #20]
 8001280:	3348      	adds	r3, #72	; 0x48
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012a2:	e007      	b.n	80012b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d107      	bne.n	80012f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012fe:	f023 0201 	bic.w	r2, r3, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e006      	b.n	800131a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
  }
}
 800131a:	4618      	mov	r0, r3
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d12e      	bne.n	8001396 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fe1a 	bl	8000f88 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001356:	e012      	b.n	800137e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001358:	f7ff fe16 	bl	8000f88 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d90b      	bls.n	800137e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e012      	b.n	80013a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e5      	bne.n	8001358 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e006      	b.n	80013a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_AddTxMessage+0x2c>
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	f040 80ad 	bne.w	8001532 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d105      	bne.n	80013f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8095 	beq.w	8001522 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	0e1b      	lsrs	r3, r3, #24
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001402:	2201      	movs	r2, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800141e:	68f9      	ldr	r1, [r7, #12]
 8001420:	6809      	ldr	r1, [r1, #0]
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3318      	adds	r3, #24
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	440b      	add	r3, r1
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e00f      	b.n	8001450 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800143a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001444:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3318      	adds	r3, #24
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3318      	adds	r3, #24
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	7d1b      	ldrb	r3, [r3, #20]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d111      	bne.n	8001490 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3318      	adds	r3, #24
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	6811      	ldr	r1, [r2, #0]
 8001480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3318      	adds	r3, #24
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	440b      	add	r3, r1
 800148c:	3304      	adds	r3, #4
 800148e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3307      	adds	r3, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	061a      	lsls	r2, r3, #24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3306      	adds	r3, #6
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3305      	adds	r3, #5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4313      	orrs	r3, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	3204      	adds	r2, #4
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4610      	mov	r0, r2
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	6811      	ldr	r1, [r2, #0]
 80014b8:	ea43 0200 	orr.w	r2, r3, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3303      	adds	r3, #3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	061a      	lsls	r2, r3, #24
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3301      	adds	r3, #1
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	4313      	orrs	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	4610      	mov	r0, r2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	6811      	ldr	r1, [r2, #0]
 80014ee:	ea43 0200 	orr.w	r2, r3, r0
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3318      	adds	r3, #24
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	6811      	ldr	r1, [r2, #0]
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3318      	adds	r3, #24
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e00e      	b.n	8001540 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e006      	b.n	8001540 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
  }
}
 8001540:	4618      	mov	r0, r3
 8001542:	3724      	adds	r7, #36	; 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800154a:	b480      	push	{r7}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d003      	beq.n	800156e <HAL_CAN_GetRxMessage+0x24>
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b02      	cmp	r3, #2
 800156a:	f040 8103 	bne.w	8001774 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10e      	bne.n	8001592 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0f7      	b.n	8001782 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0e8      	b.n	8001782 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	331b      	adds	r3, #27
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0204 	and.w	r2, r3, #4
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	331b      	adds	r3, #27
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0d5b      	lsrs	r3, r3, #21
 80015de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	331b      	adds	r3, #27
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	331b      	adds	r3, #27
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0202 	and.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	331b      	adds	r3, #27
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2208      	movs	r2, #8
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	e00b      	b.n	800164e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	331b      	adds	r3, #27
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 020f 	and.w	r2, r3, #15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	331b      	adds	r3, #27
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	3304      	adds	r3, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b2da      	uxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	331b      	adds	r3, #27
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	3304      	adds	r3, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0a1a      	lsrs	r2, r3, #8
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0c1a      	lsrs	r2, r3, #16
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3302      	adds	r3, #2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0e1a      	lsrs	r2, r3, #24
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3303      	adds	r3, #3
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	3304      	adds	r3, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0a1a      	lsrs	r2, r3, #8
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3305      	adds	r3, #5
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0c1a      	lsrs	r2, r3, #16
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3306      	adds	r3, #6
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0e1a      	lsrs	r2, r3, #24
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	3307      	adds	r3, #7
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0220 	orr.w	r2, r2, #32
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e007      	b.n	8001770 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e006      	b.n	8001782 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <__NVIC_EnableIRQ+0x34>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff90 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff2d 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff42 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff35 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e169      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8158 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4a98      	ldr	r2, [pc, #608]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a96      	ldr	r2, [pc, #600]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a92      	ldr	r2, [pc, #584]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a90      	ldr	r2, [pc, #576]	; (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_GPIO_Init+0x2b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	; 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b1 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_GPIO_Init+0x1e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x1e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba6:	492f      	ldr	r1, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4928      	ldr	r1, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x2e2>
 8001c46:	bf00      	nop
 8001c48:	10320000 	.word	0x10320000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10120000 	.word	0x10120000
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4909      	ldr	r1, [pc, #36]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae8e 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f806 	bl	8001d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e272      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8087 	beq.w	8001e52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d112      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5e>
 8001d5c:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d10b      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x12c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d168      	bne.n	8001e50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e24c      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x76>
 8001d8c:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a7f      	ldr	r2, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e02e      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a77      	ldr	r2, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0xbc>
 8001dc6:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a71      	ldr	r2, [pc, #452]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0xd4>
 8001de0:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6a      	ldr	r2, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b68      	ldr	r3, [pc, #416]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8c2 	bl	8000f88 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff f8be 	bl	8000f88 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e200      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe4>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff f8ae 	bl	8000f88 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff f8aa 	bl	8000f88 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1ec      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x10c>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e6a:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x18c>
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x176>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1c0      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4939      	ldr	r1, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f863 	bl	8000f88 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f85f 	bl	8000f88 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1a1      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4927      	ldr	r1, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f842 	bl	8000f88 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff f83e 	bl	8000f88 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e180      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d03a      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d019      	beq.n	8001f6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f40:	f7ff f822 	bl	8000f88 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff f81e 	bl	8000f88 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e160      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f000 fa9c 	bl	80024a4 <RCC_Delay>
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff f808 	bl	8000f88 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7a:	e00f      	b.n	8001f9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff f804 	bl	8000f88 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d908      	bls.n	8001f9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e146      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	42420000 	.word	0x42420000
 8001f98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b92      	ldr	r3, [pc, #584]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e9      	bne.n	8001f7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a6 	beq.w	8002102 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a87      	ldr	r2, [pc, #540]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b85      	ldr	r3, [pc, #532]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b82      	ldr	r3, [pc, #520]	; (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ffc5 	bl	8000f88 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7fe ffc1 	bl	8000f88 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e103      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x4c8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x312>
 8002028:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e02d      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x334>
 800203e:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	e01c      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x356>
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a60      	ldr	r2, [pc, #384]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e00b      	b.n	8002092 <HAL_RCC_OscConfig+0x36e>
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a5a      	ldr	r2, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6213      	str	r3, [r2, #32]
 8002086:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d015      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe ff75 	bl	8000f88 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe ff71 	bl	8000f88 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0b1      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ee      	beq.n	80020a2 <HAL_RCC_OscConfig+0x37e>
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe ff5f 	bl	8000f88 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe ff5b 	bl	8000f88 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e09b      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ee      	bne.n	80020ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d061      	beq.n	80021dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d146      	bne.n	80021ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe ff2f 	bl	8000f88 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe ff2b 	bl	8000f88 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e06d      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002154:	d108      	bne.n	8002168 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4921      	ldr	r1, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a19      	ldr	r1, [r3, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	430b      	orrs	r3, r1
 800217a:	491b      	ldr	r1, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe feff 	bl	8000f88 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fefb 	bl	8000f88 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e03d      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x46a>
 80021ac:	e035      	b.n	800221a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fee8 	bl	8000f88 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fee4 	bl	8000f88 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e026      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x498>
 80021da:	e01e      	b.n	800221a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e019      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_OscConfig+0x500>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d910      	bls.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0207 	bic.w	r2, r3, #7
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800228e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e073      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06b      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7fe fe36 	bl	8000f88 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fe32 	bl	8000f88 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d210      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1cc>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fd94 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08002550 	.word	0x08002550
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCC_GetSysClockFreq+0x94>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x30>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x36>
 800242a:	e027      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800242e:	613b      	str	r3, [r7, #16]
      break;
 8002430:	e027      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	0c9b      	lsrs	r3, r3, #18
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_RCC_GetSysClockFreq+0x9c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_RCC_GetSysClockFreq+0x94>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c5b      	lsrs	r3, r3, #17
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e004      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	613b      	str	r3, [r7, #16]
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetSysClockFreq+0x98>)
 800247e:	613b      	str	r3, [r7, #16]
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	693b      	ldr	r3, [r7, #16]
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	007a1200 	.word	0x007a1200
 8002498:	08002560 	.word	0x08002560
 800249c:	08002570 	.word	0x08002570
 80024a0:	003d0900 	.word	0x003d0900

080024a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <RCC_Delay+0x34>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <RCC_Delay+0x38>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a5b      	lsrs	r3, r3, #9
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c0:	bf00      	nop
  }
  while (Delay --);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	60fa      	str	r2, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f9      	bne.n	80024c0 <RCC_Delay+0x1c>
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000000 	.word	0x20000000
 80024dc:	10624dd3 	.word	0x10624dd3

080024e0 <memset>:
 80024e0:	4603      	mov	r3, r0
 80024e2:	4402      	add	r2, r0
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d100      	bne.n	80024ea <memset+0xa>
 80024e8:	4770      	bx	lr
 80024ea:	f803 1b01 	strb.w	r1, [r3], #1
 80024ee:	e7f9      	b.n	80024e4 <memset+0x4>

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	2600      	movs	r6, #0
 80024f4:	4d0c      	ldr	r5, [pc, #48]	; (8002528 <__libc_init_array+0x38>)
 80024f6:	4c0d      	ldr	r4, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	f000 f81a 	bl	8002538 <_init>
 8002504:	2600      	movs	r6, #0
 8002506:	4d0a      	ldr	r5, [pc, #40]	; (8002530 <__libc_init_array+0x40>)
 8002508:	4c0a      	ldr	r4, [pc, #40]	; (8002534 <__libc_init_array+0x44>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	f855 3b04 	ldr.w	r3, [r5], #4
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	08002574 	.word	0x08002574
 800252c:	08002574 	.word	0x08002574
 8002530:	08002574 	.word	0x08002574
 8002534:	08002578 	.word	0x08002578

08002538 <_init>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr

08002544 <_fini>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

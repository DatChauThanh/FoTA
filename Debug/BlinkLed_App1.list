
BlinkLed_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b58  08002b58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b58  08002b58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002b6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b6c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005bfa  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001792  00000000  00000000  00025c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  00027408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c6  00000000  00000000  00027aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b8b  00000000  00000000  00027f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000839a  00000000  00000000  0003eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fb68  00000000  00000000  00046e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001944  00000000  00000000  000c69f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c8338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b1c 	.word	0x08002b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b1c 	.word	0x08002b1c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d102      	bne.n	8000664 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 800065e:	2350      	movs	r3, #80	; 0x50
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e001      	b.n	8000668 <CAN_IF_Transmit_UDS_Request+0x20>
   }
   else{
	   Local_u8SendToNode = 0x60;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000678:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <CAN_IF_Transmit_UDS_Request+0x5c>)
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <CAN_IF_Transmit_UDS_Request+0x60>)
 800068e:	f001 f97f 	bl	8001990 <HAL_CAN_AddTxMessage>
 8000692:	4603      	mov	r3, r0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000c8 	.word	0x200000c8
 80006a0:	200000fc 	.word	0x200000fc
 80006a4:	2000010c 	.word	0x2000010c
 80006a8:	200000a0 	.word	0x200000a0

080006ac <CAN_IF_Trasmit_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Trasmit_Data_Frame(uint8_t Node ,const uint8_t *DataBuffer ,uint8_t DataLength){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	//Check Is buffer NULL
	if(DataBuffer == NULL){
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <CAN_IF_Trasmit_Data_Frame+0x1a>
		return HAL_ERROR ;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e02b      	b.n	800071e <CAN_IF_Trasmit_Data_Frame+0x72>
	}
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d102      	bne.n	80006d2 <CAN_IF_Trasmit_Data_Frame+0x26>
	   Local_u8SendToNode = 0x50; //Send to 0x101
 80006cc:	2350      	movs	r3, #80	; 0x50
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <CAN_IF_Trasmit_Data_Frame+0x2a>
   }
   else{
	   Local_u8SendToNode = 0x60; //Send to 0x102
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006e6:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = DataLength;  // data length
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006ec:	6113      	str	r3, [r2, #16]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <CAN_IF_Trasmit_Data_Frame+0x5c>
	  TxData[index] = *( DataBuffer + index );
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	7811      	ldrb	r1, [r2, #0]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000700:	54d1      	strb	r1, [r2, r3]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bba      	ldrb	r2, [r7, #14]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f1      	bcc.n	80006f4 <CAN_IF_Trasmit_Data_Frame+0x48>
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <CAN_IF_Trasmit_Data_Frame+0x84>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <CAN_IF_Trasmit_Data_Frame+0x88>)
 8000718:	f001 f93a 	bl	8001990 <HAL_CAN_AddTxMessage>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000c8 	.word	0x200000c8
 800072c:	200000fc 	.word	0x200000fc
 8000730:	2000010c 	.word	0x2000010c
 8000734:	200000a0 	.word	0x200000a0

08000738 <CAN_IF_Receive_UDS_Respond>:

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <CAN_IF_Receive_UDS_Respond+0x40>)
 8000754:	2100      	movs	r1, #0
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000758:	f001 f9e9 	bl	8001b2e <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000a0 	.word	0x200000a0
 8000774:	20000104 	.word	0x20000104
 8000778:	200000e0 	.word	0x200000e0

0800077c <Decrypt_Address_Read_Init>:
static GlobalFlag Global_BufferFlag  ;

volatile uint32_t Global_ReadAddress ;

void  Decrypt_Address_Read_Init (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	Global_ReadAddress  = STORE_AREA_START_ADDRESS ;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <Decrypt_Address_Read_Init+0x14>)
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <Decrypt_Address_Read_Init+0x18>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000034 	.word	0x20000034
 8000794:	0800a800 	.word	0x0800a800

08000798 <Decrypt_MainFunction>:

void Decrypt_MainFunction (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

	Std_ReturnType status ;
	
	 /*check system state value "Data receive point "*/
		status = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007a0:	f000 f9ea 	bl	8000b78 <Rte_ReadSystemState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
	
		/* Check if there is an error during read operation */
		if (E_OK == status)
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d133      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		{			
			/* make sure that system state is Decrypt  */
			if (SYS_DECRYPT == Global_SystemState)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d12f      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			{
				  /*Read buffer Flag  "Data receive point "*/
			    status = RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Global_BufferFlag);
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007b8:	f000 f998 	bl	8000aec <Rte_ReadDecryptedDataBufferFlag>
 80007bc:	4603      	mov	r3, r0
 80007be:	71bb      	strb	r3, [r7, #6]
			   	/* Check if there is an error during read operation */
		        if (E_OK == status)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d127      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		        {
					   /* make sure that buffer state is not set  */
		            if (BUFFER_NOT_SET == Global_BufferFlag)
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d123      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			        {
	                              /*access piont to decrypt SWC*/								
			      	          /*Read Decrypted Data from flash rom*/
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e00f      	b.n	80007f4 <Decrypt_MainFunction+0x5c>
						{
		                	Global_PlainDataPtr[Local_Counter] = (*(volatile uint8_t*)(Global_ReadAddress) ) ;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	b2d1      	uxtb	r1, r2
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <Decrypt_MainFunction+0x94>)
 80007e2:	54d1      	strb	r1, [r2, r3]
							Global_ReadAddress++;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007ec:	6013      	str	r3, [r2, #0]
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9ec      	bls.n	80007d4 <Decrypt_MainFunction+0x3c>
						}
              
						if( E_OK == status )
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
//							    if( E_OK == status )
//                                {
//			                        /*Write decrypted buffer to decrypt port "Data send point "*/
//                                    status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
//								}
							status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <Decrypt_MainFunction+0x94>)
 8000802:	f000 f909 	bl	8000a18 <Rte_WriteDecryptedDataBuffer>
 8000806:	4603      	mov	r3, r0
 8000808:	71bb      	strb	r3, [r7, #6]
							 /*Change buffer flag value to set "Data send point "*/
							RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(BUFFER_SET);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f94c 	bl	8000aa8 <Rte_WriteDecryptedDataBufferFlag>
							 /*Change system flag to SEND , "Data send point "*/
							RTE_WRITE_SYSTEM_STATE(SYS_SEND_UPDATE);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 f98f 	bl	8000b34 <Rte_WriteSystemState>
			{
									/* Do nothing */
							/*system state is not Decrypt*/							
			}						
        }				      
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000030 	.word	0x20000030
 8000824:	20000031 	.word	0x20000031
 8000828:	20000034 	.word	0x20000034
 800082c:	20000028 	.word	0x20000028

08000830 <Rte_WriteNodeId>:

/**************************************************************************/
/*                         NodeId Port                                    */
/**************************************************************************/
Std_ReturnType Rte_WriteNodeId (uint8_t Cpy_NodeId)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
	
	if (Global_NodeIdPortState == IDLE)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <Rte_WriteNodeId+0x3c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d109      	bne.n	800085a <Rte_WriteNodeId+0x2a>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <Rte_WriteNodeId+0x3c>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_NodeId = Cpy_NodeId ; 
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <Rte_WriteNodeId+0x40>)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <Rte_WriteNodeId+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e001      	b.n	800085e <Rte_WriteNodeId+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	2000004d 	.word	0x2000004d
 8000870:	20000040 	.word	0x20000040

08000874 <Rte_ReadNodeId>:

Std_ReturnType Rte_ReadNodeId (uint8_t *Cpy_NodeId)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_NodeIdPortState == IDLE) && (Cpy_NodeId != NULL_PTR))
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <Rte_ReadNodeId+0x40>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10d      	bne.n	80008a4 <Rte_ReadNodeId+0x30>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00a      	beq.n	80008a4 <Rte_ReadNodeId+0x30>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <Rte_ReadNodeId+0x40>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_NodeId) = Global_NodeId ; 
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <Rte_ReadNodeId+0x44>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <Rte_ReadNodeId+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e001      	b.n	80008a8 <Rte_ReadNodeId+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	2000004d 	.word	0x2000004d
 80008b8:	20000040 	.word	0x20000040

080008bc <Rte_WriteCodeSize>:

/**************************************************************************/
/*                         CodeSize Port                                  */
/**************************************************************************/
Std_ReturnType Rte_WriteCodeSize(uint32_t Cpy_CodeSize)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
	
	if (Global_CodeSizePortState == IDLE)
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Rte_WriteCodeSize+0x38>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <Rte_WriteCodeSize+0x28>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Rte_WriteCodeSize+0x38>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_CodeSizeValue = Cpy_CodeSize ; 
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <Rte_WriteCodeSize+0x3c>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <Rte_WriteCodeSize+0x38>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e001      	b.n	80008e8 <Rte_WriteCodeSize+0x2c>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	2000004c 	.word	0x2000004c
 80008f8:	2000003c 	.word	0x2000003c

080008fc <Rte_ReadCodeSize>:

Std_ReturnType Rte_ReadCodeSize(uint32_t *Cpy_CodeSize)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_CodeSizePortState == IDLE) && (Cpy_CodeSize != NULL_PTR))
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <Rte_ReadCodeSize+0x40>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10d      	bne.n	800092c <Rte_ReadCodeSize+0x30>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00a      	beq.n	800092c <Rte_ReadCodeSize+0x30>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <Rte_ReadCodeSize+0x40>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_CodeSize) = Global_CodeSizeValue ; 
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <Rte_ReadCodeSize+0x44>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <Rte_ReadCodeSize+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e001      	b.n	8000930 <Rte_ReadCodeSize+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	2000004c 	.word	0x2000004c
 8000940:	2000003c 	.word	0x2000003c

08000944 <Rte_ReadCrc>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadCrc(uint32_t *Cpy_Crc)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

	if ( (Global_CrcPortState == IDLE) && (Cpy_Crc != NULL_PTR) )
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <Rte_ReadCrc+0x40>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10d      	bne.n	8000974 <Rte_ReadCrc+0x30>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <Rte_ReadCrc+0x30>
	{
		/* Lock the port to write */
		Global_CrcPortState = BUSY ;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <Rte_ReadCrc+0x40>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_Crc) = Global_CrcValue ;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <Rte_ReadCrc+0x44>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CrcPortState = IDLE ;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <Rte_ReadCrc+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e001      	b.n	8000978 <Rte_ReadCrc+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000004b 	.word	0x2000004b
 8000988:	20000038 	.word	0x20000038

0800098c <Rte_WriteHeaderAckFlag>:

/**************************************************************************/
/*                         Header Ack Flag Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteHeaderAckFlag(FlagType Cpy_HeaderAckFlag)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
	
	if (Global_HeaderAckFlagState == IDLE)
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <Rte_WriteHeaderAckFlag+0x3c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d109      	bne.n	80009b6 <Rte_WriteHeaderAckFlag+0x2a>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <Rte_WriteHeaderAckFlag+0x3c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_HeaderAckFlag = Cpy_HeaderAckFlag ; 
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <Rte_WriteHeaderAckFlag+0x40>)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <Rte_WriteHeaderAckFlag+0x3c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e001      	b.n	80009ba <Rte_WriteHeaderAckFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000004e 	.word	0x2000004e
 80009cc:	20000041 	.word	0x20000041

080009d0 <Rte_ReadHeaderAckFlag>:

Std_ReturnType Rte_ReadHeaderAckFlag(FlagType *Cpy_HeaderAckFlag)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_HeaderAckFlagState == IDLE) && (Cpy_HeaderAckFlag != NULL_PTR) )
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <Rte_ReadHeaderAckFlag+0x40>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10d      	bne.n	8000a00 <Rte_ReadHeaderAckFlag+0x30>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <Rte_ReadHeaderAckFlag+0x30>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <Rte_ReadHeaderAckFlag+0x40>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_HeaderAckFlag) = Global_HeaderAckFlag ; 
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <Rte_ReadHeaderAckFlag+0x44>)
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <Rte_ReadHeaderAckFlag+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e001      	b.n	8000a04 <Rte_ReadHeaderAckFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	2000004e 	.word	0x2000004e
 8000a14:	20000041 	.word	0x20000041

08000a18 <Rte_WriteDecryptedDataBuffer>:

/**************************************************************************/
/*                         Decrypted Data Buffer Port                     */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBuffer(uint8_t *Cpy_DecryptedDataBufferPtr)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]
	
	if ((Global_DecryptedDataBufferState == IDLE)&& (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10c      	bne.n	8000a46 <Rte_WriteDecryptedDataBuffer+0x2e>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d009      	beq.n	8000a46 <Rte_WriteDecryptedDataBuffer+0x2e>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferPtr = Cpy_DecryptedDataBufferPtr ; 
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <Rte_WriteDecryptedDataBuffer+0x44>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e001      	b.n	8000a4a <Rte_WriteDecryptedDataBuffer+0x32>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000004f 	.word	0x2000004f
 8000a5c:	20000044 	.word	0x20000044

08000a60 <Rte_ReadDecryptedDataBuffer>:

Std_ReturnType Rte_ReadDecryptedDataBuffer(uint8_t **Cpy_DecryptedDataBufferPtr)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferState == IDLE) && (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10d      	bne.n	8000a90 <Rte_ReadDecryptedDataBuffer+0x30>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00a      	beq.n	8000a90 <Rte_ReadDecryptedDataBuffer+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferPtr) = Global_DecryptedDataBufferPtr ; 
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <Rte_ReadDecryptedDataBuffer+0x44>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <Rte_ReadDecryptedDataBuffer+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e001      	b.n	8000a94 <Rte_ReadDecryptedDataBuffer+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	2000004f 	.word	0x2000004f
 8000aa4:	20000044 	.word	0x20000044

08000aa8 <Rte_WriteDecryptedDataBufferFlag>:

/**************************************************************************/
/*                         Decrypted Data Buffer Flag Port                */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBufferFlag(FlagType Cpy_DecryptedDataBufferFlag)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
	
	if (Global_DecryptedDataBufferFlagState == IDLE)
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d109      	bne.n	8000ad2 <Rte_WriteDecryptedDataBufferFlag+0x2a>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferFlag = Cpy_DecryptedDataBufferFlag ; 
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <Rte_WriteDecryptedDataBufferFlag+0x40>)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e001      	b.n	8000ad6 <Rte_WriteDecryptedDataBufferFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000050 	.word	0x20000050
 8000ae8:	20000048 	.word	0x20000048

08000aec <Rte_ReadDecryptedDataBufferFlag>:

Std_ReturnType Rte_ReadDecryptedDataBufferFlag(FlagType *Cpy_DecryptedDataBufferFlag)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferFlagState == IDLE) && (Cpy_DecryptedDataBufferFlag != NULL_PTR) )
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10d      	bne.n	8000b1c <Rte_ReadDecryptedDataBufferFlag+0x30>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00a      	beq.n	8000b1c <Rte_ReadDecryptedDataBufferFlag+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferFlag) = Global_DecryptedDataBufferFlag ; 
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <Rte_ReadDecryptedDataBufferFlag+0x44>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e001      	b.n	8000b20 <Rte_ReadDecryptedDataBufferFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000050 	.word	0x20000050
 8000b30:	20000048 	.word	0x20000048

08000b34 <Rte_WriteSystemState>:

/**************************************************************************/
/*                         SystemState Port                               */
/**************************************************************************/
Std_ReturnType Rte_WriteSystemState(SystemStateType Cpy_SystemState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
	
	if (Global_SystemStateMachineState == IDLE)
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <Rte_WriteSystemState+0x3c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d109      	bne.n	8000b5e <Rte_WriteSystemState+0x2a>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <Rte_WriteSystemState+0x3c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_SystemStateMachine = Cpy_SystemState ; 
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <Rte_WriteSystemState+0x40>)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <Rte_WriteSystemState+0x3c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e001      	b.n	8000b62 <Rte_WriteSystemState+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000051 	.word	0x20000051
 8000b74:	20000049 	.word	0x20000049

08000b78 <Rte_ReadSystemState>:

Std_ReturnType Rte_ReadSystemState(SystemStateType *Cpy_SystemState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_SystemStateMachineState == IDLE) && (Cpy_SystemState != NULL_PTR))
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <Rte_ReadSystemState+0x40>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10d      	bne.n	8000ba8 <Rte_ReadSystemState+0x30>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <Rte_ReadSystemState+0x30>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <Rte_ReadSystemState+0x40>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_SystemState) = Global_SystemStateMachine ; 
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <Rte_ReadSystemState+0x44>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <Rte_ReadSystemState+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e001      	b.n	8000bac <Rte_ReadSystemState+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000051 	.word	0x20000051
 8000bbc:	20000049 	.word	0x20000049

08000bc0 <Rte_WriteUpdateProgress>:

/**************************************************************************/
/*                         Update Progress Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteUpdateProgress(uint8_t Cpy_UpdateProgress)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UpdateProgressPortState == IDLE)
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <Rte_WriteUpdateProgress+0x3c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <Rte_WriteUpdateProgress+0x2a>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <Rte_WriteUpdateProgress+0x3c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UpdateProgress = Cpy_UpdateProgress ; 
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <Rte_WriteUpdateProgress+0x40>)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <Rte_WriteUpdateProgress+0x3c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e001      	b.n	8000bee <Rte_WriteUpdateProgress+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000052 	.word	0x20000052
 8000c00:	2000004a 	.word	0x2000004a

08000c04 <Transmit_InitializeModule>:
*******************************************************************************/

/*****************************Module Function Definitions.*********************/

Std_ReturnType Transmit_InitializeModule(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
   // Initalize static variable in this module
   Static_uint32CodeSize                       = INITIALIZE_WITH_ZERO;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <Transmit_InitializeModule+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                          = INITIALIZE_WITH_ZERO;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <Transmit_InitializeModule+0x5c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter                 = INITIALIZE_WITH_ZERO;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <Transmit_InitializeModule+0x60>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets                = INITIALIZE_WITH_ZERO;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <Transmit_InitializeModule+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket          = INITIALIZE_WITH_ZERO;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <Transmit_InitializeModule+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
   Static_InstallPercentage					   = INITIALIZE_WITH_ZERO;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <Transmit_InitializeModule+0x6c>)
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
   Static_InstallUpdateProgeress			   = INITIALIZE_WITH_ZERO;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <Transmit_InitializeModule+0x70>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
   // Initialize current state variable
   Static_StateVariable                        = IDLE_STATE;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <Transmit_InitializeModule+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
   // Fill state array with function represent each state
   Static_ArrayOfStates[IDLE_STATE]            = Transmit_IdleState;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <Transmit_InitializeModule+0x78>)
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <Transmit_InitializeModule+0x7c>)
 8000c3e:	601a      	str	r2, [r3, #0]
   Static_ArrayOfStates[GET_TRANSMIT_HEADER]   = Transmit_GetTransmitHeader;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <Transmit_InitializeModule+0x78>)
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <Transmit_InitializeModule+0x80>)
 8000c44:	605a      	str	r2, [r3, #4]
   Static_ArrayOfStates[CONSUME_TRANSMIT_DATA] = Transmit_ConsumeTransmitData;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <Transmit_InitializeModule+0x78>)
 8000c48:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <Transmit_InitializeModule+0x84>)
 8000c4a:	609a      	str	r2, [r3, #8]
   Static_ArrayOfStates[FINISHING_STATE]       = Transmit_FinishingState;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <Transmit_InitializeModule+0x78>)
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <Transmit_InitializeModule+0x88>)
 8000c50:	60da      	str	r2, [r3, #12]

   return E_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000054 	.word	0x20000054
 8000c60:	20000058 	.word	0x20000058
 8000c64:	2000005a 	.word	0x2000005a
 8000c68:	2000005c 	.word	0x2000005c
 8000c6c:	2000005e 	.word	0x2000005e
 8000c70:	20000060 	.word	0x20000060
 8000c74:	20000064 	.word	0x20000064
 8000c78:	20000065 	.word	0x20000065
 8000c7c:	20000068 	.word	0x20000068
 8000c80:	08000cc5 	.word	0x08000cc5
 8000c84:	08000d11 	.word	0x08000d11
 8000c88:	08000dd1 	.word	0x08000dd1
 8000c8c:	08000f55 	.word	0x08000f55

08000c90 <Transmit_MainFunction>:

Std_ReturnType Transmit_MainFunction(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
   Std_ReturnType       Local_ReturnStatus = E_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
   State_PtrToFunction  RunState;
   RunState           = Static_ArrayOfStates[Static_StateVariable];
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Transmit_MainFunction+0x2c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <Transmit_MainFunction+0x30>)
 8000ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca6:	603b      	str	r3, [r7, #0]
   Local_ReturnStatus = RunState(NULL_PTR);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2000      	movs	r0, #0
 8000cac:	4798      	blx	r3
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
   return Local_ReturnStatus;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000065 	.word	0x20000065
 8000cc0:	20000068 	.word	0x20000068

08000cc4 <Transmit_IdleState>:

/*****************************Private Functions' Definitions*******************************/

/*****************************Functions Represent states***********************************/
static Std_ReturnType Transmit_IdleState(void *Cpy_voidPtr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus       = E_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
   FlagType       Local_uint8HeaderFlagValue  = HEADER_NOT_SET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73bb      	strb	r3, [r7, #14]
   // Get Header Flag Value.
   Local_ReturnStatus = RTE_READ_HEADER_ACK_FLAG(&Local_uint8HeaderFlagValue);
 8000cd4:	f107 030e 	add.w	r3, r7, #14
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe79 	bl	80009d0 <Rte_ReadHeaderAckFlag>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	73fb      	strb	r3, [r7, #15]
   if(E_OK == Local_ReturnStatus)
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d109      	bne.n	8000cfc <Transmit_IdleState+0x38>
   {
      // Check The Header Flag Value
      if(HEADER_SET == Local_uint8HeaderFlagValue)
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d103      	bne.n	8000cf6 <Transmit_IdleState+0x32>
      {
         // Go to Get and Transmit Header State.
         Static_StateVariable = GET_TRANSMIT_HEADER;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <Transmit_IdleState+0x48>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e004      	b.n	8000d00 <Transmit_IdleState+0x3c>
      }
      else
      {
         Local_ReturnStatus = HEADER_NOT_SET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e001      	b.n	8000d00 <Transmit_IdleState+0x3c>
      }
   }
   else
   {
      Local_ReturnStatus = E_NOT_OK;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000065 	.word	0x20000065

08000d10 <Transmit_GetTransmitHeader>:

static Std_ReturnType Transmit_GetTransmitHeader(void *Cpy_voidPtr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus                            = E_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t        Local_HeaderBuffer[HEADER_INFORMATION_SIZE]   = {INITIALIZE_WITH_ZERO};
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
   uint8_t        Local_uint8NodeId                           	= INITIALIZE_WITH_ZERO;
 8000d26:	2300      	movs	r3, #0
 8000d28:	76fb      	strb	r3, [r7, #27]
   uint32_t       Local_uint32CodeSize                       	= INITIALIZE_WITH_ZERO;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
   uint32_t       Local_uint32CrcValue                      	= INITIALIZE_WITH_ZERO;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
   uint8_t        Local_uint8ReceivedAck                        = INITIALIZE_WITH_ZERO;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
   // Consume Header Information.     
   Transmit_ConsumeHeader(&Local_uint8NodeId, &Local_uint32CodeSize, &Local_uint32CrcValue);
 8000d36:	f107 0210 	add.w	r2, r7, #16
 8000d3a:	f107 0114 	add.w	r1, r7, #20
 8000d3e:	f107 031b 	add.w	r3, r7, #27
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f944 	bl	8000fd0 <Transmit_ConsumeHeader>
   // Save Size and Node Id.
   Transmit_SaveHeader(&Local_uint8NodeId, &Local_uint32CodeSize);
 8000d48:	f107 0214 	add.w	r2, r7, #20
 8000d4c:	f107 031b 	add.w	r3, r7, #27
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f992 	bl	800107c <Transmit_SaveHeader>
   // Handle header information
   Transmit_HandleHeader(Local_uint32CodeSize, Local_uint32CrcValue, Local_HeaderBuffer);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	6939      	ldr	r1, [r7, #16]
 8000d5c:	f107 021c 	add.w	r2, r7, #28
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f951 	bl	8001008 <Transmit_HandleHeader>
   /************************Sequence Between Gateway and Boot_loader********************/

   // Request Program control.
   CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_CONTROL_SESSION);
 8000d66:	7efb      	ldrb	r3, [r7, #27]
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc6c 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000d70:	f107 030f 	add.w	r3, r7, #15
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcdf 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACCEPT_UPGRADE_REQUEST == Local_uint8ReceivedAck)
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b50      	cmp	r3, #80	; 0x50
 8000d7e:	d113      	bne.n	8000da8 <Transmit_GetTransmitHeader+0x98>
   {
      // Request sending Header.
      CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_GWY_REQUEST_SENDING_HEADER);
 8000d80:	7efb      	ldrb	r3, [r7, #27]
 8000d82:	2134      	movs	r1, #52	; 0x34
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fc5f 	bl	8000648 <CAN_IF_Transmit_UDS_Request>

      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000d8a:	f107 030f 	add.w	r3, r7, #15
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fcd2 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

      if (UDS_MCU_ACCEPT_RECEIVING_HEADER == Local_uint8ReceivedAck)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2b73      	cmp	r3, #115	; 0x73
 8000d98:	d106      	bne.n	8000da8 <Transmit_GetTransmitHeader+0x98>
      {
         // Sending header.
    	 CAN_IF_Trasmit_Data_Frame(Local_uint8NodeId, Local_HeaderBuffer, HEADER_INFORMATION_SIZE);
 8000d9a:	7efb      	ldrb	r3, [r7, #27]
 8000d9c:	f107 011c 	add.w	r1, r7, #28
 8000da0:	2208      	movs	r2, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fc82 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
   else
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000da8:	f107 030f 	add.w	r3, r7, #15
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fcc3 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED == Local_uint8ReceivedAck)
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b74      	cmp	r3, #116	; 0x74
 8000db6:	d102      	bne.n	8000dbe <Transmit_GetTransmitHeader+0xae>
   {
	   Static_StateVariable = CONSUME_TRANSMIT_DATA;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <Transmit_GetTransmitHeader+0xbc>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 8000dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000065 	.word	0x20000065

08000dd0 <Transmit_ConsumeTransmitData>:

static Std_ReturnType Transmit_ConsumeTransmitData(void *Cpy_voidPtr)
{    
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
   FlagType         Local_uint8BufferFlagValue              = BUFFER_NOT_SET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	75fb      	strb	r3, [r7, #23]
   uint8_t          *Local_uint8DataBuffer                  = NULL_PTR ;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
   uint8_t          Local_uint8ReceivedAck                  = INITIALIZE_WITH_ZERO;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]

   // Calculate number of packets and number of bytes in the last packet.
   Static_uint16NumberOfPackets            = (Static_uint32CodeSize) / (DATA_BUFFER_SIZE);
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <Transmit_ConsumeTransmitData+0x160>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <Transmit_ConsumeTransmitData+0x164>)
 8000dee:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket      = (Static_uint32CodeSize) % (DATA_BUFFER_SIZE);
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <Transmit_ConsumeTransmitData+0x160>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <Transmit_ConsumeTransmitData+0x168>)
 8000dfe:	701a      	strb	r2, [r3, #0]
   // Get Buffer Flag Value.
   RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Local_uint8BufferFlagValue);
 8000e00:	f107 0317 	add.w	r3, r7, #23
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe71 	bl	8000aec <Rte_ReadDecryptedDataBufferFlag>
   // Check The Buffer Flag Value
   if(BUFFER_SET == Local_uint8BufferFlagValue)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	f040 8089 	bne.w	8000f24 <Transmit_ConsumeTransmitData+0x154>
   {
      // Consume Data and Increase packet counter by 1
      RTE_READ_DECRYPTED_DATA_BUFFER(&Local_uint8DataBuffer);
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe22 	bl	8000a60 <Rte_ReadDecryptedDataBuffer>
      // Request Sending line of code code.
      CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_REQUEST_SENDING_PACKET_OF_CODE);
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <Transmit_ConsumeTransmitData+0x16c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2136      	movs	r1, #54	; 0x36
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc10 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000e28:	f107 030f 	add.w	r3, r7, #15
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fc83 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
      // Check The node ack
      if(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE == Local_uint8ReceivedAck)
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b75      	cmp	r3, #117	; 0x75
 8000e36:	d175      	bne.n	8000f24 <Transmit_ConsumeTransmitData+0x154>
      {
         // condition to know are we will send the last packet or ordinary packet.
         if(Static_uint16PacketsCounter < Static_uint16NumberOfPackets)
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <Transmit_ConsumeTransmitData+0x170>)
 8000e3a:	881a      	ldrh	r2, [r3, #0]
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <Transmit_ConsumeTransmitData+0x164>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d250      	bcs.n	8000ee6 <Transmit_ConsumeTransmitData+0x116>
         {
            // Sending 64 byte of DATA_BUFFER_SIZE
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, DATA_BUFFER_SIZE);
 8000e44:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <Transmit_ConsumeTransmitData+0x16c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc2d 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
        	CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000e52:	f107 030f 	add.w	r3, r7, #15
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc6e 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b76      	cmp	r3, #118	; 0x76
 8000e60:	d160      	bne.n	8000f24 <Transmit_ConsumeTransmitData+0x154>
            {
               // Increase packet counter by 1
				Static_uint16PacketsCounter++;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <Transmit_ConsumeTransmitData+0x170>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <Transmit_ConsumeTransmitData+0x170>)
 8000e6c:	801a      	strh	r2, [r3, #0]
				if ((Static_uint16PacketsCounter == Static_uint16NumberOfPackets)
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <Transmit_ConsumeTransmitData+0x170>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <Transmit_ConsumeTransmitData+0x164>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d107      	bne.n	8000e8a <Transmit_ConsumeTransmitData+0xba>
					&& (Static_uint8NumOfBytesInLastPacket == ZERO_BYTE))
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <Transmit_ConsumeTransmitData+0x168>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <Transmit_ConsumeTransmitData+0xba>
				{
					Static_StateVariable = FINISHING_STATE;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <Transmit_ConsumeTransmitData+0x174>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e005      	b.n	8000e96 <Transmit_ConsumeTransmitData+0xc6>
				}
				else
				{
					// Reset Buffer flag
					RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fe0c 	bl	8000aa8 <Rte_WriteDecryptedDataBufferFlag>
					// Change System State To De_crypt state.
					RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f7ff fe4f 	bl	8000b34 <Rte_WriteSystemState>
				}
				Static_InstallPercentage = ((float)Static_uint16PacketsCounter /(float) Static_uint16NumberOfPackets) ;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <Transmit_ConsumeTransmitData+0x170>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fa0c 	bl	80002b8 <__aeabi_ui2f>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <Transmit_ConsumeTransmitData+0x164>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa06 	bl	80002b8 <__aeabi_ui2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fb0d 	bl	80004d0 <__aeabi_fdiv>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <Transmit_ConsumeTransmitData+0x178>)
 8000ebc:	601a      	str	r2, [r3, #0]
				Static_InstallUpdateProgeress = Static_InstallPercentage * 100 ;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <Transmit_ConsumeTransmitData+0x178>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4922      	ldr	r1, [pc, #136]	; (8000f4c <Transmit_ConsumeTransmitData+0x17c>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa4f 	bl	8000368 <__aeabi_fmul>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb9b 	bl	8000608 <__aeabi_f2uiz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <Transmit_ConsumeTransmitData+0x180>)
 8000ed8:	701a      	strb	r2, [r3, #0]
				/* Write to RTE to Signal UserIntrface Module */
				RTE_WRITE_DOWNLOAD_PROGRESS (Static_InstallUpdateProgeress);
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <Transmit_ConsumeTransmitData+0x180>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe6e 	bl	8000bc0 <Rte_WriteUpdateProgress>
 8000ee4:	e01e      	b.n	8000f24 <Transmit_ConsumeTransmitData+0x154>
            else
            {
               //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
            }
         }
         else if (Static_uint8NumOfBytesInLastPacket != 0)
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <Transmit_ConsumeTransmitData+0x168>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01a      	beq.n	8000f24 <Transmit_ConsumeTransmitData+0x154>
         {
            // Sending the rest of data
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, Static_uint8NumOfBytesInLastPacket);
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <Transmit_ConsumeTransmitData+0x16c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <Transmit_ConsumeTransmitData+0x168>)
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fbd7 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
            CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8000efe:	f107 030f 	add.w	r3, r7, #15
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc18 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b76      	cmp	r3, #118	; 0x76
 8000f0c:	d10a      	bne.n	8000f24 <Transmit_ConsumeTransmitData+0x154>
            {
               // Go to Finish State.
               Static_StateVariable = FINISHING_STATE;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <Transmit_ConsumeTransmitData+0x174>)
 8000f10:	2203      	movs	r2, #3
 8000f12:	701a      	strb	r2, [r3, #0]
               Static_InstallUpdateProgeress = 100;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <Transmit_ConsumeTransmitData+0x180>)
 8000f16:	2264      	movs	r2, #100	; 0x64
 8000f18:	701a      	strb	r2, [r3, #0]
               RTE_WRITE_DOWNLOAD_PROGRESS (Static_InstallUpdateProgeress);
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <Transmit_ConsumeTransmitData+0x180>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fe4e 	bl	8000bc0 <Rte_WriteUpdateProgress>
         //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
      } 
   }  
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000054 	.word	0x20000054
 8000f34:	2000005c 	.word	0x2000005c
 8000f38:	2000005e 	.word	0x2000005e
 8000f3c:	20000058 	.word	0x20000058
 8000f40:	2000005a 	.word	0x2000005a
 8000f44:	20000065 	.word	0x20000065
 8000f48:	20000060 	.word	0x20000060
 8000f4c:	42c80000 	.word	0x42c80000
 8000f50:	20000064 	.word	0x20000064

08000f54 <Transmit_FinishingState>:

static Std_ReturnType Transmit_FinishingState(void *Cpy_voidPtr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
   uint8_t Local_uint8_tReceivedAck = INITIALIZE_WITH_ZERO;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
   // Reset Buffer flag
   RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fda1 	bl	8000aa8 <Rte_WriteDecryptedDataBufferFlag>
   // Ack node of the end of code transmission
   CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <Transmit_FinishingState+0x64>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2137      	movs	r1, #55	; 0x37
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb6b 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8_tReceivedAck);
 8000f72:	f107 030f 	add.w	r3, r7, #15
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fbde 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
   if(UDS_MCU_ACKNOWLEDGE_RECEIVED_CODE == Local_uint8_tReceivedAck)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b77      	cmp	r3, #119	; 0x77
 8000f80:	d105      	bne.n	8000f8e <Transmit_FinishingState+0x3a>
   {
      // Go To Idle State Here
      Static_StateVariable = IDLE_STATE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <Transmit_FinishingState+0x68>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
      // Change System State To System Done Update
      RTE_WRITE_SYSTEM_STATE(SYS_DONE_UPDATE);
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f7ff fdd3 	bl	8000b34 <Rte_WriteSystemState>
   }
	 	// Reinit variables 
   Static_uint32CodeSize              = INITIALIZE_WITH_ZERO;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <Transmit_FinishingState+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                 = INITIALIZE_WITH_ZERO;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Transmit_FinishingState+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter        = INITIALIZE_WITH_ZERO;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <Transmit_FinishingState+0x70>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets       = INITIALIZE_WITH_ZERO;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <Transmit_FinishingState+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket = INITIALIZE_WITH_ZERO;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <Transmit_FinishingState+0x78>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000058 	.word	0x20000058
 8000fbc:	20000065 	.word	0x20000065
 8000fc0:	20000054 	.word	0x20000054
 8000fc4:	2000005a 	.word	0x2000005a
 8000fc8:	2000005c 	.word	0x2000005c
 8000fcc:	2000005e 	.word	0x2000005e

08000fd0 <Transmit_ConsumeHeader>:

/*******************************Auxiliary Private Function***************************/

static Std_ReturnType Transmit_ConsumeHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size,uint32_t *Cpy_Crc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
   Std_ReturnType Local_ReturnStatus = E_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]
   // Consume Header Information.     
   Local_ReturnStatus                = RTE_READ_NODE_ID  (Cpy_NodeId);
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff fc47 	bl	8000874 <Rte_ReadNodeId>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CODE_SIZE(Cpy_Size);
 8000fea:	68b8      	ldr	r0, [r7, #8]
 8000fec:	f7ff fc86 	bl	80008fc <Rte_ReadCodeSize>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CRC_VALUE(Cpy_Crc);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fca5 	bl	8000944 <Rte_ReadCrc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	75fb      	strb	r3, [r7, #23]
   return Local_ReturnStatus;
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Transmit_HandleHeader>:

static Std_ReturnType Transmit_HandleHeader(uint32_t Cpy_Size,uint32_t Cpy_Crc,uint8_t *Cpy_PtrToBytes)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
   // Convert code size into bytes and store it in buffer.
   Cpy_PtrToBytes[FIRST_BYTE]   = (Cpy_Size & GET_BYTE);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SECOND_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	0a1a      	lsrs	r2, r3, #8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[THIRD_BYTE]   = ((Cpy_Size >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	0c1a      	lsrs	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[FOURTH_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	0e1a      	lsrs	r2, r3, #24
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3303      	adds	r3, #3
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
   // Convert CRC Value into bytes and store it in buffer.
   Cpy_PtrToBytes[FIFTH_BYTE]   = (Cpy_Crc  & GET_BYTE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SIXTH_BYTE]   = ((Cpy_Crc  >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	0a1a      	lsrs	r2, r3, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3305      	adds	r3, #5
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SEVENTH_BYTE] = ((Cpy_Crc  >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	0c1a      	lsrs	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3306      	adds	r3, #6
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[EIGHTH_BYTE]  = ((Cpy_Crc  >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	0e1a      	lsrs	r2, r3, #24
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3307      	adds	r3, #7
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
   return E_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
	...

0800107c <Transmit_SaveHeader>:

static Std_ReturnType Transmit_SaveHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
   // Store Node Id To Use It to determinr the node.
   Static_uint8NodeId    = *Cpy_NodeId;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <Transmit_SaveHeader+0x28>)
 800108c:	701a      	strb	r2, [r3, #0]
   // Store Size To Use It to calculate number of packts.
   Static_uint32CodeSize = *Cpy_Size;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <Transmit_SaveHeader+0x2c>)
 8001094:	6013      	str	r3, [r2, #0]
   return E_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000058 	.word	0x20000058
 80010a8:	20000054 	.word	0x20000054

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fa03 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f82d 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 f8cd 	bl	8001258 <MX_GPIO_Init>
  MX_CAN_Init();
 80010be:	f000 f871 	bl	80011a4 <MX_CAN_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  //Transmit_InitializeModule();
  //uint8_t state ;

  HAL_CAN_Start(&hcan);
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <main+0x64>)
 80010c4:	f000 fc20 	bl	8001908 <HAL_CAN_Start>


  Transmit_InitializeModule();
 80010c8:	f7ff fd9c 	bl	8000c04 <Transmit_InitializeModule>
  Decrypt_Address_Read_Init();
 80010cc:	f7ff fb56 	bl	800077c <Decrypt_Address_Read_Init>
  /* USER CODE END 2 */

	RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff fd2f 	bl	8000b34 <Rte_WriteSystemState>
	RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fc58 	bl	800098c <Rte_WriteHeaderAckFlag>
	RTE_WRITE_NODE_ID(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff fba7 	bl	8000830 <Rte_WriteNodeId>
	RTE_WRITE_CODE_SIZE(0x2520);
 80010e2:	f242 5020 	movw	r0, #9504	; 0x2520
 80010e6:	f7ff fbe9 	bl	80008bc <Rte_WriteCodeSize>
  while (1)
  {

	  while(1){

			RTE_READ_SYSTEM_STATE(&state);
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd43 	bl	8000b78 <Rte_ReadSystemState>
			if (state == SYS_REC_UPDATE){
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d0f8      	beq.n	80010ea <main+0x3e>
		//		ReceiveUpdate_MainFunction();
			}
			else if (state == SYS_DECRYPT)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d102      	bne.n	8001104 <main+0x58>
			{
				Decrypt_MainFunction();
 80010fe:	f7ff fb4b 	bl	8000798 <Decrypt_MainFunction>
 8001102:	e7f2      	b.n	80010ea <main+0x3e>
			}
			else if (state == SYS_SEND_UPDATE)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d1ef      	bne.n	80010ea <main+0x3e>
			{
				Transmit_MainFunction();
 800110a:	f7ff fdc1 	bl	8000c90 <Transmit_MainFunction>
			RTE_READ_SYSTEM_STATE(&state);
 800110e:	e7ec      	b.n	80010ea <main+0x3e>
 8001110:	200000a0 	.word	0x200000a0

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2228      	movs	r2, #40	; 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fcce 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001136:	2309      	movs	r3, #9
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f001 f8d1 	bl	8002308 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800116c:	f000 f8d8 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fb3e 	bl	800280c <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001196:	f000 f8c3 	bl	8001320 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	; 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_CAN_Init+0xa8>)
 80011aa:	4a29      	ldr	r2, [pc, #164]	; (8001250 <MX_CAN_Init+0xac>)
 80011ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <MX_CAN_Init+0xa8>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_CAN_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <MX_CAN_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_CAN_Init+0xa8>)
 80011c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_CAN_Init+0xa8>)
 80011ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_CAN_Init+0xa8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_CAN_Init+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_CAN_Init+0xa8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_CAN_Init+0xa8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_CAN_Init+0xa8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_CAN_Init+0xa8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011f4:	4815      	ldr	r0, [pc, #84]	; (800124c <MX_CAN_Init+0xa8>)
 80011f6:	f000 f9c3 	bl	8001580 <HAL_CAN_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001200:	f000 f88e 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //Initialize Variable for CAN
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_CAN_Init+0xb0>)
 8001206:	2201      	movs	r2, #1
 8001208:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_CAN_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_CAN_Init+0xb0>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_CAN_Init+0xb0>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_CAN_Init+0xb0>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_CAN_Init+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_CAN_Init+0xb0>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_CAN_Init+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_CAN_Init+0xb0>)
 8001236:	2201      	movs	r2, #1
 8001238:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_CAN_Init+0xb0>)
 800123c:	220a      	movs	r2, #10
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <MX_CAN_Init+0xb0>)
 8001242:	4802      	ldr	r0, [pc, #8]	; (800124c <MX_CAN_Init+0xa8>)
 8001244:	f000 fa97 	bl	8001776 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000a0 	.word	0x200000a0
 8001250:	40006400 	.word	0x40006400
 8001254:	20000078 	.word	0x20000078

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_GPIO_Init+0xb8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_GPIO_Init+0xb8>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <MX_GPIO_Init+0xb8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_GPIO_Init+0xb8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <MX_GPIO_Init+0xb8>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_GPIO_Init+0xb8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_GPIO_Init+0xb8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <MX_GPIO_Init+0xb8>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_GPIO_Init+0xb8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|IRQ_LED_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_GPIO_Init+0xbc>)
 80012bc:	f000 ffea 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin IRQ_LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin|IRQ_LED_Pin;
 80012c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_GPIO_Init+0xbc>)
 80012da:	f000 fe57 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_1_Pin */
  GPIO_InitStruct.Pin = IRQ_1_Pin;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_GPIO_Init+0xc0>)
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <MX_GPIO_Init+0xc4>)
 80012f2:	f000 fe4b 	bl	8001f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2007      	movs	r0, #7
 80012fc:	f000 fe0f 	bl	8001f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001300:	2007      	movs	r0, #7
 8001302:	f000 fe28 	bl	8001f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	40011000 	.word	0x40011000
 8001318:	10110000 	.word	0x10110000
 800131c:	40010800 	.word	0x40010800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_MspInit+0x40>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_MspInit+0x40>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_MspInit+0x40>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_MspInit+0x40>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_MspInit+0x40>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_MspInit+0x40>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_CAN_MspInit+0x8c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d131      	bne.n	80013f4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_CAN_MspInit+0x90>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_CAN_MspInit+0x90>)
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	61d3      	str	r3, [r2, #28]
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_CAN_MspInit+0x90>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_CAN_MspInit+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_CAN_MspInit+0x90>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_CAN_MspInit+0x90>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_CAN_MspInit+0x94>)
 80013d6:	f000 fdd9 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_CAN_MspInit+0x94>)
 80013f0:	f000 fdcc 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40006400 	.word	0x40006400
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f87b 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}

08001456 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_1_Pin);
 800145a:	2002      	movs	r0, #2
 800145c:	f000 ff32 	bl	80022c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff fff8 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001476:	490c      	ldr	r1, [pc, #48]	; (80014a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800148c:	4c09      	ldr	r4, [pc, #36]	; (80014b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f001 fb1b 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff fe05 	bl	80010ac <main>
  bx lr
 80014a2:	4770      	bx	lr
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ac:	08002b60 	.word	0x08002b60
  ldr r2, =_sbss
 80014b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b4:	20000114 	.word	0x20000114

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fd1b 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff ff28 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fd33 	bl	8001f72 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 fcfb 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000008 	.word	0x20000008
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_IncTick+0x20>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000008 	.word	0x20000008
 8001568:	20000110 	.word	0x20000110

0800156c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000110 	.word	0x20000110

08001580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0ed      	b.n	800176e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fee6 	bl	8001370 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b4:	f7ff ffda 	bl	800156c <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ba:	e012      	b.n	80015e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015bc:	f7ff ffd6 	bl	800156c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d90b      	bls.n	80015e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2205      	movs	r2, #5
 80015da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0c5      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0e5      	beq.n	80015bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0202 	bic.w	r2, r2, #2
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001600:	f7ff ffb4 	bl	800156c <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001606:	e012      	b.n	800162e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001608:	f7ff ffb0 	bl	800156c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d90b      	bls.n	800162e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2205      	movs	r2, #5
 8001626:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e09f      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e5      	bne.n	8001608 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e5b      	ldrb	r3, [r3, #25]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e9b      	ldrb	r3, [r3, #26]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0220 	bic.w	r2, r2, #32
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7edb      	ldrb	r3, [r3, #27]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0210 	bic.w	r2, r2, #16
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0210 	orr.w	r2, r2, #16
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7f1b      	ldrb	r3, [r3, #28]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0208 	orr.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f5b      	ldrb	r3, [r3, #29]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	ea42 0103 	orr.w	r1, r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d003      	beq.n	800179c <HAL_CAN_ConfigFilter+0x26>
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	2b02      	cmp	r3, #2
 8001798:	f040 80aa 	bne.w	80018f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2201      	movs	r2, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d123      	bne.n	800181e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	401a      	ands	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3248      	adds	r2, #72	; 0x48
 80017fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001812:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001814:	6979      	ldr	r1, [r7, #20]
 8001816:	3348      	adds	r3, #72	; 0x48
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d122      	bne.n	800186c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001846:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3248      	adds	r2, #72	; 0x48
 800184c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001860:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001862:	6979      	ldr	r1, [r7, #20]
 8001864:	3348      	adds	r3, #72	; 0x48
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001886:	e007      	b.n	8001898 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018b2:	e007      	b.n	80018c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e2:	f023 0201 	bic.w	r2, r3, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e006      	b.n	80018fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d12e      	bne.n	800197a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fe1a 	bl	800156c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800193a:	e012      	b.n	8001962 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800193c:	f7ff fe16 	bl	800156c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d90b      	bls.n	8001962 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e012      	b.n	8001988 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e5      	bne.n	800193c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e006      	b.n	8001988 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_AddTxMessage+0x2c>
 80019b4:	7ffb      	ldrb	r3, [r7, #31]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	f040 80ad 	bne.w	8001b16 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8095 	beq.w	8001b06 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	0e1b      	lsrs	r3, r3, #24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10d      	bne.n	8001a14 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	6809      	ldr	r1, [r1, #0]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	440b      	add	r3, r1
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e00f      	b.n	8001a34 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a28:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3318      	adds	r3, #24
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	440b      	add	r3, r1
 8001a44:	3304      	adds	r3, #4
 8001a46:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	7d1b      	ldrb	r3, [r3, #20]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d111      	bne.n	8001a74 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3318      	adds	r3, #24
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	440b      	add	r3, r1
 8001a70:	3304      	adds	r3, #4
 8001a72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3307      	adds	r3, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	061a      	lsls	r2, r3, #24
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3306      	adds	r3, #6
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3305      	adds	r3, #5
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	3204      	adds	r2, #4
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	4610      	mov	r0, r2
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6811      	ldr	r1, [r2, #0]
 8001a9c:	ea43 0200 	orr.w	r2, r3, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001aaa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	061a      	lsls	r2, r3, #24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4610      	mov	r0, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	ea43 0200 	orr.w	r2, r3, r0
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ae0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3318      	adds	r3, #24
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e00e      	b.n	8001b24 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e006      	b.n	8001b24 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3724      	adds	r7, #36	; 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d003      	beq.n	8001b52 <HAL_CAN_GetRxMessage+0x24>
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	f040 8103 	bne.w	8001d58 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10e      	bne.n	8001b76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0f7      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0e8      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	331b      	adds	r3, #27
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0204 	and.w	r2, r3, #4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	331b      	adds	r3, #27
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0d5b      	lsrs	r3, r3, #21
 8001bc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	331b      	adds	r3, #27
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0202 	and.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	331b      	adds	r3, #27
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2208      	movs	r2, #8
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	e00b      	b.n	8001c32 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	331b      	adds	r3, #27
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0a1a      	lsrs	r2, r3, #8
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0c1a      	lsrs	r2, r3, #16
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e1a      	lsrs	r2, r3, #24
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0a1a      	lsrs	r2, r3, #8
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3305      	adds	r3, #5
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0c1a      	lsrs	r2, r3, #16
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3306      	adds	r3, #6
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e1a      	lsrs	r2, r3, #24
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3307      	adds	r3, #7
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4906      	ldr	r1, [pc, #24]	; (8001e08 <__NVIC_EnableIRQ+0x34>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff90 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff2d 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff42 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff90 	bl	8001e60 <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5f 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff35 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e169      	b.n	8002274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8158 	bne.w	800226e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a9a      	ldr	r2, [pc, #616]	; (800222c <HAL_GPIO_Init+0x2a0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fc8:	4a98      	ldr	r2, [pc, #608]	; (800222c <HAL_GPIO_Init+0x2a0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d875      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fce:	4a98      	ldr	r2, [pc, #608]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d058      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a96      	ldr	r2, [pc, #600]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d86f      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fda:	4a96      	ldr	r2, [pc, #600]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d052      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fe0:	4a94      	ldr	r2, [pc, #592]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d869      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001fe6:	4a94      	ldr	r2, [pc, #592]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04c      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001fec:	4a92      	ldr	r2, [pc, #584]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d863      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ff2:	4a92      	ldr	r2, [pc, #584]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d046      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a90      	ldr	r2, [pc, #576]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d85d      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d82a      	bhi.n	8002058 <HAL_GPIO_Init+0xcc>
 8002002:	2b12      	cmp	r3, #18
 8002004:	d859      	bhi.n	80020ba <HAL_GPIO_Init+0x12e>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HAL_GPIO_Init+0x80>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002087 	.word	0x08002087
 8002010:	08002061 	.word	0x08002061
 8002014:	08002073 	.word	0x08002073
 8002018:	080020b5 	.word	0x080020b5
 800201c:	080020bb 	.word	0x080020bb
 8002020:	080020bb 	.word	0x080020bb
 8002024:	080020bb 	.word	0x080020bb
 8002028:	080020bb 	.word	0x080020bb
 800202c:	080020bb 	.word	0x080020bb
 8002030:	080020bb 	.word	0x080020bb
 8002034:	080020bb 	.word	0x080020bb
 8002038:	080020bb 	.word	0x080020bb
 800203c:	080020bb 	.word	0x080020bb
 8002040:	080020bb 	.word	0x080020bb
 8002044:	080020bb 	.word	0x080020bb
 8002048:	080020bb 	.word	0x080020bb
 800204c:	080020bb 	.word	0x080020bb
 8002050:	08002069 	.word	0x08002069
 8002054:	0800207d 	.word	0x0800207d
 8002058:	4a79      	ldr	r2, [pc, #484]	; (8002240 <HAL_GPIO_Init+0x2b4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800205e:	e02c      	b.n	80020ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e029      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e024      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	3308      	adds	r3, #8
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e01f      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	330c      	adds	r3, #12
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e01a      	b.n	80020bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800208e:	2304      	movs	r3, #4
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e013      	b.n	80020bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	611a      	str	r2, [r3, #16]
          break;
 80020a6:	e009      	b.n	80020bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	615a      	str	r2, [r3, #20]
          break;
 80020b2:	e003      	b.n	80020bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x130>
          break;
 80020ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d801      	bhi.n	80020c6 <HAL_GPIO_Init+0x13a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_Init+0x13e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d802      	bhi.n	80020d8 <HAL_GPIO_Init+0x14c>
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x152>
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3b08      	subs	r3, #8
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	210f      	movs	r1, #15
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80b1 	beq.w	800226e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_GPIO_Init+0x2b8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002124:	4a48      	ldr	r2, [pc, #288]	; (8002248 <HAL_GPIO_Init+0x2bc>)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_GPIO_Init+0x2c0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x1ec>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3f      	ldr	r2, [pc, #252]	; (8002250 <HAL_GPIO_Init+0x2c4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1e8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <HAL_GPIO_Init+0x2c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1e4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1e0>
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 800216c:	2304      	movs	r3, #4
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1ee>
 8002178:	2300      	movs	r3, #0
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800218a:	492f      	ldr	r1, [pc, #188]	; (8002248 <HAL_GPIO_Init+0x2bc>)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	492c      	ldr	r1, [pc, #176]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4928      	ldr	r1, [pc, #160]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4922      	ldr	r1, [pc, #136]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	491e      	ldr	r1, [pc, #120]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4918      	ldr	r1, [pc, #96]	; (800225c <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4914      	ldr	r1, [pc, #80]	; (800225c <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d021      	beq.n	8002260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_GPIO_Init+0x2d0>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e021      	b.n	800226e <HAL_GPIO_Init+0x2e2>
 800222a:	bf00      	nop
 800222c:	10320000 	.word	0x10320000
 8002230:	10310000 	.word	0x10310000
 8002234:	10220000 	.word	0x10220000
 8002238:	10210000 	.word	0x10210000
 800223c:	10120000 	.word	0x10120000
 8002240:	10110000 	.word	0x10110000
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	40010800 	.word	0x40010800
 8002250:	40010c00 	.word	0x40010c00
 8002254:	40011000 	.word	0x40011000
 8002258:	40011400 	.word	0x40011400
 800225c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4909      	ldr	r1, [pc, #36]	; (8002290 <HAL_GPIO_Init+0x304>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f ae8e 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	372c      	adds	r7, #44	; 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f806 	bl	80022f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e272      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e24c      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff f8c2 	bl	800156c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff f8be 	bl	800156c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e200      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff f8ae 	bl	800156c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff f8aa 	bl	800156c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1ec      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1c0      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff f863 	bl	800156c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff f85f 	bl	800156c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1a1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff f842 	bl	800156c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7ff f83e 	bl	800156c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e180      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff f822 	bl	800156c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff f81e 	bl	800156c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e160      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fa9c 	bl	8002a88 <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff f808 	bl	800156c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff f804 	bl	800156c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e146      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe ffc5 	bl	800156c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe ffc1 	bl	800156c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e103      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4c8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b58      	ldr	r3, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe ff75 	bl	800156c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe ff71 	bl	800156c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0b1      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe ff5f 	bl	800156c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe ff5b 	bl	800156c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e09b      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8087 	beq.w	80027fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe ff2f 	bl	800156c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe ff2b 	bl	800156c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e06d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4921      	ldr	r1, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	491b      	ldr	r1, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe feff 	bl	800156c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fefb 	bl	800156c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e03d      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e035      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fee8 	bl	800156c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fee4 	bl	800156c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e026      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e01e      	b.n	80027fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e019      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_OscConfig+0x500>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0d0      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4965      	ldr	r1, [pc, #404]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d040      	beq.n	800292c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d115      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e073      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4936      	ldr	r1, [pc, #216]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fe36 	bl	800156c <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe fe32 	bl	800156c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e053      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d210      	bcs.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4922      	ldr	r1, [pc, #136]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1cc>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1d0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fd94 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08002b34 	.word	0x08002b34
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x30>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0e:	e027      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a12:	613b      	str	r3, [r7, #16]
      break;
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	0c9b      	lsrs	r3, r3, #18
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e004      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a54:	fb02 f303 	mul.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a62:	613b      	str	r3, [r7, #16]
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	007a1200 	.word	0x007a1200
 8002a7c:	08002b44 	.word	0x08002b44
 8002a80:	08002b54 	.word	0x08002b54
 8002a84:	003d0900 	.word	0x003d0900

08002a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <RCC_Delay+0x34>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <RCC_Delay+0x38>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a5b      	lsrs	r3, r3, #9
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa4:	bf00      	nop
  }
  while (Delay --);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	60fa      	str	r2, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <RCC_Delay+0x1c>
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	10624dd3 	.word	0x10624dd3

08002ac4 <memset>:
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4402      	add	r2, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	; (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 f81a 	bl	8002b1c <_init>
 8002ae8:	2600      	movs	r6, #0
 8002aea:	4d0a      	ldr	r5, [pc, #40]	; (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b58 	.word	0x08002b58
 8002b10:	08002b58 	.word	0x08002b58
 8002b14:	08002b58 	.word	0x08002b58
 8002b18:	08002b5c 	.word	0x08002b5c

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr


BlinkLed_App1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e4  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd0  08007cd0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007cd0  08007cd0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cd0  08007cd0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b48  20000070  08007d44  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08007d44  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f62f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ebc  00000000  00000000  0002f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6f  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019581  00000000  00000000  00033fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001460a  00000000  00000000  0004d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000895b7  00000000  00000000  00061b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004090  00000000  00000000  000eb134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ef1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080066d4 	.word	0x080066d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080066d4 	.word	0x080066d4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d102      	bne.n	8000664 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 800065e:	2350      	movs	r3, #80	; 0x50
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e001      	b.n	8000668 <CAN_IF_Transmit_UDS_Request+0x20>
   }
   else{
	   Local_u8SendToNode = 0x60;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 8000678:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <CAN_IF_Transmit_UDS_Request+0x5c>)
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <CAN_IF_Transmit_UDS_Request+0x58>)
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <CAN_IF_Transmit_UDS_Request+0x54>)
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <CAN_IF_Transmit_UDS_Request+0x60>)
 800068e:	f002 fb27 	bl	8002ce0 <HAL_CAN_AddTxMessage>
 8000692:	4603      	mov	r3, r0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000a00 	.word	0x20000a00
 80006a0:	20000a34 	.word	0x20000a34
 80006a4:	20000a44 	.word	0x20000a44
 80006a8:	20000914 	.word	0x20000914

080006ac <CAN_IF_Trasmit_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Trasmit_Data_Frame(uint8_t Node ,const uint8_t *DataBuffer ,uint8_t DataLength){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	//Check Is buffer NULL
	if(DataBuffer == NULL){
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <CAN_IF_Trasmit_Data_Frame+0x1a>
		return HAL_ERROR ;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e02b      	b.n	800071e <CAN_IF_Trasmit_Data_Frame+0x72>
	}
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d102      	bne.n	80006d2 <CAN_IF_Trasmit_Data_Frame+0x26>
	   Local_u8SendToNode = 0x50; //Send to 0x101
 80006cc:	2350      	movs	r3, #80	; 0x50
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <CAN_IF_Trasmit_Data_Frame+0x2a>
   }
   else{
	   Local_u8SendToNode = 0x60; //Send to 0x102
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006e6:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = DataLength;  // data length
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 80006ec:	6113      	str	r3, [r2, #16]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <CAN_IF_Trasmit_Data_Frame+0x5c>
	  TxData[index] = *( DataBuffer + index );
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	7811      	ldrb	r1, [r2, #0]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000700:	54d1      	strb	r1, [r2, r3]
   for(uint8_t index = 0 ; index < DataLength ; index++ ){
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bba      	ldrb	r2, [r7, #14]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f1      	bcc.n	80006f4 <CAN_IF_Trasmit_Data_Frame+0x48>
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <CAN_IF_Trasmit_Data_Frame+0x84>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <CAN_IF_Trasmit_Data_Frame+0x80>)
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <CAN_IF_Trasmit_Data_Frame+0x7c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <CAN_IF_Trasmit_Data_Frame+0x88>)
 8000718:	f002 fae2 	bl	8002ce0 <HAL_CAN_AddTxMessage>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000a00 	.word	0x20000a00
 800072c:	20000a34 	.word	0x20000a34
 8000730:	20000a44 	.word	0x20000a44
 8000734:	20000914 	.word	0x20000914

08000738 <CAN_IF_Receive_UDS_Respond>:

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <CAN_IF_Receive_UDS_Respond+0x40>)
 8000754:	2100      	movs	r1, #0
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000758:	f002 fb91 	bl	8002e7e <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <CAN_IF_Receive_UDS_Respond+0x3c>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000914 	.word	0x20000914
 8000774:	20000a3c 	.word	0x20000a3c
 8000778:	20000a18 	.word	0x20000a18

0800077c <Decrypt_Address_Read_Init>:
static GlobalFlag Global_BufferFlag  ;

volatile uint32_t Global_ReadAddress ;

void  Decrypt_Address_Read_Init (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	Global_ReadAddress  = STORE_AREA_START_ADDRESS ;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <Decrypt_Address_Read_Init+0x14>)
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <Decrypt_Address_Read_Init+0x18>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000098 	.word	0x20000098
 8000794:	08005000 	.word	0x08005000

08000798 <Decrypt_MainFunction>:

void Decrypt_MainFunction (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

	Std_ReturnType status ;
	
	 /*check system state value "Data receive point "*/
		status = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007a0:	f000 fcb6 	bl	8001110 <Rte_ReadSystemState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
	
		/* Check if there is an error during read operation */
		if (E_OK == status)
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d133      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		{			
			/* make sure that system state is Decrypt  */
			if (SYS_DECRYPT == Global_SystemState)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Decrypt_MainFunction+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d12f      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			{
				  /*Read buffer Flag  "Data receive point "*/
			    status = RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Global_BufferFlag);
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007b8:	f000 fc64 	bl	8001084 <Rte_ReadDecryptedDataBufferFlag>
 80007bc:	4603      	mov	r3, r0
 80007be:	71bb      	strb	r3, [r7, #6]
			   	/* Check if there is an error during read operation */
		        if (E_OK == status)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d127      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
		        {
					   /* make sure that buffer state is not set  */
		            if (BUFFER_NOT_SET == Global_BufferFlag)
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Decrypt_MainFunction+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d123      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
			        {
	                              /*access piont to decrypt SWC*/								
			      	          /*Read Decrypted Data from flash rom*/
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e00f      	b.n	80007f4 <Decrypt_MainFunction+0x5c>
						{
		                	Global_PlainDataPtr[Local_Counter] = (*(volatile uint8_t*)(Global_ReadAddress) ) ;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	b2d1      	uxtb	r1, r2
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <Decrypt_MainFunction+0x94>)
 80007e2:	54d1      	strb	r1, [r2, r3]
							Global_ReadAddress++;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <Decrypt_MainFunction+0x90>)
 80007ec:	6013      	str	r3, [r2, #0]
		                for (uint8_t Local_Counter = 0 ; Local_Counter < 8 ; Local_Counter++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9ec      	bls.n	80007d4 <Decrypt_MainFunction+0x3c>
						}
              
						if( E_OK == status )
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <Decrypt_MainFunction+0x7e>
//							    if( E_OK == status )
//                                {
//			                        /*Write decrypted buffer to decrypt port "Data send point "*/
//                                    status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
//								}
							status = RTE_WRITE_DECRYPTED_DATA_BUFFER (Global_PlainDataPtr) ;
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <Decrypt_MainFunction+0x94>)
 8000802:	f000 fbd5 	bl	8000fb0 <Rte_WriteDecryptedDataBuffer>
 8000806:	4603      	mov	r3, r0
 8000808:	71bb      	strb	r3, [r7, #6]
							 /*Change buffer flag value to set "Data send point "*/
							RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(BUFFER_SET);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc18 	bl	8001040 <Rte_WriteDecryptedDataBufferFlag>
							 /*Change system flag to SEND , "Data send point "*/
							RTE_WRITE_SYSTEM_STATE(SYS_SEND_UPDATE);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fc5b 	bl	80010cc <Rte_WriteSystemState>
			{
									/* Do nothing */
							/*system state is not Decrypt*/							
			}						
        }				      
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000094 	.word	0x20000094
 8000824:	20000095 	.word	0x20000095
 8000828:	20000098 	.word	0x20000098
 800082c:	2000008c 	.word	0x2000008c

08000830 <FR_voidInitVariables>:
volatile uint32_t Global_WriteAddress ;


/*	FR interface Function */
void FR_voidInitVariables (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	Global_WriteAddress = STORE_AREA_START_ADDRESS ;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <FR_voidInitVariables+0x14>)
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <FR_voidInitVariables+0x18>)
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c
 8000848:	0800a800 	.word	0x0800a800

0800084c <FR_FlashBlockToAddress>:


HAL_StatusTypeDef FR_FlashBlockToAddress(const uint8_t *pData , uint16_t SizeOfDataBuffer)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_Word = INITIAL_ZERO ;
 800085c:	2300      	movs	r3, #0
 800085e:	817b      	strh	r3, [r7, #10]
	uint16_t Local_Counter = INITIAL_ZERO;
 8000860:	2300      	movs	r3, #0
 8000862:	81bb      	strh	r3, [r7, #12]

	if (pData == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <FR_FlashBlockToAddress+0x24>
	{
		Local_retVal =  HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e024      	b.n	80008ba <FR_FlashBlockToAddress+0x6e>
	}
	else
	{
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 8000870:	2300      	movs	r3, #0
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	e01d      	b.n	80008b2 <FR_FlashBlockToAddress+0x66>
		{
			Local_Word = pData[Local_Counter] | (pData[Local_Counter+1] << 8) ;
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b21a      	sxth	r2, r3
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	440b      	add	r3, r1
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	817b      	strh	r3, [r7, #10]
			FR_FlashHalfWordToAddress(Global_WriteAddress,Local_Word);
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	897a      	ldrh	r2, [r7, #10]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f832 	bl	8000906 <FR_FlashHalfWordToAddress>
			Global_WriteAddress += FLASH_ADDRESS_STEP ;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <FR_FlashBlockToAddress+0x78>)
 80008aa:	6013      	str	r3, [r2, #0]
		for(Local_Counter = INITIAL_ZERO; Local_Counter < SizeOfDataBuffer ;Local_Counter += FLASH_ADDRESS_STEP)
 80008ac:	89bb      	ldrh	r3, [r7, #12]
 80008ae:	3302      	adds	r3, #2
 80008b0:	81bb      	strh	r3, [r7, #12]
 80008b2:	89ba      	ldrh	r2, [r7, #12]
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3dd      	bcc.n	8000876 <FR_FlashBlockToAddress+0x2a>
		}
	}
	return Local_retVal;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000009c 	.word	0x2000009c

080008c8 <FR_Erase_Image>:

HAL_StatusTypeDef FR_Erase_Image(uint32_t ImageAddress)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	Local_retVal;

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ImageAddress;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	22;
 80008dc:	2316      	movs	r3, #22
 80008de:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80008e0:	f002 fe1e 	bl	8003520 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80008e4:	f107 0208 	add.w	r2, r7, #8
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fefe 	bl	80036f0 <HAL_FLASHEx_Erase>
 80008f4:	4603      	mov	r3, r0
 80008f6:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Lock();
 80008f8:	f002 fe38 	bl	800356c <HAL_FLASH_Lock>

	return Local_retVal;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <FR_FlashHalfWordToAddress>:


HAL_StatusTypeDef FR_FlashHalfWordToAddress(uint32_t Copy_Address , uint16_t Copy_u16DataAddress)
{
 8000906:	b5b0      	push	{r4, r5, r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef	Local_retVal;

	HAL_FLASH_Unlock();
 8000912:	f002 fe05 	bl	8003520 <HAL_FLASH_Unlock>
	Local_retVal = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Copy_Address, Copy_u16DataAddress);
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	2200      	movs	r2, #0
 800091a:	461c      	mov	r4, r3
 800091c:	4615      	mov	r5, r2
 800091e:	4622      	mov	r2, r4
 8000920:	462b      	mov	r3, r5
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	2001      	movs	r0, #1
 8000926:	f002 fd8b 	bl	8003440 <HAL_FLASH_Program>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock();
 800092e:	f002 fe1d 	bl	800356c <HAL_FLASH_Lock>

	return Local_retVal;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bdb0      	pop	{r4, r5, r7, pc}

0800093c <ReceiveUpdate_InitializeModule>:
/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void ReceiveUpdate_InitializeModule(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	/* Init Variables */
	Global_CrcValue 				= INITIAL_VALUE ;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <ReceiveUpdate_InitializeModule+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	Global_SizeValue 				= INITIAL_VALUE ;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <ReceiveUpdate_InitializeModule+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
	Global_NodeId 					= INITIAL_VALUE ;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <ReceiveUpdate_InitializeModule+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	Global_SystemState 				= SYS_IDLE ;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <ReceiveUpdate_InitializeModule+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	Global_RxInternalSate 			= RX_IDLE ;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <ReceiveUpdate_InitializeModule+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	Global_NumberOfPackets			= INITIAL_VALUE ;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <ReceiveUpdate_InitializeModule+0x70>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	Global_RemainingBytes 			= INITIAL_VALUE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <ReceiveUpdate_InitializeModule+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	801a      	strh	r2, [r3, #0]
	Global_RxUserResponse 			= INITIAL_VALUE;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <ReceiveUpdate_InitializeModule+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
	Global_DownloadPercentage 		= INITIAL_VALUE ;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <ReceiveUpdate_InitializeModule+0x7c>)
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
	Global_DownloadUpdateProgeress 	= INITIAL_VALUE ;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <ReceiveUpdate_InitializeModule+0x80>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	Global_ReceivedBytes 			= INITIAL_VALUE;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <ReceiveUpdate_InitializeModule+0x84>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
	/* Init ESP (uart) interrupt to receive requests */
	HAL_UART_Receive_IT(&huart1 , Global_HeaderBuffer , 1);
 8000984:	2201      	movs	r2, #1
 8000986:	490f      	ldr	r1, [pc, #60]	; (80009c4 <ReceiveUpdate_InitializeModule+0x88>)
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <ReceiveUpdate_InitializeModule+0x8c>)
 800098a:	f004 fc4c 	bl	8005226 <HAL_UART_Receive_IT>
	FR_voidInitVariables();
 800098e:	f7ff ff4f 	bl	8000830 <FR_voidInitVariables>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000a0 	.word	0x200000a0
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	200000a8 	.word	0x200000a8
 80009a4:	200000a9 	.word	0x200000a9
 80009a8:	200000aa 	.word	0x200000aa
 80009ac:	200000b2 	.word	0x200000b2
 80009b0:	200000b4 	.word	0x200000b4
 80009b4:	200000b6 	.word	0x200000b6
 80009b8:	200004b8 	.word	0x200004b8
 80009bc:	200004bc 	.word	0x200004bc
 80009c0:	200004c0 	.word	0x200004c0
 80009c4:	200000ac 	.word	0x200000ac
 80009c8:	20000990 	.word	0x20000990

080009cc <ReceiveUpdate_MainFunction>:

void ReceiveUpdate_MainFunction (void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
	switch(Global_RxInternalSate)
 80009d2:	4b98      	ldr	r3, [pc, #608]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	f200 8184 	bhi.w	8000ce4 <ReceiveUpdate_MainFunction+0x318>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <ReceiveUpdate_MainFunction+0x18>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009fd 	.word	0x080009fd
 80009e8:	08000a2b 	.word	0x08000a2b
 80009ec:	08000a85 	.word	0x08000a85
 80009f0:	08000b2b 	.word	0x08000b2b
 80009f4:	08000c71 	.word	0x08000c71
 80009f8:	08000a4d 	.word	0x08000a4d
	{
		case RX_IDLE:
		{

			uint8_t Local_Error = RTE_READ_USER_RESPONSE(&Global_RxUserResponse);
 80009fc:	488e      	ldr	r0, [pc, #568]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 80009fe:	f000 fbcd 	bl	800119c <Rte_ReadUserResponse>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
			if(Local_Error == E_OK)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10e      	bne.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
			{
				if (Global_RxUserResponse == ACCEPT_UPDATE)
 8000a0c:	4b8a      	ldr	r3, [pc, #552]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d103      	bne.n	8000a1c <ReceiveUpdate_MainFunction+0x50>
				{
					Global_RxInternalSate = RX_ACCEPT_UPDATE ;
 8000a14:	4b87      	ldr	r3, [pc, #540]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e006      	b.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
				}
				else if (Global_RxUserResponse == REFUSE_UPDATE)
 8000a1c:	4b86      	ldr	r3, [pc, #536]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d102      	bne.n	8000a2a <ReceiveUpdate_MainFunction+0x5e>
				{
					Global_RxInternalSate = RX_REFUSE_UPDATE ;
 8000a24:	4b83      	ldr	r3, [pc, #524]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a26:	2205      	movs	r2, #5
 8000a28:	701a      	strb	r2, [r3, #0]
		}
		/*****************************RX_ACCEPT_UPDATE ***********************************/
		case RX_ACCEPT_UPDATE :
		{
			/* Inform ESP to accept request */
			Global_HeaderReqByte = REQUEST_ACCEPTED;
 8000a2a:	4b84      	ldr	r3, [pc, #528]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2201      	movs	r2, #1
 8000a36:	4981      	ldr	r1, [pc, #516]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a38:	4881      	ldr	r0, [pc, #516]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a3a:	f004 fadf 	bl	8004ffc <HAL_UART_Transmit>
			/*Erase Image to flash new firmware from Telematic unit*/
			FR_Erase_Image(IMAGE_NEW_FIRMWARE);
 8000a3e:	4881      	ldr	r0, [pc, #516]	; (8000c44 <ReceiveUpdate_MainFunction+0x278>)
 8000a40:	f7ff ff42 	bl	80008c8 <FR_Erase_Image>
			/* Change Internal State */
			Global_RxInternalSate = RX_RECEIVE_PACKET ;
 8000a44:	4b7b      	ldr	r3, [pc, #492]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	701a      	strb	r2, [r3, #0]
			break;
 8000a4a:	e14c      	b.n	8000ce6 <ReceiveUpdate_MainFunction+0x31a>
		}
		/*****************************RX_REFUSE_UPDATE***********************************/
		case RX_REFUSE_UPDATE :
		{
			/* Inform ESP to Reject request */
			Global_HeaderReqByte = REQUEST_REFUSED;
 8000a4c:	4b7b      	ldr	r3, [pc, #492]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a4e:	2206      	movs	r2, #6
 8000a50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2201      	movs	r2, #1
 8000a58:	4978      	ldr	r1, [pc, #480]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a5a:	4879      	ldr	r0, [pc, #484]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a5c:	f004 face 	bl	8004ffc <HAL_UART_Transmit>
			/* Initialize */
			Global_RxUserResponse = INITIAL_VALUE;
 8000a60:	4b75      	ldr	r3, [pc, #468]	; (8000c38 <ReceiveUpdate_MainFunction+0x26c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_IDLE);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fb30 	bl	80010cc <Rte_WriteSystemState>
			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000a6c:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	4b73      	ldr	r3, [pc, #460]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0220 	orr.w	r2, r2, #32
 8000a7a:	60da      	str	r2, [r3, #12]
			/* Change Internal State */
			Global_RxInternalSate = RX_IDLE ;
 8000a7c:	4b6d      	ldr	r3, [pc, #436]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
			break;
 8000a82:	e130      	b.n	8000ce6 <ReceiveUpdate_MainFunction+0x31a>
		}
		/*****************************RX_RECEIVE_HEADER***********************************/
		case RX_RECEIVE_HEADER :
		{
			/* Inform ESP to send Header */
			Global_HeaderReqByte = ESP_SEND_HEADER;
 8000a84:	4b6d      	ldr	r3, [pc, #436]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a86:	2207      	movs	r2, #7
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	2201      	movs	r2, #1
 8000a90:	496a      	ldr	r1, [pc, #424]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000a92:	486b      	ldr	r0, [pc, #428]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000a94:	f004 fab2 	bl	8004ffc <HAL_UART_Transmit>

			/* Receive Header */
			HAL_UART_Receive(&huart1, Global_HeaderBuffer, HEADER_SIZE, HAL_MAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	496a      	ldr	r1, [pc, #424]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000aa0:	4867      	ldr	r0, [pc, #412]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000aa2:	f004 fb2e 	bl	8005102 <HAL_UART_Receive>

			/* Process header */
			Global_SizeValue = Global_HeaderBuffer[0] | (Global_HeaderBuffer[1] << SHIFT_BY_8) |(Global_HeaderBuffer[2] << SHIFT_BY_16) | (Global_HeaderBuffer[3] << SHIFT_BY_24);
 8000aa6:	4b68      	ldr	r3, [pc, #416]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b66      	ldr	r3, [pc, #408]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	4b64      	ldr	r3, [pc, #400]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	431a      	orrs	r2, r3
 8000abc:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000abe:	78db      	ldrb	r3, [r3, #3]
 8000ac0:	061b      	lsls	r3, r3, #24
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b61      	ldr	r3, [pc, #388]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000ac8:	601a      	str	r2, [r3, #0]
			Global_NodeId = Global_HeaderBuffer[4];
 8000aca:	4b5f      	ldr	r3, [pc, #380]	; (8000c48 <ReceiveUpdate_MainFunction+0x27c>)
 8000acc:	791a      	ldrb	r2, [r3, #4]
 8000ace:	4b60      	ldr	r3, [pc, #384]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000ad0:	701a      	strb	r2, [r3, #0]

			/* Write Data To RTE */
			RTE_WRITE_CODE_SIZE(Global_SizeValue);
 8000ad2:	4b5e      	ldr	r3, [pc, #376]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9bc 	bl	8000e54 <Rte_WriteCodeSize>
			RTE_WRITE_NODE_ID(Global_NodeId);
 8000adc:	4b5c      	ldr	r3, [pc, #368]	; (8000c50 <ReceiveUpdate_MainFunction+0x284>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f971 	bl	8000dc8 <Rte_WriteNodeId>
			RTE_WRITE_HEADER_ACK_FLAG(HEADER_SET);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 fa1c 	bl	8000f24 <Rte_WriteHeaderAckFlag>

			/* Get info from header */
			Global_NumberOfPackets  = (uint8_t)(Global_SizeValue / PACKET_SIZE) ;
 8000aec:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	0a9b      	lsrs	r3, r3, #10
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000af6:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = (Global_SizeValue % PACKET_SIZE);
 8000af8:	4b54      	ldr	r3, [pc, #336]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000b06:	801a      	strh	r2, [r3, #0]

			/* Ack Header */
			Global_HeaderReqByte = HEADER_RECEIVED;
 8000b08:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	2201      	movs	r2, #1
 8000b14:	4949      	ldr	r1, [pc, #292]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b16:	484a      	ldr	r0, [pc, #296]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000b18:	f004 fa70 	bl	8004ffc <HAL_UART_Transmit>

			/* Change State */
			RTE_WRITE_SYSTEM_STATE(SYS_NEW_UPDATE_REQ);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fad5 	bl	80010cc <Rte_WriteSystemState>
			Global_RxInternalSate = RX_IDLE ;
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]

			break;
 8000b28:	e0dd      	b.n	8000ce6 <ReceiveUpdate_MainFunction+0x31a>
		}
		case RX_RECEIVE_PACKET:
		{
			/* Inform ESP to send Package */
			Global_HeaderReqByte = SEND_NEXT_PACKET;
 8000b2a:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2201      	movs	r2, #1
 8000b36:	4941      	ldr	r1, [pc, #260]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b38:	4841      	ldr	r0, [pc, #260]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000b3a:	f004 fa5f 	bl	8004ffc <HAL_UART_Transmit>

			if (Global_NumberOfPackets > 0)
 8000b3e:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d023      	beq.n	8000b8e <ReceiveUpdate_MainFunction+0x1c2>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, PACKET_SIZE, HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	4943      	ldr	r1, [pc, #268]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000b50:	483b      	ldr	r0, [pc, #236]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000b52:	f004 fad6 	bl	8005102 <HAL_UART_Receive>
				Global_NumberOfPackets--;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000b60:	701a      	strb	r2, [r3, #0]
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , PACKET_SIZE);
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	483d      	ldr	r0, [pc, #244]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000b68:	f7ff fe70 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack Packet */
				Global_HeaderReqByte = PACKET_RECEIVED;
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b6e:	220a      	movs	r2, #10
 8000b70:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	2201      	movs	r2, #1
 8000b78:	4930      	ldr	r1, [pc, #192]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000b7a:	4831      	ldr	r0, [pc, #196]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000b7c:	f004 fa3e 	bl	8004ffc <HAL_UART_Transmit>

				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += PACKET_SIZE ;
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b88:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e02a      	b.n	8000be4 <ReceiveUpdate_MainFunction+0x218>
			}

			else if ((Global_NumberOfPackets == 0) && (Global_RemainingBytes > 0) )
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <ReceiveUpdate_MainFunction+0x288>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d126      	bne.n	8000be4 <ReceiveUpdate_MainFunction+0x218>
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d022      	beq.n	8000be4 <ReceiveUpdate_MainFunction+0x218>
			{
				/* Receive packet */
				HAL_UART_Receive(&huart1, Global_RxBuffer, Global_RemainingBytes, HAL_MAX_DELAY);
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000ba0:	881a      	ldrh	r2, [r3, #0]
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	492d      	ldr	r1, [pc, #180]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000baa:	f004 faaa 	bl	8005102 <HAL_UART_Receive>
				/* Store Packet */
				FR_FlashBlockToAddress(Global_RxBuffer , Global_RemainingBytes);
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4829      	ldr	r0, [pc, #164]	; (8000c5c <ReceiveUpdate_MainFunction+0x290>)
 8000bb6:	f7ff fe49 	bl	800084c <FR_FlashBlockToAddress>
				/* Ack last packet */
				Global_HeaderReqByte = LAST_PACKET_RECEIVED;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000bbc:	220b      	movs	r2, #11
 8000bbe:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <ReceiveUpdate_MainFunction+0x270>)
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <ReceiveUpdate_MainFunction+0x274>)
 8000bca:	f004 fa17 	bl	8004ffc <HAL_UART_Transmit>
				/* Change Internal state */
				Global_RxInternalSate = RX_END_STATE ;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <ReceiveUpdate_MainFunction+0x268>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	701a      	strb	r2, [r3, #0]
				/* Update Received byte to calculate progress */
				Global_ReceivedBytes += Global_RemainingBytes ;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <ReceiveUpdate_MainFunction+0x28c>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000be2:	6013      	str	r3, [r2, #0]
			else
			{
				/* Error */
			}
			/*Calculate progress */
			Global_DownloadPercentage = ((float)Global_ReceivedBytes /(float) Global_SizeValue) ;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <ReceiveUpdate_MainFunction+0x294>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fb65 	bl	80002b8 <__aeabi_ui2f>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <ReceiveUpdate_MainFunction+0x280>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fb5f 	bl	80002b8 <__aeabi_ui2f>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff fc66 	bl	80004d0 <__aeabi_fdiv>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <ReceiveUpdate_MainFunction+0x298>)
 8000c0a:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = Global_DownloadPercentage * 100 ;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <ReceiveUpdate_MainFunction+0x298>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4915      	ldr	r1, [pc, #84]	; (8000c68 <ReceiveUpdate_MainFunction+0x29c>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fba8 	bl	8000368 <__aeabi_fmul>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fcf4 	bl	8000608 <__aeabi_f2uiz>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <ReceiveUpdate_MainFunction+0x2a0>)
 8000c26:	701a      	strb	r2, [r3, #0]
			/* Write to RTE to Signal UserIntrface Module */
			RTE_WRITE_DOWNLOAD_PROGRESS (Global_DownloadUpdateProgeress);
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <ReceiveUpdate_MainFunction+0x2a0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fad9 	bl	80011e4 <Rte_WriteUpdateProgress>
			break;
 8000c32:	e058      	b.n	8000ce6 <ReceiveUpdate_MainFunction+0x31a>
 8000c34:	200000aa 	.word	0x200000aa
 8000c38:	200000b6 	.word	0x200000b6
 8000c3c:	200000b1 	.word	0x200000b1
 8000c40:	20000990 	.word	0x20000990
 8000c44:	0800a800 	.word	0x0800a800
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	200000a4 	.word	0x200000a4
 8000c50:	200000a8 	.word	0x200000a8
 8000c54:	200000b2 	.word	0x200000b2
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	200000b8 	.word	0x200000b8
 8000c60:	200004c0 	.word	0x200004c0
 8000c64:	200004b8 	.word	0x200004b8
 8000c68:	42c80000 	.word	0x42c80000
 8000c6c:	200004bc 	.word	0x200004bc
		}
		/*****************************RX_END_STATE***********************************/
		case RX_END_STATE :
		{
			/* Inform the Esp Code has been received */
			Global_HeaderReqByte = ESP_DOWNLOAD_DONE;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <ReceiveUpdate_MainFunction+0x324>)
 8000c72:	220d      	movs	r2, #13
 8000c74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	491c      	ldr	r1, [pc, #112]	; (8000cf0 <ReceiveUpdate_MainFunction+0x324>)
 8000c7e:	481d      	ldr	r0, [pc, #116]	; (8000cf4 <ReceiveUpdate_MainFunction+0x328>)
 8000c80:	f004 f9bc 	bl	8004ffc <HAL_UART_Transmit>

			/* Change System state */
			RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 fa21 	bl	80010cc <Rte_WriteSystemState>

			/* Reset Variables */
			Global_CrcValue = INITIAL_VALUE;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <ReceiveUpdate_MainFunction+0x32c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
			Global_SizeValue = INITIAL_VALUE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <ReceiveUpdate_MainFunction+0x330>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
			Global_NodeId = INITIAL_VALUE;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <ReceiveUpdate_MainFunction+0x334>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
			Global_NumberOfPackets = INITIAL_VALUE;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <ReceiveUpdate_MainFunction+0x338>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			Global_RemainingBytes = INITIAL_VALUE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <ReceiveUpdate_MainFunction+0x33c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	801a      	strh	r2, [r3, #0]
			Global_RxUserResponse = INITIAL_VALUE;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <ReceiveUpdate_MainFunction+0x340>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
			Global_DownloadPercentage = INITIAL_VALUE;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <ReceiveUpdate_MainFunction+0x344>)
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			Global_DownloadUpdateProgeress = INITIAL_VALUE;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <ReceiveUpdate_MainFunction+0x348>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
			Global_ReceivedBytes = INITIAL_VALUE;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <ReceiveUpdate_MainFunction+0x34c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]

			RTE_WRITE_DOWNLOAD_PROGRESS(INITIAL_VALUE);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fa8e 	bl	80011e4 <Rte_WriteUpdateProgress>

			/* Reset ReProgram Address Variables */
			FR_voidInitVariables();
 8000cc8:	f7ff fdb2 	bl	8000830 <FR_voidInitVariables>

			/* Change system state */
			Global_RxInternalSate = RX_IDLE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <ReceiveUpdate_MainFunction+0x350>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]

			/* Enable Uart interrupt */
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <ReceiveUpdate_MainFunction+0x328>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <ReceiveUpdate_MainFunction+0x328>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0220 	orr.w	r2, r2, #32
 8000ce0:	60da      	str	r2, [r3, #12]
			break;
 8000ce2:	e000      	b.n	8000ce6 <ReceiveUpdate_MainFunction+0x31a>
		}

		/*****************************DEFUALT (ERROR)***********************************/
		default :
			/* Error */
			break ;
 8000ce4:	bf00      	nop

	}
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000b1 	.word	0x200000b1
 8000cf4:	20000990 	.word	0x20000990
 8000cf8:	200000a0 	.word	0x200000a0
 8000cfc:	200000a4 	.word	0x200000a4
 8000d00:	200000a8 	.word	0x200000a8
 8000d04:	200000b2 	.word	0x200000b2
 8000d08:	200000b4 	.word	0x200000b4
 8000d0c:	200000b6 	.word	0x200000b6
 8000d10:	200004b8 	.word	0x200004b8
 8000d14:	200004bc 	.word	0x200004bc
 8000d18:	200004c0 	.word	0x200004c0
 8000d1c:	200000aa 	.word	0x200000aa

08000d20 <HAL_UART_RxCpltCallback>:

/**************************************************************************/
/*                         Esp Uart Handler                               */
/**************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_Error ;
	//Testing
//	RTE_WRITE_USER_RESPONSE(ACCEPT_UPDATE);
	/* Check of the ESP request */
	if (NEW_UPDATE_REQUEST == Global_HeaderBuffer[0])
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_UART_RxCpltCallback+0x94>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d133      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x78>
	{
		Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8000d30:	4821      	ldr	r0, [pc, #132]	; (8000db8 <HAL_UART_RxCpltCallback+0x98>)
 8000d32:	f000 f9ed 	bl	8001110 <Rte_ReadSystemState>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73fb      	strb	r3, [r7, #15]
		/* Check whether a read operation of the system state done successfully or not */
		if (E_OK == Local_Error)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d11d      	bne.n	8000d7c <HAL_UART_RxCpltCallback+0x5c>
		{
			/* Before accepting update request will check the system state */
			if (SYS_IDLE == Global_SystemState)
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_UART_RxCpltCallback+0x98>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10e      	bne.n	8000d66 <HAL_UART_RxCpltCallback+0x46>
			{
				/* Accept the request and change system state */
				RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f000 f9bf 	bl	80010cc <Rte_WriteSystemState>
				Global_RxInternalSate = RX_RECEIVE_HEADER;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_RxCpltCallback+0x9c>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	701a      	strb	r2, [r3, #0]
				//testing without user interface
				//RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
				/* Disble the interrupt till receive the code by synch function */
				__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0220 	bic.w	r2, r2, #32
 8000d62:	60da      	str	r2, [r3, #12]
		/* Response for unvalid requests */
		Global_HeaderReqByte = INVALID_REQUEST;
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
	}

}
 8000d64:	e022      	b.n	8000dac <HAL_UART_RxCpltCallback+0x8c>
				Global_HeaderReqByte = GATEWAY_BUSY;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d68:	2203      	movs	r2, #3
 8000d6a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2201      	movs	r2, #1
 8000d72:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d76:	f004 f941 	bl	8004ffc <HAL_UART_Transmit>
}
 8000d7a:	e017      	b.n	8000dac <HAL_UART_RxCpltCallback+0x8c>
		else if (E_NOT_OK == Local_Error)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d114      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x8c>
			Global_HeaderReqByte = SYSTEM_STATE_UNDIFINED;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d92:	f004 f933 	bl	8004ffc <HAL_UART_Transmit>
}
 8000d96:	e009      	b.n	8000dac <HAL_UART_RxCpltCallback+0x8c>
		Global_HeaderReqByte = INVALID_REQUEST;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &Global_HeaderReqByte, 1, HAL_MAX_DELAY);
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2201      	movs	r2, #1
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000da8:	f004 f928 	bl	8004ffc <HAL_UART_Transmit>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	200000a9 	.word	0x200000a9
 8000dbc:	200000aa 	.word	0x200000aa
 8000dc0:	20000990 	.word	0x20000990
 8000dc4:	200000b1 	.word	0x200000b1

08000dc8 <Rte_WriteNodeId>:

/**************************************************************************/
/*                         NodeId Port                                    */
/**************************************************************************/
Std_ReturnType Rte_WriteNodeId (uint8_t Cpy_NodeId)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
	
	if (Global_NodeIdPortState == IDLE)
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <Rte_WriteNodeId+0x3c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <Rte_WriteNodeId+0x2a>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <Rte_WriteNodeId+0x3c>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_NodeId = Cpy_NodeId ; 
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <Rte_WriteNodeId+0x40>)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <Rte_WriteNodeId+0x3c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e001      	b.n	8000df6 <Rte_WriteNodeId+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200004da 	.word	0x200004da
 8000e08:	200004cc 	.word	0x200004cc

08000e0c <Rte_ReadNodeId>:

Std_ReturnType Rte_ReadNodeId (uint8_t *Cpy_NodeId)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_NodeIdPortState == IDLE) && (Cpy_NodeId != NULL_PTR))
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <Rte_ReadNodeId+0x40>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10d      	bne.n	8000e3c <Rte_ReadNodeId+0x30>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00a      	beq.n	8000e3c <Rte_ReadNodeId+0x30>
	{
		/* Lock the port to write */
		Global_NodeIdPortState = BUSY ;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <Rte_ReadNodeId+0x40>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_NodeId) = Global_NodeId ; 
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <Rte_ReadNodeId+0x44>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_NodeIdPortState = IDLE ;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <Rte_ReadNodeId+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e001      	b.n	8000e40 <Rte_ReadNodeId+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	200004da 	.word	0x200004da
 8000e50:	200004cc 	.word	0x200004cc

08000e54 <Rte_WriteCodeSize>:

/**************************************************************************/
/*                         CodeSize Port                                  */
/**************************************************************************/
Std_ReturnType Rte_WriteCodeSize(uint32_t Cpy_CodeSize)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	
	if (Global_CodeSizePortState == IDLE)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <Rte_WriteCodeSize+0x38>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d109      	bne.n	8000e7c <Rte_WriteCodeSize+0x28>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <Rte_WriteCodeSize+0x38>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_CodeSizeValue = Cpy_CodeSize ; 
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <Rte_WriteCodeSize+0x3c>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <Rte_WriteCodeSize+0x38>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e001      	b.n	8000e80 <Rte_WriteCodeSize+0x2c>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	200004d9 	.word	0x200004d9
 8000e90:	200004c8 	.word	0x200004c8

08000e94 <Rte_ReadCodeSize>:

Std_ReturnType Rte_ReadCodeSize(uint32_t *Cpy_CodeSize)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_CodeSizePortState == IDLE) && (Cpy_CodeSize != NULL_PTR))
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <Rte_ReadCodeSize+0x40>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10d      	bne.n	8000ec4 <Rte_ReadCodeSize+0x30>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00a      	beq.n	8000ec4 <Rte_ReadCodeSize+0x30>
	{
		/* Lock the port to write */
		Global_CodeSizePortState = BUSY ;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Rte_ReadCodeSize+0x40>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_CodeSize) = Global_CodeSizeValue ; 
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <Rte_ReadCodeSize+0x44>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CodeSizePortState = IDLE ;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <Rte_ReadCodeSize+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e001      	b.n	8000ec8 <Rte_ReadCodeSize+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200004d9 	.word	0x200004d9
 8000ed8:	200004c8 	.word	0x200004c8

08000edc <Rte_ReadCrc>:
	}
	return Local_ReturnError ;
}

Std_ReturnType Rte_ReadCrc(uint32_t *Cpy_Crc)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

	if ( (Global_CrcPortState == IDLE) && (Cpy_Crc != NULL_PTR) )
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <Rte_ReadCrc+0x40>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10d      	bne.n	8000f0c <Rte_ReadCrc+0x30>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <Rte_ReadCrc+0x30>
	{
		/* Lock the port to write */
		Global_CrcPortState = BUSY ;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <Rte_ReadCrc+0x40>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_Crc) = Global_CrcValue ;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <Rte_ReadCrc+0x44>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_CrcPortState = IDLE ;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <Rte_ReadCrc+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e001      	b.n	8000f10 <Rte_ReadCrc+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	200004d8 	.word	0x200004d8
 8000f20:	200004c4 	.word	0x200004c4

08000f24 <Rte_WriteHeaderAckFlag>:

/**************************************************************************/
/*                         Header Ack Flag Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteHeaderAckFlag(FlagType Cpy_HeaderAckFlag)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
	
	if (Global_HeaderAckFlagState == IDLE)
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <Rte_WriteHeaderAckFlag+0x2a>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_HeaderAckFlag = Cpy_HeaderAckFlag ; 
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <Rte_WriteHeaderAckFlag+0x40>)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <Rte_WriteHeaderAckFlag+0x3c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e001      	b.n	8000f52 <Rte_WriteHeaderAckFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200004db 	.word	0x200004db
 8000f64:	200004cd 	.word	0x200004cd

08000f68 <Rte_ReadHeaderAckFlag>:

Std_ReturnType Rte_ReadHeaderAckFlag(FlagType *Cpy_HeaderAckFlag)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_HeaderAckFlagState == IDLE) && (Cpy_HeaderAckFlag != NULL_PTR) )
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <Rte_ReadHeaderAckFlag+0x40>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10d      	bne.n	8000f98 <Rte_ReadHeaderAckFlag+0x30>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <Rte_ReadHeaderAckFlag+0x30>
	{
		/* Lock the port to write */
		Global_HeaderAckFlagState = BUSY ;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <Rte_ReadHeaderAckFlag+0x40>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_HeaderAckFlag) = Global_HeaderAckFlag ; 
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Rte_ReadHeaderAckFlag+0x44>)
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_HeaderAckFlagState = IDLE ;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <Rte_ReadHeaderAckFlag+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e001      	b.n	8000f9c <Rte_ReadHeaderAckFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	200004db 	.word	0x200004db
 8000fac:	200004cd 	.word	0x200004cd

08000fb0 <Rte_WriteDecryptedDataBuffer>:

/**************************************************************************/
/*                         Decrypted Data Buffer Port                     */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBuffer(uint8_t *Cpy_DecryptedDataBufferPtr)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
	
	if ((Global_DecryptedDataBufferState == IDLE)&& (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10c      	bne.n	8000fde <Rte_WriteDecryptedDataBuffer+0x2e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d009      	beq.n	8000fde <Rte_WriteDecryptedDataBuffer+0x2e>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferPtr = Cpy_DecryptedDataBufferPtr ; 
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <Rte_WriteDecryptedDataBuffer+0x44>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <Rte_WriteDecryptedDataBuffer+0x40>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e001      	b.n	8000fe2 <Rte_WriteDecryptedDataBuffer+0x32>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200004dc 	.word	0x200004dc
 8000ff4:	200004d0 	.word	0x200004d0

08000ff8 <Rte_ReadDecryptedDataBuffer>:

Std_ReturnType Rte_ReadDecryptedDataBuffer(uint8_t **Cpy_DecryptedDataBufferPtr)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferState == IDLE) && (Cpy_DecryptedDataBufferPtr != NULL_PTR))
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <Rte_ReadDecryptedDataBuffer+0x40>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10d      	bne.n	8001028 <Rte_ReadDecryptedDataBuffer+0x30>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00a      	beq.n	8001028 <Rte_ReadDecryptedDataBuffer+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferState = BUSY ;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <Rte_ReadDecryptedDataBuffer+0x40>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferPtr) = Global_DecryptedDataBufferPtr ; 
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <Rte_ReadDecryptedDataBuffer+0x44>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferState = IDLE ;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <Rte_ReadDecryptedDataBuffer+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e001      	b.n	800102c <Rte_ReadDecryptedDataBuffer+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	200004dc 	.word	0x200004dc
 800103c:	200004d0 	.word	0x200004d0

08001040 <Rte_WriteDecryptedDataBufferFlag>:

/**************************************************************************/
/*                         Decrypted Data Buffer Flag Port                */
/**************************************************************************/
Std_ReturnType Rte_WriteDecryptedDataBufferFlag(FlagType Cpy_DecryptedDataBufferFlag)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
	
	if (Global_DecryptedDataBufferFlagState == IDLE)
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <Rte_WriteDecryptedDataBufferFlag+0x2a>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_DecryptedDataBufferFlag = Cpy_DecryptedDataBufferFlag ; 
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <Rte_WriteDecryptedDataBufferFlag+0x40>)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <Rte_WriteDecryptedDataBufferFlag+0x3c>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e001      	b.n	800106e <Rte_WriteDecryptedDataBufferFlag+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200004dd 	.word	0x200004dd
 8001080:	200004d4 	.word	0x200004d4

08001084 <Rte_ReadDecryptedDataBufferFlag>:

Std_ReturnType Rte_ReadDecryptedDataBufferFlag(FlagType *Cpy_DecryptedDataBufferFlag)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_DecryptedDataBufferFlagState == IDLE) && (Cpy_DecryptedDataBufferFlag != NULL_PTR) )
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10d      	bne.n	80010b4 <Rte_ReadDecryptedDataBufferFlag+0x30>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00a      	beq.n	80010b4 <Rte_ReadDecryptedDataBufferFlag+0x30>
	{
		/* Lock the port to write */
		Global_DecryptedDataBufferFlagState = BUSY ;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_DecryptedDataBufferFlag) = Global_DecryptedDataBufferFlag ; 
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Rte_ReadDecryptedDataBufferFlag+0x44>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_DecryptedDataBufferFlagState = IDLE ;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <Rte_ReadDecryptedDataBufferFlag+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e001      	b.n	80010b8 <Rte_ReadDecryptedDataBufferFlag+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	200004dd 	.word	0x200004dd
 80010c8:	200004d4 	.word	0x200004d4

080010cc <Rte_WriteSystemState>:

/**************************************************************************/
/*                         SystemState Port                               */
/**************************************************************************/
Std_ReturnType Rte_WriteSystemState(SystemStateType Cpy_SystemState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
	
	if (Global_SystemStateMachineState == IDLE)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <Rte_WriteSystemState+0x3c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d109      	bne.n	80010f6 <Rte_WriteSystemState+0x2a>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <Rte_WriteSystemState+0x3c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_SystemStateMachine = Cpy_SystemState ; 
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <Rte_WriteSystemState+0x40>)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <Rte_WriteSystemState+0x3c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e001      	b.n	80010fa <Rte_WriteSystemState+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200004de 	.word	0x200004de
 800110c:	200004d5 	.word	0x200004d5

08001110 <Rte_ReadSystemState>:

Std_ReturnType Rte_ReadSystemState(SystemStateType *Cpy_SystemState)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_SystemStateMachineState == IDLE) && (Cpy_SystemState != NULL_PTR))
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <Rte_ReadSystemState+0x40>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10d      	bne.n	8001140 <Rte_ReadSystemState+0x30>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <Rte_ReadSystemState+0x30>
	{
		/* Lock the port to write */
		Global_SystemStateMachineState = BUSY ;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <Rte_ReadSystemState+0x40>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_SystemState) = Global_SystemStateMachine ; 
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <Rte_ReadSystemState+0x44>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_SystemStateMachineState = IDLE ;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <Rte_ReadSystemState+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e001      	b.n	8001144 <Rte_ReadSystemState+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	200004de 	.word	0x200004de
 8001154:	200004d5 	.word	0x200004d5

08001158 <Rte_WriteUserResponse>:

/**************************************************************************/
/*                         UserResponse Port                              */
/**************************************************************************/
Std_ReturnType Rte_WriteUserResponse(uint8_t Cpy_UserResponse)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UserResponsePortState == IDLE)
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <Rte_WriteUserResponse+0x3c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <Rte_WriteUserResponse+0x2a>
	{
		/* Lock the port to write */
		Global_UserResponsePortState = BUSY ;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <Rte_WriteUserResponse+0x3c>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UserResponse = Cpy_UserResponse ; 
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <Rte_WriteUserResponse+0x40>)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UserResponsePortState = IDLE ;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <Rte_WriteUserResponse+0x3c>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e001      	b.n	8001186 <Rte_WriteUserResponse+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200004df 	.word	0x200004df
 8001198:	200004d6 	.word	0x200004d6

0800119c <Rte_ReadUserResponse>:

Std_ReturnType Rte_ReadUserResponse(uint8_t *Cpy_UserResponse)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_UserResponsePortState == IDLE) && (Cpy_UserResponse != NULL_PTR) )
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <Rte_ReadUserResponse+0x40>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10d      	bne.n	80011cc <Rte_ReadUserResponse+0x30>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <Rte_ReadUserResponse+0x30>
	{
		/* Lock the port to write */
		Global_UserResponsePortState = BUSY ;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <Rte_ReadUserResponse+0x40>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_UserResponse) = Global_UserResponse ; 
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <Rte_ReadUserResponse+0x44>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_UserResponsePortState = IDLE ;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <Rte_ReadUserResponse+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e001      	b.n	80011d0 <Rte_ReadUserResponse+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	200004df 	.word	0x200004df
 80011e0:	200004d6 	.word	0x200004d6

080011e4 <Rte_WriteUpdateProgress>:

/**************************************************************************/
/*                         Update Progress Port                           */
/**************************************************************************/
Std_ReturnType Rte_WriteUpdateProgress(uint8_t Cpy_UpdateProgress)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Local_ReturnError = E_OK ;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
	
	if (Global_UpdateProgressPortState == IDLE)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <Rte_WriteUpdateProgress+0x3c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <Rte_WriteUpdateProgress+0x2a>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <Rte_WriteUpdateProgress+0x3c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		Global_UpdateProgress = Cpy_UpdateProgress ; 
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <Rte_WriteUpdateProgress+0x40>)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	7013      	strb	r3, [r2, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <Rte_WriteUpdateProgress+0x3c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e001      	b.n	8001212 <Rte_WriteUpdateProgress+0x2e>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200004e0 	.word	0x200004e0
 8001224:	200004d7 	.word	0x200004d7

08001228 <Rte_ReadUpdateProgress>:

Std_ReturnType Rte_ReadUpdateProgress(uint8_t *Cpy_UpdateProgress)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Local_ReturnError = E_OK ;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
	
	if ( (Global_UpdateProgressPortState == IDLE) && (Cpy_UpdateProgress != NULL_PTR) )
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <Rte_ReadUpdateProgress+0x40>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10d      	bne.n	8001258 <Rte_ReadUpdateProgress+0x30>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00a      	beq.n	8001258 <Rte_ReadUpdateProgress+0x30>
	{
		/* Lock the port to write */
		Global_UpdateProgressPortState = BUSY ;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <Rte_ReadUpdateProgress+0x40>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		/* Write the data to the port */
		 (*Cpy_UpdateProgress) = Global_UpdateProgress ; 
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <Rte_ReadUpdateProgress+0x44>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	701a      	strb	r2, [r3, #0]
		/* Unlock the port after done writing */
		Global_UpdateProgressPortState = IDLE ;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <Rte_ReadUpdateProgress+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	e001      	b.n	800125c <Rte_ReadUpdateProgress+0x34>
	}
	else
	{
		Local_ReturnError = E_NOT_OK ;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ReturnError ;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	200004e0 	.word	0x200004e0
 800126c:	200004d7 	.word	0x200004d7

08001270 <SSD1306_Init>:

#define SSD1306_DEACTIVATE_SCROLL   0x2E // Stop scroll

#define SSD1306_NORMALDISPLAY       0xA6

uint8_t SSD1306_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001276:	f000 fa27 	bl	80016c8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800127a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800127e:	2201      	movs	r2, #1
 8001280:	2178      	movs	r1, #120	; 0x78
 8001282:	485b      	ldr	r0, [pc, #364]	; (80013f0 <SSD1306_Init+0x180>)
 8001284:	f002 fed2 	bl	800402c <HAL_I2C_IsDeviceReady>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800128e:	2300      	movs	r3, #0
 8001290:	e0a9      	b.n	80013e6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001292:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001296:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001298:	e002      	b.n	80012a0 <SSD1306_Init+0x30>
		p--;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3b01      	subs	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80012a6:	22ae      	movs	r2, #174	; 0xae
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	; 0x78
 80012ac:	f000 fa86 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	; 0x78
 80012b6:	f000 fa81 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012ba:	2210      	movs	r2, #16
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	; 0x78
 80012c0:	f000 fa7c 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012c4:	22b0      	movs	r2, #176	; 0xb0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	; 0x78
 80012ca:	f000 fa77 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012ce:	22c8      	movs	r2, #200	; 0xc8
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	; 0x78
 80012d4:	f000 fa72 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	; 0x78
 80012de:	f000 fa6d 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012e2:	2210      	movs	r2, #16
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	; 0x78
 80012e8:	f000 fa68 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	; 0x78
 80012f2:	f000 fa63 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012f6:	2281      	movs	r2, #129	; 0x81
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 fa5e 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	; 0x78
 8001306:	f000 fa59 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800130a:	22a1      	movs	r2, #161	; 0xa1
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	; 0x78
 8001310:	f000 fa54 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001314:	22a6      	movs	r2, #166	; 0xa6
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	; 0x78
 800131a:	f000 fa4f 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800131e:	22a8      	movs	r2, #168	; 0xa8
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	; 0x78
 8001324:	f000 fa4a 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001328:	223f      	movs	r2, #63	; 0x3f
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	; 0x78
 800132e:	f000 fa45 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001332:	22a4      	movs	r2, #164	; 0xa4
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	; 0x78
 8001338:	f000 fa40 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800133c:	22d3      	movs	r2, #211	; 0xd3
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	; 0x78
 8001342:	f000 fa3b 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	; 0x78
 800134c:	f000 fa36 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001350:	22d5      	movs	r2, #213	; 0xd5
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	; 0x78
 8001356:	f000 fa31 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800135a:	22f0      	movs	r2, #240	; 0xf0
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	; 0x78
 8001360:	f000 fa2c 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001364:	22d9      	movs	r2, #217	; 0xd9
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	; 0x78
 800136a:	f000 fa27 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800136e:	2222      	movs	r2, #34	; 0x22
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	; 0x78
 8001374:	f000 fa22 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001378:	22da      	movs	r2, #218	; 0xda
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	; 0x78
 800137e:	f000 fa1d 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001382:	2212      	movs	r2, #18
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f000 fa18 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800138c:	22db      	movs	r2, #219	; 0xdb
 800138e:	2100      	movs	r1, #0
 8001390:	2078      	movs	r0, #120	; 0x78
 8001392:	f000 fa13 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001396:	2220      	movs	r2, #32
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f000 fa0e 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013a0:	228d      	movs	r2, #141	; 0x8d
 80013a2:	2100      	movs	r1, #0
 80013a4:	2078      	movs	r0, #120	; 0x78
 80013a6:	f000 fa09 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013aa:	2214      	movs	r2, #20
 80013ac:	2100      	movs	r1, #0
 80013ae:	2078      	movs	r0, #120	; 0x78
 80013b0:	f000 fa04 	bl	80017bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013b4:	22af      	movs	r2, #175	; 0xaf
 80013b6:	2100      	movs	r1, #0
 80013b8:	2078      	movs	r0, #120	; 0x78
 80013ba:	f000 f9ff 	bl	80017bc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013be:	222e      	movs	r2, #46	; 0x2e
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 f9fa 	bl	80017bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f843 	bl	8001454 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013ce:	f000 f813 	bl	80013f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <SSD1306_Init+0x184>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SSD1306_Init+0x184>)
 80013da:	2200      	movs	r2, #0
 80013dc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SSD1306_Init+0x184>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000093c 	.word	0x2000093c
 80013f4:	200008e4 	.word	0x200008e4

080013f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e01d      	b.n	8001440 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3b50      	subs	r3, #80	; 0x50
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	2078      	movs	r0, #120	; 0x78
 8001410:	f000 f9d4 	bl	80017bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2078      	movs	r0, #120	; 0x78
 800141a:	f000 f9cf 	bl	80017bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800141e:	2210      	movs	r2, #16
 8001420:	2100      	movs	r1, #0
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f000 f9ca 	bl	80017bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <SSD1306_UpdateScreen+0x58>)
 800142e:	441a      	add	r2, r3
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	2078      	movs	r0, #120	; 0x78
 8001436:	f000 f95b 	bl	80016f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3301      	adds	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d9de      	bls.n	8001404 <SSD1306_UpdateScreen+0xc>
	}
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200004e4 	.word	0x200004e4

08001454 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <SSD1306_Fill+0x14>
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <SSD1306_Fill+0x16>
 8001468:	23ff      	movs	r3, #255	; 0xff
 800146a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146e:	4619      	mov	r1, r3
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <SSD1306_Fill+0x2c>)
 8001472:	f004 fc9d 	bl	8005db0 <memset>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200004e4 	.word	0x200004e4

08001484 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	460b      	mov	r3, r1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	70fb      	strb	r3, [r7, #3]
	if (
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b7f      	cmp	r3, #127	; 0x7f
 800149a:	d848      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	2b3f      	cmp	r3, #63	; 0x3f
 80014a0:	d845      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <SSD1306_DrawPixel+0xb4>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d11a      	bne.n	80014f4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	b298      	uxth	r0, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <SSD1306_DrawPixel+0xb8>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b259      	sxtb	r1, r3
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	b2c9      	uxtb	r1, r1
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <SSD1306_DrawPixel+0xb8>)
 80014f0:	54d1      	strb	r1, [r2, r3]
 80014f2:	e01d      	b.n	8001530 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014f4:	88fa      	ldrh	r2, [r7, #6]
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b298      	uxth	r0, r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	01db      	lsls	r3, r3, #7
 8001500:	4413      	add	r3, r2
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <SSD1306_DrawPixel+0xb8>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	b25a      	sxtb	r2, r3
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	b25b      	sxtb	r3, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	4603      	mov	r3, r0
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	4413      	add	r3, r2
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <SSD1306_DrawPixel+0xb8>)
 800152a:	54d1      	strb	r1, [r2, r3]
 800152c:	e000      	b.n	8001530 <SSD1306_DrawPixel+0xac>
		return;
 800152e:	bf00      	nop
	}
}
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	200008e4 	.word	0x200008e4
 800153c:	200004e4 	.word	0x200004e4

08001540 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <SSD1306_GotoXY+0x28>)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <SSD1306_GotoXY+0x28>)
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	8053      	strh	r3, [r2, #2]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200008e4 	.word	0x200008e4

0800156c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <SSD1306_Putc+0xfc>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
	if (
 8001588:	2b7f      	cmp	r3, #127	; 0x7f
 800158a:	dc07      	bgt.n	800159c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <SSD1306_Putc+0xfc>)
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001598:	2b3f      	cmp	r3, #63	; 0x3f
 800159a:	dd01      	ble.n	80015a0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800159c:	2300      	movs	r3, #0
 800159e:	e05e      	b.n	800165e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e04b      	b.n	800163e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3b20      	subs	r3, #32
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	7849      	ldrb	r1, [r1, #1]
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	440b      	add	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	e030      	b.n	800162c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <SSD1306_Putc+0xfc>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <SSD1306_Putc+0xfc>)
 80015e8:	885a      	ldrh	r2, [r3, #2]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff ff45 	bl	8001484 <SSD1306_DrawPixel>
 80015fa:	e014      	b.n	8001626 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <SSD1306_Putc+0xfc>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b298      	uxth	r0, r3
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <SSD1306_Putc+0xfc>)
 800160a:	885a      	ldrh	r2, [r3, #2]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b299      	uxth	r1, r3
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f7ff ff2f 	bl	8001484 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4293      	cmp	r3, r2
 8001636:	d3c8      	bcc.n	80015ca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	461a      	mov	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3ad      	bcc.n	80015a6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <SSD1306_Putc+0xfc>)
 800164c:	881a      	ldrh	r2, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <SSD1306_Putc+0xfc>)
 800165a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800165c:	79fb      	ldrb	r3, [r7, #7]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200008e4 	.word	0x200008e4

0800166c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800167a:	e012      	b.n	80016a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff71 	bl	800156c <SSD1306_Putc>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d002      	beq.n	800169c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	e008      	b.n	80016ae <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1e8      	bne.n	800167c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	781b      	ldrb	r3, [r3, #0]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <SSD1306_Clear>:
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_Clear (void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff feca 	bl	8001454 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80016c0:	f7ff fe9a 	bl	80013f8 <SSD1306_UpdateScreen>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <ssd1306_I2C_Init>:
//   | |   / /| |     
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void ssd1306_I2C_Init() {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <ssd1306_I2C_Init+0x24>)
 80016d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016d2:	e002      	b.n	80016da <ssd1306_I2C_Init+0x12>
		p--;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f9      	bne.n	80016d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	0003d090 	.word	0x0003d090

080016f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b0c7      	sub	sp, #284	; 0x11c
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80016fe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001702:	600a      	str	r2, [r1, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800170e:	4622      	mov	r2, r4
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001716:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800171a:	4602      	mov	r2, r0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001726:	460a      	mov	r2, r1
 8001728:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800172a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800172e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001732:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001736:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001744:	e015      	b.n	8001772 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001746:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800174a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800174e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	441a      	add	r2, r3
 8001756:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800175a:	3301      	adds	r3, #1
 800175c:	7811      	ldrb	r1, [r2, #0]
 800175e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001762:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001766:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001768:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800176c:	3301      	adds	r3, #1
 800176e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001772:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001776:	b29b      	uxth	r3, r3
 8001778:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800177c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8df      	bhi.n	8001746 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800178a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b299      	uxth	r1, r3
 8001792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001796:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f107 020c 	add.w	r2, r7, #12
 80017a4:	200a      	movs	r0, #10
 80017a6:	9000      	str	r0, [sp, #0]
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80017aa:	f002 fb41 	bl	8003e30 <HAL_I2C_Master_Transmit>
}
 80017ae:	bf00      	nop
 80017b0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	2000093c 	.word	0x2000093c

080017bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	460b      	mov	r3, r1
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	4613      	mov	r3, r2
 80017cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017d2:	797b      	ldrb	r3, [r7, #5]
 80017d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	b299      	uxth	r1, r3
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	230a      	movs	r3, #10
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2302      	movs	r3, #2
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <ssd1306_I2C_Write+0x38>)
 80017e6:	f002 fb23 	bl	8003e30 <HAL_I2C_Master_Transmit>
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000093c 	.word	0x2000093c

080017f8 <Transmit_InitializeModule>:
*******************************************************************************/

/*****************************Module Function Definitions.*********************/

Std_ReturnType Transmit_InitializeModule(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
   // Initalize static variable in this module
   Static_uint32CodeSize                       = INITIALIZE_WITH_ZERO;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <Transmit_InitializeModule+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                          = INITIALIZE_WITH_ZERO;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <Transmit_InitializeModule+0x5c>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter                 = INITIALIZE_WITH_ZERO;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <Transmit_InitializeModule+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets                = INITIALIZE_WITH_ZERO;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <Transmit_InitializeModule+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket          = INITIALIZE_WITH_ZERO;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <Transmit_InitializeModule+0x68>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
   Static_InstallPercentage					   = INITIALIZE_WITH_ZERO;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <Transmit_InitializeModule+0x6c>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
   Static_InstallUpdateProgeress			   = INITIALIZE_WITH_ZERO;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <Transmit_InitializeModule+0x70>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
   // Initialize current state variable
   Static_StateVariable                        = IDLE_STATE;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <Transmit_InitializeModule+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
   // Fill state array with function represent each state
   Static_ArrayOfStates[IDLE_STATE]            = Transmit_IdleState;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <Transmit_InitializeModule+0x78>)
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <Transmit_InitializeModule+0x7c>)
 8001832:	601a      	str	r2, [r3, #0]
   Static_ArrayOfStates[GET_TRANSMIT_HEADER]   = Transmit_GetTransmitHeader;
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <Transmit_InitializeModule+0x78>)
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <Transmit_InitializeModule+0x80>)
 8001838:	605a      	str	r2, [r3, #4]
   Static_ArrayOfStates[CONSUME_TRANSMIT_DATA] = Transmit_ConsumeTransmitData;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <Transmit_InitializeModule+0x78>)
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <Transmit_InitializeModule+0x84>)
 800183e:	609a      	str	r2, [r3, #8]
   Static_ArrayOfStates[FINISHING_STATE]       = Transmit_FinishingState;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <Transmit_InitializeModule+0x78>)
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <Transmit_InitializeModule+0x88>)
 8001844:	60da      	str	r2, [r3, #12]

   return E_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	200008ec 	.word	0x200008ec
 8001854:	200008f0 	.word	0x200008f0
 8001858:	200008f2 	.word	0x200008f2
 800185c:	200008f4 	.word	0x200008f4
 8001860:	200008f6 	.word	0x200008f6
 8001864:	200008f8 	.word	0x200008f8
 8001868:	200008fc 	.word	0x200008fc
 800186c:	200008fd 	.word	0x200008fd
 8001870:	20000900 	.word	0x20000900
 8001874:	080018b9 	.word	0x080018b9
 8001878:	08001905 	.word	0x08001905
 800187c:	080019c5 	.word	0x080019c5
 8001880:	08001b49 	.word	0x08001b49

08001884 <Transmit_MainFunction>:

Std_ReturnType Transmit_MainFunction(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
   Std_ReturnType       Local_ReturnStatus = E_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	71fb      	strb	r3, [r7, #7]
   State_PtrToFunction  RunState;
   RunState           = Static_ArrayOfStates[Static_StateVariable];
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <Transmit_MainFunction+0x2c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <Transmit_MainFunction+0x30>)
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	603b      	str	r3, [r7, #0]
   Local_ReturnStatus = RunState(NULL_PTR);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2000      	movs	r0, #0
 80018a0:	4798      	blx	r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
   return Local_ReturnStatus;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200008fd 	.word	0x200008fd
 80018b4:	20000900 	.word	0x20000900

080018b8 <Transmit_IdleState>:

/*****************************Private Functions' Definitions*******************************/

/*****************************Functions Represent states***********************************/
static Std_ReturnType Transmit_IdleState(void *Cpy_voidPtr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus       = E_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
   FlagType       Local_uint8HeaderFlagValue  = HEADER_NOT_SET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
   // Get Header Flag Value.
   Local_ReturnStatus = RTE_READ_HEADER_ACK_FLAG(&Local_uint8HeaderFlagValue);
 80018c8:	f107 030e 	add.w	r3, r7, #14
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb4b 	bl	8000f68 <Rte_ReadHeaderAckFlag>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
   if(E_OK == Local_ReturnStatus)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <Transmit_IdleState+0x38>
   {
      // Check The Header Flag Value
      if(HEADER_SET == Local_uint8HeaderFlagValue)
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d103      	bne.n	80018ea <Transmit_IdleState+0x32>
      {
         // Go to Get and Transmit Header State.
         Static_StateVariable = GET_TRANSMIT_HEADER;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <Transmit_IdleState+0x48>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e004      	b.n	80018f4 <Transmit_IdleState+0x3c>
      }
      else
      {
         Local_ReturnStatus = HEADER_NOT_SET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e001      	b.n	80018f4 <Transmit_IdleState+0x3c>
      }
   }
   else
   {
      Local_ReturnStatus = E_NOT_OK;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200008fd 	.word	0x200008fd

08001904 <Transmit_GetTransmitHeader>:

static Std_ReturnType Transmit_GetTransmitHeader(void *Cpy_voidPtr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
   Std_ReturnType Local_ReturnStatus                            = E_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t        Local_HeaderBuffer[HEADER_INFORMATION_SIZE]   = {INITIALIZE_WITH_ZERO};
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
   uint8_t        Local_uint8NodeId                           	= INITIALIZE_WITH_ZERO;
 800191a:	2300      	movs	r3, #0
 800191c:	76fb      	strb	r3, [r7, #27]
   uint32_t       Local_uint32CodeSize                       	= INITIALIZE_WITH_ZERO;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
   uint32_t       Local_uint32CrcValue                      	= INITIALIZE_WITH_ZERO;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
   uint8_t        Local_uint8ReceivedAck                        = INITIALIZE_WITH_ZERO;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
   // Consume Header Information.     
   Transmit_ConsumeHeader(&Local_uint8NodeId, &Local_uint32CodeSize, &Local_uint32CrcValue);
 800192a:	f107 0210 	add.w	r2, r7, #16
 800192e:	f107 0114 	add.w	r1, r7, #20
 8001932:	f107 031b 	add.w	r3, r7, #27
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f944 	bl	8001bc4 <Transmit_ConsumeHeader>
   // Save Size and Node Id.
   Transmit_SaveHeader(&Local_uint8NodeId, &Local_uint32CodeSize);
 800193c:	f107 0214 	add.w	r2, r7, #20
 8001940:	f107 031b 	add.w	r3, r7, #27
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f992 	bl	8001c70 <Transmit_SaveHeader>
   // Handle header information
   Transmit_HandleHeader(Local_uint32CodeSize, Local_uint32CrcValue, Local_HeaderBuffer);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	6939      	ldr	r1, [r7, #16]
 8001950:	f107 021c 	add.w	r2, r7, #28
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f951 	bl	8001bfc <Transmit_HandleHeader>
   /************************Sequence Between Gateway and Boot_loader********************/

   // Request Program control.
   CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_CONTROL_SESSION);
 800195a:	7efb      	ldrb	r3, [r7, #27]
 800195c:	2110      	movs	r1, #16
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe72 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001964:	f107 030f 	add.w	r3, r7, #15
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fee5 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACCEPT_UPGRADE_REQUEST == Local_uint8ReceivedAck)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b50      	cmp	r3, #80	; 0x50
 8001972:	d113      	bne.n	800199c <Transmit_GetTransmitHeader+0x98>
   {
      // Request sending Header.
      CAN_IF_Transmit_UDS_Request(Local_uint8NodeId, UDS_GWY_REQUEST_SENDING_HEADER);
 8001974:	7efb      	ldrb	r3, [r7, #27]
 8001976:	2134      	movs	r1, #52	; 0x34
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fe65 	bl	8000648 <CAN_IF_Transmit_UDS_Request>

      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800197e:	f107 030f 	add.w	r3, r7, #15
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fed8 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

      if (UDS_MCU_ACCEPT_RECEIVING_HEADER == Local_uint8ReceivedAck)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b73      	cmp	r3, #115	; 0x73
 800198c:	d106      	bne.n	800199c <Transmit_GetTransmitHeader+0x98>
      {
         // Sending header.
    	 CAN_IF_Trasmit_Data_Frame(Local_uint8NodeId, Local_HeaderBuffer, HEADER_INFORMATION_SIZE);
 800198e:	7efb      	ldrb	r3, [r7, #27]
 8001990:	f107 011c 	add.w	r1, r7, #28
 8001994:	2208      	movs	r2, #8
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fe88 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
   else
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 800199c:	f107 030f 	add.w	r3, r7, #15
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fec9 	bl	8000738 <CAN_IF_Receive_UDS_Respond>

   // Check received Ack
   if(UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED == Local_uint8ReceivedAck)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b74      	cmp	r3, #116	; 0x74
 80019aa:	d102      	bne.n	80019b2 <Transmit_GetTransmitHeader+0xae>
   {
	   Static_StateVariable = CONSUME_TRANSMIT_DATA;
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <Transmit_GetTransmitHeader+0xbc>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
   {
      //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
   }
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return Local_ReturnStatus;
 80019b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200008fd 	.word	0x200008fd

080019c4 <Transmit_ConsumeTransmitData>:

static Std_ReturnType Transmit_ConsumeTransmitData(void *Cpy_voidPtr)
{    
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
   FlagType         Local_uint8BufferFlagValue              = BUFFER_NOT_SET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	75fb      	strb	r3, [r7, #23]
   uint8_t          *Local_uint8DataBuffer                  = NULL_PTR ;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
   uint8_t          Local_uint8ReceivedAck                  = INITIALIZE_WITH_ZERO;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

   // Calculate number of packets and number of bytes in the last packet.
   Static_uint16NumberOfPackets            = (Static_uint32CodeSize) / (DATA_BUFFER_SIZE);
 80019d8:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <Transmit_ConsumeTransmitData+0x160>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <Transmit_ConsumeTransmitData+0x164>)
 80019e2:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket      = (Static_uint32CodeSize) % (DATA_BUFFER_SIZE);
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <Transmit_ConsumeTransmitData+0x160>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <Transmit_ConsumeTransmitData+0x168>)
 80019f2:	701a      	strb	r2, [r3, #0]
   // Get Buffer Flag Value.
   RTE_READ_DECRYPTED_DATA_BUFFER_FLAG(&Local_uint8BufferFlagValue);
 80019f4:	f107 0317 	add.w	r3, r7, #23
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb43 	bl	8001084 <Rte_ReadDecryptedDataBufferFlag>
   // Check The Buffer Flag Value
   if(BUFFER_SET == Local_uint8BufferFlagValue)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 8089 	bne.w	8001b18 <Transmit_ConsumeTransmitData+0x154>
   {
      // Consume Data and Increase packet counter by 1
      RTE_READ_DECRYPTED_DATA_BUFFER(&Local_uint8DataBuffer);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff faf4 	bl	8000ff8 <Rte_ReadDecryptedDataBuffer>
      // Request Sending line of code code.
      CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_REQUEST_SENDING_PACKET_OF_CODE);
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <Transmit_ConsumeTransmitData+0x16c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2136      	movs	r1, #54	; 0x36
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fe16 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
      // Wait Ack from BL
      CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fe89 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
      // Check The node ack
      if(UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE == Local_uint8ReceivedAck)
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b75      	cmp	r3, #117	; 0x75
 8001a2a:	d175      	bne.n	8001b18 <Transmit_ConsumeTransmitData+0x154>
      {
         // condition to know are we will send the last packet or ordinary packet.
         if(Static_uint16PacketsCounter < Static_uint16NumberOfPackets)
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <Transmit_ConsumeTransmitData+0x170>)
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <Transmit_ConsumeTransmitData+0x164>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d250      	bcs.n	8001ada <Transmit_ConsumeTransmitData+0x116>
         {
            // Sending 64 byte of DATA_BUFFER_SIZE
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, DATA_BUFFER_SIZE);
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <Transmit_ConsumeTransmitData+0x16c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	6939      	ldr	r1, [r7, #16]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fe33 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
        	CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001a46:	f107 030f 	add.w	r3, r7, #15
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fe74 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b76      	cmp	r3, #118	; 0x76
 8001a54:	d160      	bne.n	8001b18 <Transmit_ConsumeTransmitData+0x154>
            {
               // Increase packet counter by 1
				Static_uint16PacketsCounter++;
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <Transmit_ConsumeTransmitData+0x170>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <Transmit_ConsumeTransmitData+0x170>)
 8001a60:	801a      	strh	r2, [r3, #0]
				if ((Static_uint16PacketsCounter == Static_uint16NumberOfPackets)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <Transmit_ConsumeTransmitData+0x170>)
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <Transmit_ConsumeTransmitData+0x164>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d107      	bne.n	8001a7e <Transmit_ConsumeTransmitData+0xba>
					&& (Static_uint8NumOfBytesInLastPacket == ZERO_BYTE))
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <Transmit_ConsumeTransmitData+0x168>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d103      	bne.n	8001a7e <Transmit_ConsumeTransmitData+0xba>
				{
					Static_StateVariable = FINISHING_STATE;
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <Transmit_ConsumeTransmitData+0x174>)
 8001a78:	2203      	movs	r2, #3
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <Transmit_ConsumeTransmitData+0xc6>
				}
				else
				{
					// Reset Buffer flag
					RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fade 	bl	8001040 <Rte_WriteDecryptedDataBufferFlag>
					// Change System State To De_crypt state.
					RTE_WRITE_SYSTEM_STATE(SYS_DECRYPT);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f7ff fb21 	bl	80010cc <Rte_WriteSystemState>
				}
				Static_InstallPercentage = ((float)Static_uint16PacketsCounter /(float) Static_uint16NumberOfPackets) ;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <Transmit_ConsumeTransmitData+0x170>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fc12 	bl	80002b8 <__aeabi_ui2f>
 8001a94:	4604      	mov	r4, r0
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <Transmit_ConsumeTransmitData+0x164>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fc0c 	bl	80002b8 <__aeabi_ui2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7fe fd13 	bl	80004d0 <__aeabi_fdiv>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <Transmit_ConsumeTransmitData+0x178>)
 8001ab0:	601a      	str	r2, [r3, #0]
				Static_InstallUpdateProgeress = Static_InstallPercentage * 100 ;
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <Transmit_ConsumeTransmitData+0x178>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4922      	ldr	r1, [pc, #136]	; (8001b40 <Transmit_ConsumeTransmitData+0x17c>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fc55 	bl	8000368 <__aeabi_fmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fda1 	bl	8000608 <__aeabi_f2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <Transmit_ConsumeTransmitData+0x180>)
 8001acc:	701a      	strb	r2, [r3, #0]
				/* Write to RTE to Signal UserIntrface Module */
				RTE_WRITE_DOWNLOAD_PROGRESS (Static_InstallUpdateProgeress);
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <Transmit_ConsumeTransmitData+0x180>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fb86 	bl	80011e4 <Rte_WriteUpdateProgress>
 8001ad8:	e01e      	b.n	8001b18 <Transmit_ConsumeTransmitData+0x154>
            else
            {
               //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
            }
         }
         else if (Static_uint8NumOfBytesInLastPacket != 0)
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <Transmit_ConsumeTransmitData+0x168>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01a      	beq.n	8001b18 <Transmit_ConsumeTransmitData+0x154>
         {
            // Sending the rest of data
        	CAN_IF_Trasmit_Data_Frame(Static_uint8NodeId, Local_uint8DataBuffer, Static_uint8NumOfBytesInLastPacket);
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <Transmit_ConsumeTransmitData+0x16c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	6939      	ldr	r1, [r7, #16]
 8001ae8:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <Transmit_ConsumeTransmitData+0x168>)
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fddd 	bl	80006ac <CAN_IF_Trasmit_Data_Frame>
            // Wait Ack from BL
            CAN_IF_Receive_UDS_Respond(&Local_uint8ReceivedAck);
 8001af2:	f107 030f 	add.w	r3, r7, #15
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fe1e 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
            if(UDS_MCU_ACKNOWLEDGE_PACKET_OF_CODE_RECEIVED == Local_uint8ReceivedAck)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b76      	cmp	r3, #118	; 0x76
 8001b00:	d10a      	bne.n	8001b18 <Transmit_ConsumeTransmitData+0x154>
            {
               // Go to Finish State.
               Static_StateVariable = FINISHING_STATE;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <Transmit_ConsumeTransmitData+0x174>)
 8001b04:	2203      	movs	r2, #3
 8001b06:	701a      	strb	r2, [r3, #0]
               Static_InstallUpdateProgeress = 100;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <Transmit_ConsumeTransmitData+0x180>)
 8001b0a:	2264      	movs	r2, #100	; 0x64
 8001b0c:	701a      	strb	r2, [r3, #0]
               RTE_WRITE_DOWNLOAD_PROGRESS(Static_InstallUpdateProgeress);
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <Transmit_ConsumeTransmitData+0x180>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb66 	bl	80011e4 <Rte_WriteUpdateProgress>
         //TODO: Handle the situation that the Boot_loader Doesn't reply correctly.
      } 
   }  
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200008ec 	.word	0x200008ec
 8001b28:	200008f4 	.word	0x200008f4
 8001b2c:	200008f6 	.word	0x200008f6
 8001b30:	200008f0 	.word	0x200008f0
 8001b34:	200008f2 	.word	0x200008f2
 8001b38:	200008fd 	.word	0x200008fd
 8001b3c:	200008f8 	.word	0x200008f8
 8001b40:	42c80000 	.word	0x42c80000
 8001b44:	200008fc 	.word	0x200008fc

08001b48 <Transmit_FinishingState>:

static Std_ReturnType Transmit_FinishingState(void *Cpy_voidPtr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
   uint8_t Local_uint8_tReceivedAck = INITIALIZE_WITH_ZERO;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
   // Reset Buffer flag
   RTE_WRITE_DECRYPTED_DATA_BUFFER_FLAG(RESET_FLAG);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fa73 	bl	8001040 <Rte_WriteDecryptedDataBufferFlag>
   // Ack node of the end of code transmission
   CAN_IF_Transmit_UDS_Request(Static_uint8NodeId, UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE);
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <Transmit_FinishingState+0x64>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2137      	movs	r1, #55	; 0x37
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fd71 	bl	8000648 <CAN_IF_Transmit_UDS_Request>
   // Wait Ack from BL
   CAN_IF_Receive_UDS_Respond(&Local_uint8_tReceivedAck);
 8001b66:	f107 030f 	add.w	r3, r7, #15
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fde4 	bl	8000738 <CAN_IF_Receive_UDS_Respond>
   if(UDS_MCU_ACKNOWLEDGE_RECEIVED_CODE == Local_uint8_tReceivedAck)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b77      	cmp	r3, #119	; 0x77
 8001b74:	d105      	bne.n	8001b82 <Transmit_FinishingState+0x3a>
   {
      // Go To Idle State Here
      Static_StateVariable = IDLE_STATE;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <Transmit_FinishingState+0x68>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
      // Change System State To System Done Update
      RTE_WRITE_SYSTEM_STATE(SYS_DONE_UPDATE);
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f7ff faa5 	bl	80010cc <Rte_WriteSystemState>
   }
	 	// Reinit variables 
   Static_uint32CodeSize              = INITIALIZE_WITH_ZERO;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <Transmit_FinishingState+0x6c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
   Static_uint8NodeId                 = INITIALIZE_WITH_ZERO;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <Transmit_FinishingState+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
   Static_uint16PacketsCounter        = INITIALIZE_WITH_ZERO;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <Transmit_FinishingState+0x70>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
   Static_uint16NumberOfPackets       = INITIALIZE_WITH_ZERO;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <Transmit_FinishingState+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	801a      	strh	r2, [r3, #0]
   Static_uint8NumOfBytesInLastPacket = INITIALIZE_WITH_ZERO;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <Transmit_FinishingState+0x78>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
   // Just remove unused parameter warning
   UNUSED(Cpy_voidPtr);
   return E_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200008f0 	.word	0x200008f0
 8001bb0:	200008fd 	.word	0x200008fd
 8001bb4:	200008ec 	.word	0x200008ec
 8001bb8:	200008f2 	.word	0x200008f2
 8001bbc:	200008f4 	.word	0x200008f4
 8001bc0:	200008f6 	.word	0x200008f6

08001bc4 <Transmit_ConsumeHeader>:

/*******************************Auxiliary Private Function***************************/

static Std_ReturnType Transmit_ConsumeHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size,uint32_t *Cpy_Crc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
   Std_ReturnType Local_ReturnStatus = E_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
   // Consume Header Information.     
   Local_ReturnStatus                = RTE_READ_NODE_ID  (Cpy_NodeId);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff f919 	bl	8000e0c <Rte_ReadNodeId>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CODE_SIZE(Cpy_Size);
 8001bde:	68b8      	ldr	r0, [r7, #8]
 8001be0:	f7ff f958 	bl	8000e94 <Rte_ReadCodeSize>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]
   Local_ReturnStatus                = RTE_READ_CRC_VALUE(Cpy_Crc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff f977 	bl	8000edc <Rte_ReadCrc>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
   return Local_ReturnStatus;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <Transmit_HandleHeader>:

static Std_ReturnType Transmit_HandleHeader(uint32_t Cpy_Size,uint32_t Cpy_Crc,uint8_t *Cpy_PtrToBytes)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
   // Convert code size into bytes and store it in buffer.
   Cpy_PtrToBytes[FIRST_BYTE]   = (Cpy_Size & GET_BYTE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SECOND_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0a1a      	lsrs	r2, r3, #8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[THIRD_BYTE]   = ((Cpy_Size >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	0c1a      	lsrs	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3302      	adds	r3, #2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[FOURTH_BYTE]  = ((Cpy_Size >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0e1a      	lsrs	r2, r3, #24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3303      	adds	r3, #3
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
   // Convert CRC Value into bytes and store it in buffer.
   Cpy_PtrToBytes[FIFTH_BYTE]   = (Cpy_Crc  & GET_BYTE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SIXTH_BYTE]   = ((Cpy_Crc  >> SHIFT_TO_GET_SECOND_BYTE)  & GET_BYTE);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0a1a      	lsrs	r2, r3, #8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3305      	adds	r3, #5
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[SEVENTH_BYTE] = ((Cpy_Crc  >> SHIFT_TO_GET_THIRD_BYTE)   & GET_BYTE);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0c1a      	lsrs	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3306      	adds	r3, #6
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
   Cpy_PtrToBytes[EIGHTH_BYTE]  = ((Cpy_Crc  >> SHIFT_TO_GET_FOURTH_BYTE)  & GET_BYTE);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	0e1a      	lsrs	r2, r3, #24
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
   return E_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <Transmit_SaveHeader>:

static Std_ReturnType Transmit_SaveHeader(uint8_t *Cpy_NodeId,uint32_t *Cpy_Size)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
   // Store Node Id To Use It to determinr the node.
   Static_uint8NodeId    = *Cpy_NodeId;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <Transmit_SaveHeader+0x28>)
 8001c80:	701a      	strb	r2, [r3, #0]
   // Store Size To Use It to calculate number of packts.
   Static_uint32CodeSize = *Cpy_Size;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <Transmit_SaveHeader+0x2c>)
 8001c88:	6013      	str	r3, [r2, #0]
   return E_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200008f0 	.word	0x200008f0
 8001c9c:	200008ec 	.word	0x200008ec

08001ca0 <UserInterface_InitializeModule>:
/**************************************************************************/
/*                         Module Functions                               */
/**************************************************************************/

void UserInterface_InitializeModule(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	/* Init Variables */
	Global_UiInternalState = UI_IDLE ;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <UserInterface_InitializeModule+0x24>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
	Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <UserInterface_InitializeModule+0x28>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
	Global_DownloadProgress = 0 ;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <UserInterface_InitializeModule+0x2c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
	/* Init Screan */
	SSD1306_Init(); // initialize the display
 8001cb6:	f7ff fadb 	bl	8001270 <SSD1306_Init>
	Interface_IdleScreen();
 8001cba:	f000 f8b3 	bl	8001e24 <Interface_IdleScreen>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000910 	.word	0x20000910
 8001cc8:	20000912 	.word	0x20000912
 8001ccc:	20000913 	.word	0x20000913

08001cd0 <UserInterface_MainFunction>:


void UserInterface_MainFunction (void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	switch (Global_UiInternalState)
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	f200 808e 	bhi.w	8001dfc <UserInterface_MainFunction+0x12c>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <UserInterface_MainFunction+0x18>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001d05 	.word	0x08001d05
 8001cec:	08001d2d 	.word	0x08001d2d
 8001cf0:	08001d33 	.word	0x08001d33
 8001cf4:	08001d4f 	.word	0x08001d4f
 8001cf8:	08001d71 	.word	0x08001d71
 8001cfc:	08001dab 	.word	0x08001dab
 8001d00:	08001ddb 	.word	0x08001ddb
	{
		/*****************************UI_IDLE***********************************/
		case UI_IDLE :
		{
			Std_ReturnType Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8001d04:	4844      	ldr	r0, [pc, #272]	; (8001e18 <UserInterface_MainFunction+0x148>)
 8001d06:	f7ff fa03 	bl	8001110 <Rte_ReadSystemState>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	717b      	strb	r3, [r7, #5]
			if (E_OK == Local_Error)
 8001d0e:	797b      	ldrb	r3, [r7, #5]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d175      	bne.n	8001e00 <UserInterface_MainFunction+0x130>
			{
				if (SYS_NEW_UPDATE_REQ == Global_SystemState)
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <UserInterface_MainFunction+0x148>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d171      	bne.n	8001e00 <UserInterface_MainFunction+0x130>
				{
					/* Clear Screen first before writing*/
					Interface_CleanScrean();
 8001d1c:	f000 f996 	bl	800204c <Interface_CleanScrean>
					/* Init Get Response scereen */
					Interface_GetResponseScreen();
 8001d20:	f000 f8a0 	bl	8001e64 <Interface_GetResponseScreen>
					/* Change internal state */
					Global_UiInternalState = UI_GET_RESPONSE ;
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
			}
			else 
			{
				/* Error */
			}
			break;
 8001d2a:	e069      	b.n	8001e00 <UserInterface_MainFunction+0x130>
		}
		
		/*****************************UI_GET_RESPONSE ***********************************/
		case UI_GET_RESPONSE :
		{
			Interface_ProcessButton();
 8001d2c:	f000 f996 	bl	800205c <Interface_ProcessButton>
			break;
 8001d30:	e06b      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
		
		/*****************************UI_ACCEPT_UPDATE***********************************/
		case UI_ACCEPT_UPDATE :
		{
			/* Clear Screan */
			Interface_CleanScrean();
 8001d32:	f000 f98b 	bl	800204c <Interface_CleanScrean>
			/* Init Download Screen */
			Interface_DownloadingScreen();
 8001d36:	f000 f8d5 	bl	8001ee4 <Interface_DownloadingScreen>
			
			/* Update user response */
			RTE_WRITE_USER_RESPONSE (ACCEPT_UPDATE);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fa0c 	bl	8001158 <Rte_WriteUserResponse>
			/* Update system state */
			RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7ff f9c3 	bl	80010cc <Rte_WriteSystemState>
			
			/* Update Internal state */
			Global_UiInternalState = UI_DOWNLOADING ;
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	701a      	strb	r2, [r3, #0]
			break;
 8001d4c:	e05d      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
		
		/*****************************UI_REJECT_UPDATE***********************************/
		case UI_REJECT_UPDATE :
		{
			/* Clear Screan */
			Interface_CleanScrean();
 8001d4e:	f000 f97d 	bl	800204c <Interface_CleanScrean>
			
			/* Update user response */
			RTE_WRITE_USER_RESPONSE (REFUSE_UPDATE);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fa00 	bl	8001158 <Rte_WriteUserResponse>
			/* Update system state */
			RTE_WRITE_SYSTEM_STATE(SYS_REC_UPDATE);
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff f9b7 	bl	80010cc <Rte_WriteSystemState>
			
			/* Reinit vaiables */
			Global_UiInternalState = UI_IDLE ;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <UserInterface_MainFunction+0x14c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
			Interface_IdleScreen();
 8001d6a:	f000 f85b 	bl	8001e24 <Interface_IdleScreen>
			break;
 8001d6e:	e04c      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
		
		/*****************************UI_DOWNLOADING***********************************/
		case UI_DOWNLOADING : 
		{
			Std_ReturnType Local_Error ;
			Local_Error = RTE_READ_DOWNLOAD_PROGRESS(&Global_DownloadProgress);
 8001d70:	482b      	ldr	r0, [pc, #172]	; (8001e20 <UserInterface_MainFunction+0x150>)
 8001d72:	f7ff fa59 	bl	8001228 <Rte_ReadUpdateProgress>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71bb      	strb	r3, [r7, #6]
			
			if (E_OK == Local_Error)
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d141      	bne.n	8001e04 <UserInterface_MainFunction+0x134>
			{
				Interface_UpdateDownloadingScreen(Global_DownloadProgress);
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <UserInterface_MainFunction+0x150>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f8e1 	bl	8001f4c <Interface_UpdateDownloadingScreen>
				if (100 == Global_DownloadProgress)
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <UserInterface_MainFunction+0x150>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d138      	bne.n	8001e04 <UserInterface_MainFunction+0x134>
				{
					/* Clear Screan */
					HAL_Delay(2000); // hold for 2 seconds
 8001d92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d96:	f000 fd77 	bl	8002888 <HAL_Delay>
					Interface_CleanScrean();
 8001d9a:	f000 f957 	bl	800204c <Interface_CleanScrean>
					Interface_InstallScreen();
 8001d9e:	f000 f92b 	bl	8001ff8 <Interface_InstallScreen>
					/* Update internal state */
					Global_UiInternalState = UI_INSTALLING ;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001da4:	2205      	movs	r2, #5
 8001da6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				
			}
			break;
 8001da8:	e02c      	b.n	8001e04 <UserInterface_MainFunction+0x134>
		}
		
		/*****************************UI_INSTALLING***********************************/
		case UI_INSTALLING : 
		{
			Std_ReturnType Local_Error = RTE_READ_SYSTEM_STATE(&Global_SystemState);
 8001daa:	481b      	ldr	r0, [pc, #108]	; (8001e18 <UserInterface_MainFunction+0x148>)
 8001dac:	f7ff f9b0 	bl	8001110 <Rte_ReadSystemState>
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
			if (E_OK == Local_Error)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d126      	bne.n	8001e08 <UserInterface_MainFunction+0x138>
			{
				if (SYS_DONE_UPDATE == Global_SystemState)
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <UserInterface_MainFunction+0x148>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d122      	bne.n	8001e08 <UserInterface_MainFunction+0x138>
				{
					/* CleanScrean*/
					Interface_CleanScrean();
 8001dc2:	f000 f943 	bl	800204c <Interface_CleanScrean>
					/* Update screan*/
					Interface_DoneScreen();
 8001dc6:	f000 f8ed 	bl	8001fa4 <Interface_DoneScreen>
					/* Wait for a time */
					HAL_Delay(2000);
 8001dca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dce:	f000 fd5b 	bl	8002888 <HAL_Delay>
					/* Update internal state */
					Global_UiInternalState = UI_END_STATE ;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* Report error*/
			}
			break;
 8001dd8:	e016      	b.n	8001e08 <UserInterface_MainFunction+0x138>
		
		/*****************************UI_END_STATE***********************************/
		case UI_END_STATE : 
		{
			/* Reinit vaiables */
			Global_UiInternalState = UI_IDLE ;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <UserInterface_MainFunction+0x144>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
			Global_CursorState = UI_CURSOR_AT_ACCEPT ;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <UserInterface_MainFunction+0x14c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
			Global_DownloadProgress = 0 ;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <UserInterface_MainFunction+0x150>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
			
			Interface_CleanScrean();
 8001dec:	f000 f92e 	bl	800204c <Interface_CleanScrean>
			/* Update screen */
			Interface_IdleScreen();
 8001df0:	f000 f818 	bl	8001e24 <Interface_IdleScreen>
			
			/* Return system state to idle */
			RTE_WRITE_SYSTEM_STATE(SYS_IDLE);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff f969 	bl	80010cc <Rte_WriteSystemState>
			break;
 8001dfa:	e006      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
		}
		/*****************************DEFUALT (ERROR)***********************************/
		default :
			/* Error */
			break ;
 8001dfc:	bf00      	nop
 8001dfe:	e004      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
			break;
 8001e00:	bf00      	nop
 8001e02:	e002      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
			break;
 8001e04:	bf00      	nop
 8001e06:	e000      	b.n	8001e0a <UserInterface_MainFunction+0x13a>
			break;
 8001e08:	bf00      	nop
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000910 	.word	0x20000910
 8001e18:	20000911 	.word	0x20000911
 8001e1c:	20000912 	.word	0x20000912
 8001e20:	20000913 	.word	0x20000913

08001e24 <Interface_IdleScreen>:

/**************************************************************************/
/*                        Private Functions                               */
/**************************************************************************/
static void Interface_IdleScreen (void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	/* Set Backgroun color */
	SSD1306_GotoXY (0,10); // goto 10, 10
 8001e28:	210a      	movs	r1, #10
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fb88 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("FOTA SYSTEM", &Font_11x18, 1); // print Hello
 8001e30:	2201      	movs	r2, #1
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <Interface_IdleScreen+0x30>)
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <Interface_IdleScreen+0x34>)
 8001e36:	f7ff fc19 	bl	800166c <SSD1306_Puts>
    SSD1306_GotoXY (5, 30);
 8001e3a:	211e      	movs	r1, #30
 8001e3c:	2005      	movs	r0, #5
 8001e3e:	f7ff fb7f 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("Waiting Update!!", &Font_7x10, 1);
 8001e42:	2201      	movs	r2, #1
 8001e44:	4905      	ldr	r1, [pc, #20]	; (8001e5c <Interface_IdleScreen+0x38>)
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <Interface_IdleScreen+0x3c>)
 8001e48:	f7ff fc10 	bl	800166c <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 8001e4c:	f7ff fad4 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000008 	.word	0x20000008
 8001e58:	080066ec 	.word	0x080066ec
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	080066f8 	.word	0x080066f8

08001e64 <Interface_GetResponseScreen>:


static void Interface_GetResponseScreen (void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (20, 0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2014      	movs	r0, #20
 8001e6c:	f7ff fb68 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("New Update", &Font_7x10, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	4916      	ldr	r1, [pc, #88]	; (8001ecc <Interface_GetResponseScreen+0x68>)
 8001e74:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <Interface_GetResponseScreen+0x6c>)
 8001e76:	f7ff fbf9 	bl	800166c <SSD1306_Puts>
    SSD1306_GotoXY (20, 10);
 8001e7a:	210a      	movs	r1, #10
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	f7ff fb5f 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("Available", &Font_7x10, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <Interface_GetResponseScreen+0x68>)
 8001e86:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <Interface_GetResponseScreen+0x70>)
 8001e88:	f7ff fbf0 	bl	800166c <SSD1306_Puts>
    SSD1306_GotoXY (30, 30);
 8001e8c:	211e      	movs	r1, #30
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f7ff fb56 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("Accept", &Font_7x10, 1);
 8001e94:	2201      	movs	r2, #1
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <Interface_GetResponseScreen+0x68>)
 8001e98:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <Interface_GetResponseScreen+0x74>)
 8001e9a:	f7ff fbe7 	bl	800166c <SSD1306_Puts>
    SSD1306_GotoXY (30, 40);
 8001e9e:	2128      	movs	r1, #40	; 0x28
 8001ea0:	201e      	movs	r0, #30
 8001ea2:	f7ff fb4d 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts ("Reject", &Font_7x10, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4908      	ldr	r1, [pc, #32]	; (8001ecc <Interface_GetResponseScreen+0x68>)
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <Interface_GetResponseScreen+0x78>)
 8001eac:	f7ff fbde 	bl	800166c <SSD1306_Puts>

    SSD1306_GotoXY (20, 30);
 8001eb0:	211e      	movs	r1, #30
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f7ff fb44 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <Interface_GetResponseScreen+0x68>)
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <Interface_GetResponseScreen+0x7c>)
 8001ebe:	f7ff fbd5 	bl	800166c <SSD1306_Puts>

    SSD1306_UpdateScreen(); //display
 8001ec2:	f7ff fa99 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	0800670c 	.word	0x0800670c
 8001ed4:	08006718 	.word	0x08006718
 8001ed8:	08006724 	.word	0x08006724
 8001edc:	0800672c 	.word	0x0800672c
 8001ee0:	08006734 	.word	0x08006734

08001ee4 <Interface_DownloadingScreen>:

static void Interface_DownloadingScreen (void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8001ee8:	210a      	movs	r1, #10
 8001eea:	2028      	movs	r0, #40	; 0x28
 8001eec:	f7ff fb28 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("Download", &Font_7x10, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4911      	ldr	r1, [pc, #68]	; (8001f38 <Interface_DownloadingScreen+0x54>)
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <Interface_DownloadingScreen+0x58>)
 8001ef6:	f7ff fbb9 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 8001efa:	2114      	movs	r1, #20
 8001efc:	2028      	movs	r0, #40	; 0x28
 8001efe:	f7ff fb1f 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("  in", &Font_7x10, 1);
 8001f02:	2201      	movs	r2, #1
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <Interface_DownloadingScreen+0x54>)
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <Interface_DownloadingScreen+0x5c>)
 8001f08:	f7ff fbb0 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8001f0c:	211e      	movs	r1, #30
 8001f0e:	2028      	movs	r0, #40	; 0x28
 8001f10:	f7ff fb16 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("Progress", &Font_7x10, 1);
 8001f14:	2201      	movs	r2, #1
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <Interface_DownloadingScreen+0x54>)
 8001f18:	480a      	ldr	r0, [pc, #40]	; (8001f44 <Interface_DownloadingScreen+0x60>)
 8001f1a:	f7ff fba7 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8001f1e:	2128      	movs	r1, #40	; 0x28
 8001f20:	2032      	movs	r0, #50	; 0x32
 8001f22:	f7ff fb0d 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("  0%", &Font_7x10, 1);
 8001f26:	2201      	movs	r2, #1
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <Interface_DownloadingScreen+0x54>)
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <Interface_DownloadingScreen+0x64>)
 8001f2c:	f7ff fb9e 	bl	800166c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f30:	f7ff fa62 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	08006738 	.word	0x08006738
 8001f40:	08006744 	.word	0x08006744
 8001f44:	0800674c 	.word	0x0800674c
 8001f48:	08006758 	.word	0x08006758

08001f4c <Interface_UpdateDownloadingScreen>:

static void Interface_UpdateDownloadingScreen (uint8_t Cpy_Progress)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	/**/
	char local_DateBuffer[4];
	/* Clear Current Progress Text */
	sprintf(local_DateBuffer, "%d", Cpy_Progress);
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <Interface_UpdateDownloadingScreen+0x4c>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 ff06 	bl	8005d70 <siprintf>
	SSD1306_GotoXY (50, 40);
 8001f64:	2128      	movs	r1, #40	; 0x28
 8001f66:	2032      	movs	r0, #50	; 0x32
 8001f68:	f7ff faea 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("   %", &Font_7x10, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	490b      	ldr	r1, [pc, #44]	; (8001f9c <Interface_UpdateDownloadingScreen+0x50>)
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <Interface_UpdateDownloadingScreen+0x54>)
 8001f72:	f7ff fb7b 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (50, 40);
 8001f76:	2128      	movs	r1, #40	; 0x28
 8001f78:	2032      	movs	r0, #50	; 0x32
 8001f7a:	f7ff fae1 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts (local_DateBuffer, &Font_7x10, 1);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2201      	movs	r2, #1
 8001f84:	4905      	ldr	r1, [pc, #20]	; (8001f9c <Interface_UpdateDownloadingScreen+0x50>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb70 	bl	800166c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f8c:	f7ff fa34 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	08006760 	.word	0x08006760
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	08006764 	.word	0x08006764

08001fa4 <Interface_DoneScreen>:

static void Interface_DoneScreen (void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	/* Writeing Text */
	SSD1306_GotoXY (40, 10);
 8001fa8:	210a      	movs	r1, #10
 8001faa:	2028      	movs	r0, #40	; 0x28
 8001fac:	f7ff fac8 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("Download", &Font_7x10, 1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <Interface_DoneScreen+0x44>)
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <Interface_DoneScreen+0x48>)
 8001fb6:	f7ff fb59 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (35, 20);
 8001fba:	2114      	movs	r1, #20
 8001fbc:	2023      	movs	r0, #35	; 0x23
 8001fbe:	f7ff fabf 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("Completed", &Font_7x10, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <Interface_DoneScreen+0x44>)
 8001fc6:	480a      	ldr	r0, [pc, #40]	; (8001ff0 <Interface_DoneScreen+0x4c>)
 8001fc8:	f7ff fb50 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 8001fcc:	211e      	movs	r1, #30
 8001fce:	2032      	movs	r0, #50	; 0x32
 8001fd0:	f7ff fab6 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts (" -_-  ", &Font_7x10, 1);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <Interface_DoneScreen+0x44>)
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <Interface_DoneScreen+0x50>)
 8001fda:	f7ff fb47 	bl	800166c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001fde:	f7ff fa0b 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	08006738 	.word	0x08006738
 8001ff0:	0800676c 	.word	0x0800676c
 8001ff4:	08006778 	.word	0x08006778

08001ff8 <Interface_InstallScreen>:

static void Interface_InstallScreen(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	/* Update Screan */
	SSD1306_GotoXY (40, 10);
 8001ffc:	210a      	movs	r1, #10
 8001ffe:	2028      	movs	r0, #40	; 0x28
 8002000:	f7ff fa9e 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts ("Installing", &Font_7x10, 1);
 8002004:	2201      	movs	r2, #1
 8002006:	490d      	ldr	r1, [pc, #52]	; (800203c <Interface_InstallScreen+0x44>)
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <Interface_InstallScreen+0x48>)
 800200a:	f7ff fb2f 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (40, 20);
 800200e:	2114      	movs	r1, #20
 8002010:	2028      	movs	r0, #40	; 0x28
 8002012:	f7ff fa95 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts (" Firmware", &Font_7x10, 1);
 8002016:	2201      	movs	r2, #1
 8002018:	4908      	ldr	r1, [pc, #32]	; (800203c <Interface_InstallScreen+0x44>)
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <Interface_InstallScreen+0x4c>)
 800201c:	f7ff fb26 	bl	800166c <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8002020:	211e      	movs	r1, #30
 8002022:	2028      	movs	r0, #40	; 0x28
 8002024:	f7ff fa8c 	bl	8001540 <SSD1306_GotoXY>
	SSD1306_Puts (" to MCU ", &Font_7x10, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	4904      	ldr	r1, [pc, #16]	; (800203c <Interface_InstallScreen+0x44>)
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <Interface_InstallScreen+0x50>)
 800202e:	f7ff fb1d 	bl	800166c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002032:	f7ff f9e1 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	08006780 	.word	0x08006780
 8002044:	0800678c 	.word	0x0800678c
 8002048:	08006798 	.word	0x08006798

0800204c <Interface_CleanScrean>:

static void Interface_CleanScrean(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002050:	f7ff fb31 	bl	80016b6 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8002054:	f7ff f9d0 	bl	80013f8 <SSD1306_UpdateScreen>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <Interface_ProcessButton>:

static void Interface_ProcessButton (void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	while(1)
	{
	  if(HAL_GPIO_ReadPin(SWITCH_BTN_GPIO_Port, SWITCH_BTN_Pin) ==  GPIO_PIN_RESET)
 8002060:	2102      	movs	r1, #2
 8002062:	4833      	ldr	r0, [pc, #204]	; (8002130 <Interface_ProcessButton+0xd4>)
 8002064:	f001 fd70 	bl	8003b48 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d13a      	bne.n	80020e4 <Interface_ProcessButton+0x88>
	  {
		  while(HAL_GPIO_ReadPin(SWITCH_BTN_GPIO_Port, SWITCH_BTN_Pin) ==  GPIO_PIN_RESET);// Hold until button release
 800206e:	bf00      	nop
 8002070:	2102      	movs	r1, #2
 8002072:	482f      	ldr	r0, [pc, #188]	; (8002130 <Interface_ProcessButton+0xd4>)
 8002074:	f001 fd68 	bl	8003b48 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f8      	beq.n	8002070 <Interface_ProcessButton+0x14>
		  if(Global_CursorState == UI_CURSOR_AT_ACCEPT)
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <Interface_ProcessButton+0xd8>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <Interface_ProcessButton+0x56>
		  {
			  SSD1306_GotoXY (20, 30);
 8002086:	211e      	movs	r1, #30
 8002088:	2014      	movs	r0, #20
 800208a:	f7ff fa59 	bl	8001540 <SSD1306_GotoXY>
			  SSD1306_Puts (" ", &Font_7x10, 1);	//Cursor init point to Accept
 800208e:	2201      	movs	r2, #1
 8002090:	4929      	ldr	r1, [pc, #164]	; (8002138 <Interface_ProcessButton+0xdc>)
 8002092:	482a      	ldr	r0, [pc, #168]	; (800213c <Interface_ProcessButton+0xe0>)
 8002094:	f7ff faea 	bl	800166c <SSD1306_Puts>
			  SSD1306_GotoXY (20, 40);
 8002098:	2128      	movs	r1, #40	; 0x28
 800209a:	2014      	movs	r0, #20
 800209c:	f7ff fa50 	bl	8001540 <SSD1306_GotoXY>
			  SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 80020a0:	2201      	movs	r2, #1
 80020a2:	4925      	ldr	r1, [pc, #148]	; (8002138 <Interface_ProcessButton+0xdc>)
 80020a4:	4826      	ldr	r0, [pc, #152]	; (8002140 <Interface_ProcessButton+0xe4>)
 80020a6:	f7ff fae1 	bl	800166c <SSD1306_Puts>
			  Global_CursorState = UI_CURSOR_AT_REJECT;
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <Interface_ProcessButton+0xd8>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e018      	b.n	80020e4 <Interface_ProcessButton+0x88>
		  }
		  else if(Global_CursorState == UI_CURSOR_AT_REJECT)
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <Interface_ProcessButton+0xd8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d114      	bne.n	80020e4 <Interface_ProcessButton+0x88>
		  {
			  SSD1306_GotoXY (20, 30);
 80020ba:	211e      	movs	r1, #30
 80020bc:	2014      	movs	r0, #20
 80020be:	f7ff fa3f 	bl	8001540 <SSD1306_GotoXY>
			  SSD1306_Puts (">", &Font_7x10, 1);	//Cursor init point to Accept
 80020c2:	2201      	movs	r2, #1
 80020c4:	491c      	ldr	r1, [pc, #112]	; (8002138 <Interface_ProcessButton+0xdc>)
 80020c6:	481e      	ldr	r0, [pc, #120]	; (8002140 <Interface_ProcessButton+0xe4>)
 80020c8:	f7ff fad0 	bl	800166c <SSD1306_Puts>
			  SSD1306_GotoXY (20, 40);
 80020cc:	2128      	movs	r1, #40	; 0x28
 80020ce:	2014      	movs	r0, #20
 80020d0:	f7ff fa36 	bl	8001540 <SSD1306_GotoXY>
			  SSD1306_Puts (" ", &Font_7x10, 1);	//Cursor init point to Accept
 80020d4:	2201      	movs	r2, #1
 80020d6:	4918      	ldr	r1, [pc, #96]	; (8002138 <Interface_ProcessButton+0xdc>)
 80020d8:	4818      	ldr	r0, [pc, #96]	; (800213c <Interface_ProcessButton+0xe0>)
 80020da:	f7ff fac7 	bl	800166c <SSD1306_Puts>
			  Global_CursorState = UI_CURSOR_AT_ACCEPT;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <Interface_ProcessButton+0xd8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  //error
		  }
	  }
	  SSD1306_UpdateScreen(); //display
 80020e4:	f7ff f988 	bl	80013f8 <SSD1306_UpdateScreen>
	  HAL_Delay(100);
 80020e8:	2064      	movs	r0, #100	; 0x64
 80020ea:	f000 fbcd 	bl	8002888 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(OK_BNT_GPIO_Port, OK_BNT_Pin) ==  GPIO_PIN_RESET)
 80020ee:	2104      	movs	r1, #4
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <Interface_ProcessButton+0xd4>)
 80020f2:	f001 fd29 	bl	8003b48 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1b1      	bne.n	8002060 <Interface_ProcessButton+0x4>
	  {
		 while(HAL_GPIO_ReadPin(OK_BNT_GPIO_Port, OK_BNT_Pin) ==  GPIO_PIN_RESET);// Hold until button release
 80020fc:	bf00      	nop
 80020fe:	2104      	movs	r1, #4
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <Interface_ProcessButton+0xd4>)
 8002102:	f001 fd21 	bl	8003b48 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f8      	beq.n	80020fe <Interface_ProcessButton+0xa2>
		 if(Global_CursorState == UI_CURSOR_AT_ACCEPT)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <Interface_ProcessButton+0xd8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <Interface_ProcessButton+0xc0>
		 {
			Global_UiInternalState = UI_ACCEPT_UPDATE ;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <Interface_ProcessButton+0xe8>)
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
			break ;
 800211a:	e006      	b.n	800212a <Interface_ProcessButton+0xce>
		 }
		 else if (Global_CursorState == UI_CURSOR_AT_REJECT)
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <Interface_ProcessButton+0xd8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d19d      	bne.n	8002060 <Interface_ProcessButton+0x4>
		 {
			Global_UiInternalState = UI_REJECT_UPDATE ;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <Interface_ProcessButton+0xe8>)
 8002126:	2203      	movs	r2, #3
 8002128:	701a      	strb	r2, [r3, #0]
			break ;
		 }
	  }
	}
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010800 	.word	0x40010800
 8002134:	20000912 	.word	0x20000912
 8002138:	20000000 	.word	0x20000000
 800213c:	080067a4 	.word	0x080067a4
 8002140:	08006734 	.word	0x08006734
 8002144:	20000910 	.word	0x20000910

08002148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t state = SYS_IDLE;
 800214e:	2300      	movs	r3, #0
 8002150:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002152:	f000 fb37 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002156:	f000 f82d 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800215a:	f000 f923 	bl	80023a4 <MX_GPIO_Init>
  MX_CAN_Init();
 800215e:	f000 f86f 	bl	8002240 <MX_CAN_Init>
  MX_I2C1_Init();
 8002162:	f000 f8c7 	bl	80022f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002166:	f000 f8f3 	bl	8002350 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800216a:	4811      	ldr	r0, [pc, #68]	; (80021b0 <main+0x68>)
 800216c:	f000 fd74 	bl	8002c58 <HAL_CAN_Start>

  ReceiveUpdate_InitializeModule();
 8002170:	f7fe fbe4 	bl	800093c <ReceiveUpdate_InitializeModule>
  Transmit_InitializeModule();
 8002174:	f7ff fb40 	bl	80017f8 <Transmit_InitializeModule>
  Decrypt_Address_Read_Init();
 8002178:	f7fe fb00 	bl	800077c <Decrypt_Address_Read_Init>
  UserInterface_InitializeModule();
 800217c:	f7ff fd90 	bl	8001ca0 <UserInterface_InitializeModule>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		RTE_READ_SYSTEM_STATE(&state);
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ffc4 	bl	8001110 <Rte_ReadSystemState>
		if (state == SYS_REC_UPDATE){
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d102      	bne.n	8002194 <main+0x4c>
			ReceiveUpdate_MainFunction();
 800218e:	f7fe fc1d 	bl	80009cc <ReceiveUpdate_MainFunction>
 8002192:	e00a      	b.n	80021aa <main+0x62>
		}
		else if (state == SYS_DECRYPT)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d102      	bne.n	80021a0 <main+0x58>
		{
			Decrypt_MainFunction();
 800219a:	f7fe fafd 	bl	8000798 <Decrypt_MainFunction>
 800219e:	e004      	b.n	80021aa <main+0x62>
		}
		else if (state == SYS_SEND_UPDATE)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d101      	bne.n	80021aa <main+0x62>
		{
			Transmit_MainFunction();
 80021a6:	f7ff fb6d 	bl	8001884 <Transmit_MainFunction>
		}
		else
		{
			//do nothing
		}
		UserInterface_MainFunction();
 80021aa:	f7ff fd91 	bl	8001cd0 <UserInterface_MainFunction>
		RTE_READ_SYSTEM_STATE(&state);
 80021ae:	e7e7      	b.n	8002180 <main+0x38>
 80021b0:	20000914 	.word	0x20000914

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b090      	sub	sp, #64	; 0x40
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	2228      	movs	r2, #40	; 0x28
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fdf4 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e4:	2301      	movs	r3, #1
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e8:	2302      	movs	r3, #2
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fa9d 	bl	800473c <HAL_RCC_OscConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002208:	f000 f932 	bl	8002470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220c:	230f      	movs	r3, #15
 800220e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002210:	2302      	movs	r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2102      	movs	r1, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fd0a 	bl	8004c40 <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002232:	f000 f91d 	bl	8002470 <Error_Handler>
  }
}
 8002236:	bf00      	nop
 8002238:	3740      	adds	r7, #64	; 0x40
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <MX_CAN_Init+0xac>)
 8002248:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800224a:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_CAN_Init+0xa8>)
 800224c:	2204      	movs	r2, #4
 800224e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <MX_CAN_Init+0xa8>)
 800225e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002262:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800226a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_CAN_Init+0xa8>)
 800226e:	2200      	movs	r2, #0
 8002270:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002274:	2200      	movs	r2, #0
 8002276:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_CAN_Init+0xa8>)
 800227a:	2200      	movs	r2, #0
 800227c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002280:	2200      	movs	r2, #0
 8002282:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002286:	2200      	movs	r2, #0
 8002288:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_CAN_Init+0xa8>)
 800228c:	2200      	movs	r2, #0
 800228e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002290:	4815      	ldr	r0, [pc, #84]	; (80022e8 <MX_CAN_Init+0xa8>)
 8002292:	f000 fb1d 	bl	80028d0 <HAL_CAN_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800229c:	f000 f8e8 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //Initialize Variable for CAN
  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022d8:	220a      	movs	r2, #10
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <MX_CAN_Init+0xb0>)
 80022de:	4802      	ldr	r0, [pc, #8]	; (80022e8 <MX_CAN_Init+0xa8>)
 80022e0:	f000 fbf1 	bl	8002ac6 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000914 	.word	0x20000914
 80022ec:	40006400 	.word	0x40006400
 80022f0:	200009d8 	.word	0x200009d8

080022f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_I2C1_Init+0x50>)
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <MX_I2C1_Init+0x54>)
 80022fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_I2C1_Init+0x50>)
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_I2C1_Init+0x58>)
 8002302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_I2C1_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_I2C1_Init+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_I2C1_Init+0x50>)
 8002312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_I2C1_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_I2C1_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_I2C1_Init+0x50>)
 8002332:	f001 fc39 	bl	8003ba8 <HAL_I2C_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800233c:	f000 f898 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000093c 	.word	0x2000093c
 8002348:	40005400 	.word	0x40005400
 800234c:	00061a80 	.word	0x00061a80

08002350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_USART1_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002388:	f002 fde8 	bl	8004f5c <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f000 f86d 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000990 	.word	0x20000990
 80023a0:	40013800 	.word	0x40013800

080023a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a29      	ldr	r2, [pc, #164]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_GPIO_Init+0xc0>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_GPIO_Init+0xc0>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <MX_GPIO_Init+0xc0>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_GPIO_Init+0xc0>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <MX_GPIO_Init+0xc4>)
 8002420:	f001 fba9 	bl	8003b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	2301      	movs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2302      	movs	r3, #2
 8002434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	4619      	mov	r1, r3
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <MX_GPIO_Init+0xc4>)
 800243e:	f001 f9ff 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_BTN_Pin OK_BNT_Pin */
  GPIO_InitStruct.Pin = SWITCH_BTN_Pin|OK_BNT_Pin;
 8002442:	2306      	movs	r3, #6
 8002444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_GPIO_Init+0xc8>)
 8002456:	f001 f9f3 	bl	8003840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40011000 	.word	0x40011000
 800246c:	40010800 	.word	0x40010800

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>
	...

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_MspInit+0x5c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_MspInit+0x5c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_MspInit+0x5c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_MspInit+0x5c>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_MspInit+0x5c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_MspInit+0x5c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_MspInit+0x60>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_MspInit+0x60>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000

080024e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <HAL_CAN_MspInit+0x8c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d131      	bne.n	8002564 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_CAN_MspInit+0x90>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_CAN_MspInit+0x90>)
 8002506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800250a:	61d3      	str	r3, [r2, #28]
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_CAN_MspInit+0x90>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_CAN_MspInit+0x90>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_CAN_MspInit+0x90>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_CAN_MspInit+0x90>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <HAL_CAN_MspInit+0x94>)
 8002546:	f001 f97b 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4619      	mov	r1, r3
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <HAL_CAN_MspInit+0x94>)
 8002560:	f001 f96e 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40006400 	.word	0x40006400
 8002570:	40021000 	.word	0x40021000
 8002574:	40010800 	.word	0x40010800

08002578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_I2C_MspInit+0x70>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d123      	bne.n	80025e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_I2C_MspInit+0x74>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <HAL_I2C_MspInit+0x74>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_I2C_MspInit+0x74>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025b0:	23c0      	movs	r3, #192	; 0xc0
 80025b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	2312      	movs	r3, #18
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	4619      	mov	r1, r3
 80025c2:	480b      	ldr	r0, [pc, #44]	; (80025f0 <HAL_I2C_MspInit+0x78>)
 80025c4:	f001 f93c 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_I2C_MspInit+0x74>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_I2C_MspInit+0x74>)
 80025ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025d2:	61d3      	str	r3, [r2, #28]
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_I2C_MspInit+0x74>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40005400 	.word	0x40005400
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010c00 	.word	0x40010c00

080025f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_UART_MspInit+0x9c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d139      	bne.n	8002688 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_UART_MspInit+0xa0>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_UART_MspInit+0xa0>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_UART_MspInit+0xa0>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0xa0>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_UART_MspInit+0xa0>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_UART_MspInit+0xa0>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4619      	mov	r1, r3
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <HAL_UART_MspInit+0xa4>)
 800265a:	f001 f8f1 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4619      	mov	r1, r3
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <HAL_UART_MspInit+0xa4>)
 8002674:	f001 f8e4 	bl	8003840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2025      	movs	r0, #37	; 0x25
 800267e:	f000 fdf6 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002682:	2025      	movs	r0, #37	; 0x25
 8002684:	f000 fe0f 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40013800 	.word	0x40013800
 8002694:	40021000 	.word	0x40021000
 8002698:	40010800 	.word	0x40010800

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <NMI_Handler+0x4>

080026a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler+0x4>

080026ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <UsageFault_Handler+0x4>

080026ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e2:	f000 f8b5 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <USART1_IRQHandler+0x10>)
 80026f2:	f002 fdbd 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000990 	.word	0x20000990

08002700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <_sbrk+0x5c>)
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <_sbrk+0x60>)
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <_sbrk+0x64>)
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <_sbrk+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d207      	bcs.n	8002740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002730:	f003 fb46 	bl	8005dc0 <__errno>
 8002734:	4603      	mov	r3, r0
 8002736:	220c      	movs	r2, #12
 8002738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e009      	b.n	8002754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <_sbrk+0x64>)
 8002750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20005000 	.word	0x20005000
 8002760:	00000400 	.word	0x00000400
 8002764:	20000a48 	.word	0x20000a48
 8002768:	20000bb8 	.word	0x20000bb8

0800276c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002778:	f7ff fff8 	bl	800276c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800277c:	480b      	ldr	r0, [pc, #44]	; (80027ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800277e:	490c      	ldr	r1, [pc, #48]	; (80027b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002794:	4c09      	ldr	r4, [pc, #36]	; (80027bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f003 fb13 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a6:	f7ff fccf 	bl	8002148 <main>
  bx lr
 80027aa:	4770      	bx	lr
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80027b4:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 80027b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027bc:	20000bb8 	.word	0x20000bb8

080027c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_2_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x28>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x28>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 fd3f 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fe4c 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd57 	bl	80032c2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 fd1f 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000010 	.word	0x20000010
 8002848:	20000018 	.word	0x20000018
 800284c:	20000014 	.word	0x20000014

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x20>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000018 	.word	0x20000018
 8002870:	20000a4c 	.word	0x20000a4c

08002874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000a4c 	.word	0x20000a4c

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000018 	.word	0x20000018

080028d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0ed      	b.n	8002abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fdf6 	bl	80024e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002904:	f7ff ffb6 	bl	8002874 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800290a:	e012      	b.n	8002932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800290c:	f7ff ffb2 	bl	8002874 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b0a      	cmp	r3, #10
 8002918:	d90b      	bls.n	8002932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2205      	movs	r2, #5
 800292a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0c5      	b.n	8002abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0e5      	beq.n	800290c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0202 	bic.w	r2, r2, #2
 800294e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7ff ff90 	bl	8002874 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002956:	e012      	b.n	800297e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002958:	f7ff ff8c 	bl	8002874 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b0a      	cmp	r3, #10
 8002964:	d90b      	bls.n	800297e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2205      	movs	r2, #5
 8002976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e09f      	b.n	8002abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7e1b      	ldrb	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e007      	b.n	80029b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7e5b      	ldrb	r3, [r3, #25]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e007      	b.n	80029e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e9b      	ldrb	r3, [r3, #26]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d108      	bne.n	80029fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e007      	b.n	8002a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0220 	bic.w	r2, r2, #32
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7edb      	ldrb	r3, [r3, #27]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d108      	bne.n	8002a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0210 	bic.w	r2, r2, #16
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0210 	orr.w	r2, r2, #16
 8002a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7f1b      	ldrb	r3, [r3, #28]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0208 	orr.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e007      	b.n	8002a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0208 	bic.w	r2, r2, #8
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7f5b      	ldrb	r3, [r3, #29]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0204 	orr.w	r2, r2, #4
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e007      	b.n	8002a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	ea42 0103 	orr.w	r1, r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002adc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d003      	beq.n	8002aec <HAL_CAN_ConfigFilter+0x26>
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	f040 80aa 	bne.w	8002c40 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2201      	movs	r2, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d123      	bne.n	8002b6e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	401a      	ands	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3248      	adds	r2, #72	; 0x48
 8002b4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	3348      	adds	r3, #72	; 0x48
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d122      	bne.n	8002bbc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3248      	adds	r2, #72	; 0x48
 8002b9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb2:	6979      	ldr	r1, [r7, #20]
 8002bb4:	3348      	adds	r3, #72	; 0x48
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c32:	f023 0201 	bic.w	r2, r3, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e006      	b.n	8002c4e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d12e      	bne.n	8002cca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c84:	f7ff fdf6 	bl	8002874 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c8a:	e012      	b.n	8002cb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c8c:	f7ff fdf2 	bl	8002874 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b0a      	cmp	r3, #10
 8002c98:	d90b      	bls.n	8002cb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2205      	movs	r2, #5
 8002caa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e012      	b.n	8002cd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e006      	b.n	8002cd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d003      	beq.n	8002d0c <HAL_CAN_AddTxMessage+0x2c>
 8002d04:	7ffb      	ldrb	r3, [r7, #31]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	f040 80ad 	bne.w	8002e66 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8095 	beq.w	8002e56 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	0e1b      	lsrs	r3, r3, #24
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d36:	2201      	movs	r2, #1
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	6809      	ldr	r1, [r1, #0]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	440b      	add	r3, r1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00f      	b.n	8002d84 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d6e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d78:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	440b      	add	r3, r1
 8002d82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	440b      	add	r3, r1
 8002d94:	3304      	adds	r3, #4
 8002d96:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	7d1b      	ldrb	r3, [r3, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d111      	bne.n	8002dc4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3318      	adds	r3, #24
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	6811      	ldr	r1, [r2, #0]
 8002db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3307      	adds	r3, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	061a      	lsls	r2, r3, #24
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3306      	adds	r3, #6
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3305      	adds	r3, #5
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	4313      	orrs	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	3204      	adds	r2, #4
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	4610      	mov	r0, r2
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	ea43 0200 	orr.w	r2, r3, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dfa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3303      	adds	r3, #3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	061a      	lsls	r2, r3, #24
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3302      	adds	r3, #2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3301      	adds	r3, #1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	4313      	orrs	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	ea43 0200 	orr.w	r2, r3, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3318      	adds	r3, #24
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	6811      	ldr	r1, [r2, #0]
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	440b      	add	r3, r1
 8002e50:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e00e      	b.n	8002e74 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e006      	b.n	8002e74 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3724      	adds	r7, #36	; 0x24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d003      	beq.n	8002ea2 <HAL_CAN_GetRxMessage+0x24>
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	f040 8103 	bne.w	80030a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0f7      	b.n	80030b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0e8      	b.n	80030b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	331b      	adds	r3, #27
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0204 	and.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	331b      	adds	r3, #27
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0d5b      	lsrs	r3, r3, #21
 8002f12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	331b      	adds	r3, #27
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	08db      	lsrs	r3, r3, #3
 8002f2c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	331b      	adds	r3, #27
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0202 	and.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	331b      	adds	r3, #27
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2208      	movs	r2, #8
 8002f66:	611a      	str	r2, [r3, #16]
 8002f68:	e00b      	b.n	8002f82 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	331b      	adds	r3, #27
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	331b      	adds	r3, #27
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	331b      	adds	r3, #27
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0a1a      	lsrs	r2, r3, #8
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0c1a      	lsrs	r2, r3, #16
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	4413      	add	r3, r2
 8003006:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e1a      	lsrs	r2, r3, #24
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3303      	adds	r3, #3
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	4413      	add	r3, r2
 8003020:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	3304      	adds	r3, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4413      	add	r3, r2
 8003038:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0a1a      	lsrs	r2, r3, #8
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	3305      	adds	r3, #5
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4413      	add	r3, r2
 8003052:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0c1a      	lsrs	r2, r3, #16
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	3306      	adds	r3, #6
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e1a      	lsrs	r2, r3, #24
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	3307      	adds	r3, #7
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0220 	orr.w	r2, r2, #32
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e007      	b.n	80030a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0220 	orr.w	r2, r2, #32
 80030a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e006      	b.n	80030b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <__NVIC_EnableIRQ+0x34>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff90 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff2d 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff42 	bl	8003108 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff90 	bl	80031b0 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5f 	bl	800315c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff35 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d008      	beq.n	8003304 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e020      	b.n	8003346 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 020e 	bic.w	r2, r2, #14
 8003312:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d005      	beq.n	8003374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2204      	movs	r2, #4
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e051      	b.n	8003418 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 020e 	bic.w	r2, r2, #14
 8003382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_DMA_Abort_IT+0xd4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d029      	beq.n	80033f2 <HAL_DMA_Abort_IT+0xa2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_DMA_Abort_IT+0xd8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_Abort_IT+0x9e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_DMA_Abort_IT+0xdc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x98>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_DMA_Abort_IT+0xe0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x92>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_DMA_Abort_IT+0xe4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00a      	beq.n	80033dc <HAL_DMA_Abort_IT+0x8c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_DMA_Abort_IT+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_DMA_Abort_IT+0x86>
 80033d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033d4:	e00e      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033da:	e00b      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ec:	e002      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033ee:	2310      	movs	r3, #16
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_DMA_Abort_IT+0xec>)
 80033f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
    } 
  }
  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020008 	.word	0x40020008
 8003428:	4002001c 	.word	0x4002001c
 800342c:	40020030 	.word	0x40020030
 8003430:	40020044 	.word	0x40020044
 8003434:	40020058 	.word	0x40020058
 8003438:	4002006c 	.word	0x4002006c
 800343c:	40020000 	.word	0x40020000

08003440 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_FLASH_Program+0xd8>)
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_FLASH_Program+0x26>
 8003462:	2302      	movs	r3, #2
 8003464:	e054      	b.n	8003510 <HAL_FLASH_Program+0xd0>
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_FLASH_Program+0xd8>)
 8003468:	2201      	movs	r2, #1
 800346a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800346c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003470:	f000 f8a8 	bl	80035c4 <FLASH_WaitForLastOperation>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d144      	bne.n	8003508 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003484:	2301      	movs	r3, #1
 8003486:	757b      	strb	r3, [r7, #21]
 8003488:	e007      	b.n	800349a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d102      	bne.n	8003496 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003490:	2302      	movs	r3, #2
 8003492:	757b      	strb	r3, [r7, #21]
 8003494:	e001      	b.n	800349a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003496:	2304      	movs	r3, #4
 8003498:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800349a:	2300      	movs	r3, #0
 800349c:	75bb      	strb	r3, [r7, #22]
 800349e:	e02d      	b.n	80034fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80034a0:	7dbb      	ldrb	r3, [r7, #22]
 80034a2:	005a      	lsls	r2, r3, #1
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	eb02 0c03 	add.w	ip, r2, r3
 80034aa:	7dbb      	ldrb	r3, [r7, #22]
 80034ac:	0119      	lsls	r1, r3, #4
 80034ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034b2:	f1c1 0620 	rsb	r6, r1, #32
 80034b6:	f1a1 0020 	sub.w	r0, r1, #32
 80034ba:	fa22 f401 	lsr.w	r4, r2, r1
 80034be:	fa03 f606 	lsl.w	r6, r3, r6
 80034c2:	4334      	orrs	r4, r6
 80034c4:	fa23 f000 	lsr.w	r0, r3, r0
 80034c8:	4304      	orrs	r4, r0
 80034ca:	fa23 f501 	lsr.w	r5, r3, r1
 80034ce:	b2a3      	uxth	r3, r4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4660      	mov	r0, ip
 80034d4:	f000 f85a 	bl	800358c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034dc:	f000 f872 	bl	80035c4 <FLASH_WaitForLastOperation>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_FLASH_Program+0xdc>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_FLASH_Program+0xdc>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80034f6:	7dbb      	ldrb	r3, [r7, #22]
 80034f8:	3301      	adds	r3, #1
 80034fa:	75bb      	strb	r3, [r7, #22]
 80034fc:	7dba      	ldrb	r2, [r7, #22]
 80034fe:	7d7b      	ldrb	r3, [r7, #21]
 8003500:	429a      	cmp	r2, r3
 8003502:	d3cd      	bcc.n	80034a0 <HAL_FLASH_Program+0x60>
 8003504:	e000      	b.n	8003508 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003506:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_FLASH_Program+0xd8>)
 800350a:	2200      	movs	r2, #0
 800350c:	761a      	strb	r2, [r3, #24]

  return status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	20000a50 	.word	0x20000a50
 800351c:	40022000 	.word	0x40022000

08003520 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_FLASH_Unlock+0x40>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_FLASH_Unlock+0x40>)
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_FLASH_Unlock+0x44>)
 800353a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_FLASH_Unlock+0x40>)
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_FLASH_Unlock+0x48>)
 8003540:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_FLASH_Unlock+0x40>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003552:	79fb      	ldrb	r3, [r7, #7]
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	45670123 	.word	0x45670123
 8003568:	cdef89ab 	.word	0xcdef89ab

0800356c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_FLASH_Lock+0x1c>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_FLASH_Lock+0x1c>)
 8003576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000

0800358c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <FLASH_Program_HalfWord+0x30>)
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <FLASH_Program_HalfWord+0x34>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <FLASH_Program_HalfWord+0x34>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	887a      	ldrh	r2, [r7, #2]
 80035ae:	801a      	strh	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000a50 	.word	0x20000a50
 80035c0:	40022000 	.word	0x40022000

080035c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff f952 	bl	8002874 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035d2:	e010      	b.n	80035f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d00c      	beq.n	80035f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <FLASH_WaitForLastOperation+0x2e>
 80035e2:	f7ff f947 	bl	8002874 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d201      	bcs.n	80035f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e025      	b.n	8003642 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e8      	bne.n	80035d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 8003610:	2220      	movs	r2, #32
 8003612:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <FLASH_WaitForLastOperation+0x88>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003638:	f000 f80a 	bl	8003650 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40022000 	.word	0x40022000

08003650 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 8003670:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f043 0310 	orr.w	r3, r3, #16
 8003678:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 8003690:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <FLASH_SetErrorCode+0x9c>)
 80036b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f240 1201 	movw	r2, #257	; 0x101
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d106      	bne.n	80036d6 <FLASH_SetErrorCode+0x86>
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	61d3      	str	r3, [r2, #28]
}  
 80036d4:	e002      	b.n	80036dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <FLASH_SetErrorCode+0x98>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60d3      	str	r3, [r2, #12]
}  
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40022000 	.word	0x40022000
 80036ec:	20000a50 	.word	0x20000a50

080036f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_FLASHEx_Erase+0xd0>)
 8003704:	7e1b      	ldrb	r3, [r3, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_FLASHEx_Erase+0x1e>
 800370a:	2302      	movs	r3, #2
 800370c:	e053      	b.n	80037b6 <HAL_FLASHEx_Erase+0xc6>
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_FLASHEx_Erase+0xd0>)
 8003710:	2201      	movs	r2, #1
 8003712:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d116      	bne.n	800374a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800371c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003720:	f7ff ff50 	bl	80035c4 <FLASH_WaitForLastOperation>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d141      	bne.n	80037ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800372a:	2001      	movs	r0, #1
 800372c:	f000 f84c 	bl	80037c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003734:	f7ff ff46 	bl	80035c4 <FLASH_WaitForLastOperation>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_FLASHEx_Erase+0xd4>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <HAL_FLASHEx_Erase+0xd4>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6113      	str	r3, [r2, #16]
 8003748:	e031      	b.n	80037ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800374a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800374e:	f7ff ff39 	bl	80035c4 <FLASH_WaitForLastOperation>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d12a      	bne.n	80037ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	e019      	b.n	800379c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003768:	68b8      	ldr	r0, [r7, #8]
 800376a:	f000 f849 	bl	8003800 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800376e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003772:	f7ff ff27 	bl	80035c4 <FLASH_WaitForLastOperation>
 8003776:	4603      	mov	r3, r0
 8003778:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_FLASHEx_Erase+0xd4>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <HAL_FLASHEx_Erase+0xd4>)
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	601a      	str	r2, [r3, #0]
            break;
 8003792:	e00c      	b.n	80037ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	029a      	lsls	r2, r3, #10
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	4413      	add	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3dc      	bcc.n	8003768 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_FLASHEx_Erase+0xd0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	761a      	strb	r2, [r3, #24]

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000a50 	.word	0x20000a50
 80037c4:	40022000 	.word	0x40022000

080037c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <FLASH_MassErase+0x30>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <FLASH_MassErase+0x34>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <FLASH_MassErase+0x34>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <FLASH_MassErase+0x34>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <FLASH_MassErase+0x34>)
 80037e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	20000a50 	.word	0x20000a50
 80037fc:	40022000 	.word	0x40022000

08003800 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <FLASH_PageErase+0x38>)
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <FLASH_PageErase+0x3c>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <FLASH_PageErase+0x3c>)
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <FLASH_PageErase+0x3c>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <FLASH_PageErase+0x3c>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4a05      	ldr	r2, [pc, #20]	; (800383c <FLASH_PageErase+0x3c>)
 8003826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000a50 	.word	0x20000a50
 800383c:	40022000 	.word	0x40022000

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b08b      	sub	sp, #44	; 0x2c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003852:	e169      	b.n	8003b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003854:	2201      	movs	r2, #1
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	f040 8158 	bne.w	8003b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a9a      	ldr	r2, [pc, #616]	; (8003ae0 <HAL_GPIO_Init+0x2a0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 800387c:	4a98      	ldr	r2, [pc, #608]	; (8003ae0 <HAL_GPIO_Init+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d875      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 8003882:	4a98      	ldr	r2, [pc, #608]	; (8003ae4 <HAL_GPIO_Init+0x2a4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d058      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 8003888:	4a96      	ldr	r2, [pc, #600]	; (8003ae4 <HAL_GPIO_Init+0x2a4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d86f      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 800388e:	4a96      	ldr	r2, [pc, #600]	; (8003ae8 <HAL_GPIO_Init+0x2a8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d052      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 8003894:	4a94      	ldr	r2, [pc, #592]	; (8003ae8 <HAL_GPIO_Init+0x2a8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d869      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 800389a:	4a94      	ldr	r2, [pc, #592]	; (8003aec <HAL_GPIO_Init+0x2ac>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04c      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 80038a0:	4a92      	ldr	r2, [pc, #584]	; (8003aec <HAL_GPIO_Init+0x2ac>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d863      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038a6:	4a92      	ldr	r2, [pc, #584]	; (8003af0 <HAL_GPIO_Init+0x2b0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d046      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 80038ac:	4a90      	ldr	r2, [pc, #576]	; (8003af0 <HAL_GPIO_Init+0x2b0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d85d      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038b2:	2b12      	cmp	r3, #18
 80038b4:	d82a      	bhi.n	800390c <HAL_GPIO_Init+0xcc>
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d859      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_GPIO_Init+0x80>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	0800393b 	.word	0x0800393b
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003927 	.word	0x08003927
 80038cc:	08003969 	.word	0x08003969
 80038d0:	0800396f 	.word	0x0800396f
 80038d4:	0800396f 	.word	0x0800396f
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	0800396f 	.word	0x0800396f
 80038e0:	0800396f 	.word	0x0800396f
 80038e4:	0800396f 	.word	0x0800396f
 80038e8:	0800396f 	.word	0x0800396f
 80038ec:	0800396f 	.word	0x0800396f
 80038f0:	0800396f 	.word	0x0800396f
 80038f4:	0800396f 	.word	0x0800396f
 80038f8:	0800396f 	.word	0x0800396f
 80038fc:	0800396f 	.word	0x0800396f
 8003900:	0800396f 	.word	0x0800396f
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003931 	.word	0x08003931
 800390c:	4a79      	ldr	r2, [pc, #484]	; (8003af4 <HAL_GPIO_Init+0x2b4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003912:	e02c      	b.n	800396e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	623b      	str	r3, [r7, #32]
          break;
 800391a:	e029      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	3304      	adds	r3, #4
 8003922:	623b      	str	r3, [r7, #32]
          break;
 8003924:	e024      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	3308      	adds	r3, #8
 800392c:	623b      	str	r3, [r7, #32]
          break;
 800392e:	e01f      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	330c      	adds	r3, #12
 8003936:	623b      	str	r3, [r7, #32]
          break;
 8003938:	e01a      	b.n	8003970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003942:	2304      	movs	r3, #4
 8003944:	623b      	str	r3, [r7, #32]
          break;
 8003946:	e013      	b.n	8003970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003950:	2308      	movs	r3, #8
 8003952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	611a      	str	r2, [r3, #16]
          break;
 800395a:	e009      	b.n	8003970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800395c:	2308      	movs	r3, #8
 800395e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	615a      	str	r2, [r3, #20]
          break;
 8003966:	e003      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
          break;
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x130>
          break;
 800396e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2bff      	cmp	r3, #255	; 0xff
 8003974:	d801      	bhi.n	800397a <HAL_GPIO_Init+0x13a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	e001      	b.n	800397e <HAL_GPIO_Init+0x13e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d802      	bhi.n	800398c <HAL_GPIO_Init+0x14c>
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	e002      	b.n	8003992 <HAL_GPIO_Init+0x152>
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	3b08      	subs	r3, #8
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	210f      	movs	r1, #15
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	401a      	ands	r2, r3
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80b1 	beq.w	8003b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039c0:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_GPIO_Init+0x2b8>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a4c      	ldr	r2, [pc, #304]	; (8003af8 <HAL_GPIO_Init+0x2b8>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <HAL_GPIO_Init+0x2b8>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039d8:	4a48      	ldr	r2, [pc, #288]	; (8003afc <HAL_GPIO_Init+0x2bc>)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a40      	ldr	r2, [pc, #256]	; (8003b00 <HAL_GPIO_Init+0x2c0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_GPIO_Init+0x1ec>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3f      	ldr	r2, [pc, #252]	; (8003b04 <HAL_GPIO_Init+0x2c4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00d      	beq.n	8003a28 <HAL_GPIO_Init+0x1e8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a3e      	ldr	r2, [pc, #248]	; (8003b08 <HAL_GPIO_Init+0x2c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <HAL_GPIO_Init+0x1e4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <HAL_GPIO_Init+0x2cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_GPIO_Init+0x1e0>
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e006      	b.n	8003a2e <HAL_GPIO_Init+0x1ee>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e004      	b.n	8003a2e <HAL_GPIO_Init+0x1ee>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e002      	b.n	8003a2e <HAL_GPIO_Init+0x1ee>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_GPIO_Init+0x1ee>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	f002 0203 	and.w	r2, r2, #3
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	4093      	lsls	r3, r2
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a3e:	492f      	ldr	r1, [pc, #188]	; (8003afc <HAL_GPIO_Init+0x2bc>)
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	492c      	ldr	r1, [pc, #176]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	4928      	ldr	r1, [pc, #160]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a80:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	4922      	ldr	r1, [pc, #136]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	491e      	ldr	r1, [pc, #120]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4918      	ldr	r1, [pc, #96]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ab6:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	4914      	ldr	r1, [pc, #80]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d021      	beq.n	8003b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	490e      	ldr	r1, [pc, #56]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e021      	b.n	8003b22 <HAL_GPIO_Init+0x2e2>
 8003ade:	bf00      	nop
 8003ae0:	10320000 	.word	0x10320000
 8003ae4:	10310000 	.word	0x10310000
 8003ae8:	10220000 	.word	0x10220000
 8003aec:	10210000 	.word	0x10210000
 8003af0:	10120000 	.word	0x10120000
 8003af4:	10110000 	.word	0x10110000
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010800 	.word	0x40010800
 8003b04:	40010c00 	.word	0x40010c00
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	40011400 	.word	0x40011400
 8003b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	4909      	ldr	r1, [pc, #36]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f ae8e 	bne.w	8003854 <HAL_GPIO_Init+0x14>
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	372c      	adds	r7, #44	; 0x2c
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	40010400 	.word	0x40010400

08003b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e001      	b.n	8003b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	807b      	strh	r3, [r7, #2]
 8003b82:	4613      	mov	r3, r2
 8003b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b86:	787b      	ldrb	r3, [r7, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b92:	e003      	b.n	8003b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	041a      	lsls	r2, r3, #16
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	611a      	str	r2, [r3, #16]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e12b      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe fcd2 	bl	8002578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f001 f960 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a81      	ldr	r2, [pc, #516]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d807      	bhi.n	8003c2c <HAL_I2C_Init+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_I2C_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e006      	b.n	8003c3a <HAL_I2C_Init+0x92>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_I2C_Init+0x27c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a78      	ldr	r2, [pc, #480]	; (8003e28 <HAL_I2C_Init+0x280>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9b      	lsrs	r3, r3, #18
 8003c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d802      	bhi.n	8003c7c <HAL_I2C_Init+0xd4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e009      	b.n	8003c90 <HAL_I2C_Init+0xe8>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a69      	ldr	r2, [pc, #420]	; (8003e2c <HAL_I2C_Init+0x284>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	3301      	adds	r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495c      	ldr	r1, [pc, #368]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d819      	bhi.n	8003ce4 <HAL_I2C_Init+0x13c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e59      	subs	r1, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_I2C_Init+0x138>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	e051      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e04f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <HAL_I2C_Init+0x168>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e012      	b.n	8003d36 <HAL_I2C_Init+0x18e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x196>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_I2C_Init+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e58      	subs	r0, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	e00f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	000186a0 	.word	0x000186a0
 8003e20:	001e847f 	.word	0x001e847f
 8003e24:	003d08ff 	.word	0x003d08ff
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	10624dd3 	.word	0x10624dd3

08003e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
 8003e40:	4613      	mov	r3, r2
 8003e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7fe fd16 	bl	8002874 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 80e0 	bne.w	8004018 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4970      	ldr	r1, [pc, #448]	; (8004024 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fa92 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e0d3      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_Master_Transmit+0x50>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0cc      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d007      	beq.n	8003ea6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	; 0x21
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f9ca 	bl	8004288 <I2C_MasterRequestWrite>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e08d      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f14:	e066      	b.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fb50 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06b      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_I2C_Master_Transmit+0x188>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	6a39      	ldr	r1, [r7, #32]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb47 	bl	8004650 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01a      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d194      	bne.n	8003f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000

0800402c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	460b      	mov	r3, r1
 800403a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7fe fc1a 	bl	8002874 <HAL_GetTick>
 8004040:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 8111 	bne.w	8004276 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	4988      	ldr	r1, [pc, #544]	; (8004280 <HAL_I2C_IsDeviceReady+0x254>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f994 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e104      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_IsDeviceReady+0x50>
 8004078:	2302      	movs	r3, #2
 800407a:	e0fd      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d007      	beq.n	80040a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2224      	movs	r2, #36	; 0x24
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a70      	ldr	r2, [pc, #448]	; (8004284 <HAL_I2C_IsDeviceReady+0x258>)
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f952 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fc:	d103      	bne.n	8004106 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0b6      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800410a:	897b      	ldrh	r3, [r7, #10]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004118:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe fbab 	bl	8002874 <HAL_GetTick>
 800411e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800414e:	e025      	b.n	800419c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe fb90 	bl	8002874 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <HAL_I2C_IsDeviceReady+0x13a>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	22a0      	movs	r2, #160	; 0xa0
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2ba0      	cmp	r3, #160	; 0xa0
 80041a6:	d005      	beq.n	80041b4 <HAL_I2C_IsDeviceReady+0x188>
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_I2C_IsDeviceReady+0x188>
 80041ae:	7dbb      	ldrb	r3, [r7, #22]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0cd      	beq.n	8004150 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d129      	bne.n	800421e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2319      	movs	r3, #25
 80041f6:	2201      	movs	r2, #1
 80041f8:	4921      	ldr	r1, [pc, #132]	; (8004280 <HAL_I2C_IsDeviceReady+0x254>)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f8c6 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e036      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e02c      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004236:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2319      	movs	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	490f      	ldr	r1, [pc, #60]	; (8004280 <HAL_I2C_IsDeviceReady+0x254>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f8a2 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e012      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3301      	adds	r3, #1
 8004256:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	f4ff af32 	bcc.w	80040c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	00100002 	.word	0x00100002
 8004284:	ffff0000 	.word	0xffff0000

08004288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d006      	beq.n	80042b2 <I2C_MasterRequestWrite+0x2a>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d003      	beq.n	80042b2 <I2C_MasterRequestWrite+0x2a>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b0:	d108      	bne.n	80042c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e00b      	b.n	80042dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	2b12      	cmp	r3, #18
 80042ca:	d107      	bne.n	80042dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f84f 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	d103      	bne.n	800430c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e035      	b.n	800437c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d108      	bne.n	800432c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800431a:	897b      	ldrh	r3, [r7, #10]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e01b      	b.n	8004364 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	11db      	asrs	r3, r3, #7
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f063 030f 	orn	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	490e      	ldr	r1, [pc, #56]	; (8004384 <I2C_MasterRequestWrite+0xfc>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f898 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e010      	b.n	800437c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4907      	ldr	r1, [pc, #28]	; (8004388 <I2C_MasterRequestWrite+0x100>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f888 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	00010008 	.word	0x00010008
 8004388:	00010002 	.word	0x00010002

0800438c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	e048      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d044      	beq.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fe fa65 	bl	8002874 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d139      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e023      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10d      	bne.n	8004456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	e00c      	b.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d093      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448e:	e071      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	d123      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e067      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d041      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fe f9c0 	bl	8002874 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d136      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e00b      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e021      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10c      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e00b      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6d 	bne.w	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045cc:	e034      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f886 	bl	80046e0 <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d028      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe f945 	bl	8002874 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d016      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d1c3      	bne.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f83e 	bl	80046e0 <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d028      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe f8fd 	bl	8002874 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11d      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1c3      	bne.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f6:	d11b      	bne.n	8004730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f043 0204 	orr.w	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e272      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8087 	beq.w	800486a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800475c:	4b92      	ldr	r3, [pc, #584]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b04      	cmp	r3, #4
 8004766:	d00c      	beq.n	8004782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004768:	4b8f      	ldr	r3, [pc, #572]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b08      	cmp	r3, #8
 8004772:	d112      	bne.n	800479a <HAL_RCC_OscConfig+0x5e>
 8004774:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d10b      	bne.n	800479a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004782:	4b89      	ldr	r3, [pc, #548]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d06c      	beq.n	8004868 <HAL_RCC_OscConfig+0x12c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d168      	bne.n	8004868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e24c      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x76>
 80047a4:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7f      	ldr	r2, [pc, #508]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e02e      	b.n	8004810 <HAL_RCC_OscConfig+0xd4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x98>
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4b78      	ldr	r3, [pc, #480]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a77      	ldr	r2, [pc, #476]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0xd4>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0xbc>
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a71      	ldr	r2, [pc, #452]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b6f      	ldr	r3, [pc, #444]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6e      	ldr	r2, [pc, #440]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0xd4>
 80047f8:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe f82c 	bl	8002874 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe f828 	bl	8002874 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e200      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b5d      	ldr	r3, [pc, #372]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0xe4>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe f818 	bl	8002874 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe f814 	bl	8002874 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1ec      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x10c>
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004876:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b08      	cmp	r3, #8
 800488c:	d11c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x18c>
 800488e:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x176>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1c0      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4939      	ldr	r1, [pc, #228]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	e03a      	b.n	800493e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fd ffcd 	bl	8002874 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd ffc9 	bl	8002874 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1a1      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4927      	ldr	r1, [pc, #156]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd ffac 	bl	8002874 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004920:	f7fd ffa8 	bl	8002874 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e180      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d03a      	beq.n	80049c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d019      	beq.n	8004986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004958:	f7fd ff8c 	bl	8002874 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004960:	f7fd ff88 	bl	8002874 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e160      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCC_OscConfig+0x26c>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800497e:	2001      	movs	r0, #1
 8004980:	f000 face 	bl	8004f20 <RCC_Delay>
 8004984:	e01c      	b.n	80049c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498c:	f7fd ff72 	bl	8002874 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004992:	e00f      	b.n	80049b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004994:	f7fd ff6e 	bl	8002874 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d908      	bls.n	80049b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e146      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	42420000 	.word	0x42420000
 80049b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	4b92      	ldr	r3, [pc, #584]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e9      	bne.n	8004994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a6 	beq.w	8004b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d2:	4b8b      	ldr	r3, [pc, #556]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4a87      	ldr	r2, [pc, #540]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e8:	61d3      	str	r3, [r2, #28]
 80049ea:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <HAL_RCC_OscConfig+0x4c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d118      	bne.n	8004a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a06:	4b7f      	ldr	r3, [pc, #508]	; (8004c04 <HAL_RCC_OscConfig+0x4c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7e      	ldr	r2, [pc, #504]	; (8004c04 <HAL_RCC_OscConfig+0x4c8>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a12:	f7fd ff2f 	bl	8002874 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7fd ff2b 	bl	8002874 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b64      	cmp	r3, #100	; 0x64
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e103      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	4b75      	ldr	r3, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x4c8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x312>
 8004a40:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4a6e      	ldr	r2, [pc, #440]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6213      	str	r3, [r2, #32]
 8004a4c:	e02d      	b.n	8004aaa <HAL_RCC_OscConfig+0x36e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x334>
 8004a56:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	6213      	str	r3, [r2, #32]
 8004a62:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	6213      	str	r3, [r2, #32]
 8004a6e:	e01c      	b.n	8004aaa <HAL_RCC_OscConfig+0x36e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b05      	cmp	r3, #5
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCC_OscConfig+0x356>
 8004a78:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4a60      	ldr	r2, [pc, #384]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	6213      	str	r3, [r2, #32]
 8004a84:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6213      	str	r3, [r2, #32]
 8004a90:	e00b      	b.n	8004aaa <HAL_RCC_OscConfig+0x36e>
 8004a92:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a5a      	ldr	r2, [pc, #360]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	6213      	str	r3, [r2, #32]
 8004a9e:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d015      	beq.n	8004ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fd fedf 	bl	8002874 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd fedb 	bl	8002874 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0b1      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ee      	beq.n	8004aba <HAL_RCC_OscConfig+0x37e>
 8004adc:	e014      	b.n	8004b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ade:	f7fd fec9 	bl	8002874 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fd fec5 	bl	8002874 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e09b      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ee      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d105      	bne.n	8004b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0e:	4b3c      	ldr	r3, [pc, #240]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8087 	beq.w	8004c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d061      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d146      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fe99 	bl	8002874 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fd fe95 	bl	8002874 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e06d      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b58:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6c:	d108      	bne.n	8004b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	4921      	ldr	r1, [pc, #132]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b80:	4b1f      	ldr	r3, [pc, #124]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a19      	ldr	r1, [r3, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	430b      	orrs	r3, r1
 8004b92:	491b      	ldr	r1, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd fe69 	bl	8002874 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fd fe65 	bl	8002874 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03d      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x46a>
 8004bc4:	e035      	b.n	8004c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fe52 	bl	8002874 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd fe4e 	bl	8002874 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e026      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x498>
 8004bf2:	e01e      	b.n	8004c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e019      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_OscConfig+0x500>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000

08004c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0d0      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d910      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 0207 	bic.w	r2, r3, #7
 8004c6a:	4965      	ldr	r1, [pc, #404]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d040      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d115      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e073      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06b      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4936      	ldr	r1, [pc, #216]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d30:	f7fd fda0 	bl	8002874 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fd fd9c 	bl	8002874 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e053      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 020c 	and.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1eb      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d210      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 0207 	bic.w	r2, r3, #7
 8004d76:	4922      	ldr	r1, [pc, #136]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e032      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dce:	f000 f821 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	490a      	ldr	r1, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1c8>)
 8004de0:	5ccb      	ldrb	r3, [r1, r3]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1cc>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1d0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fcfe 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40022000 	.word	0x40022000
 8004e04:	40021000 	.word	0x40021000
 8004e08:	08007c70 	.word	0x08007c70
 8004e0c:	20000010 	.word	0x20000010
 8004e10:	20000014 	.word	0x20000014

08004e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d002      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x30>
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x36>
 8004e42:	e027      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_GetSysClockFreq+0x98>)
 8004e46:	613b      	str	r3, [r7, #16]
      break;
 8004e48:	e027      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	0c9b      	lsrs	r3, r3, #18
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
 8004e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	0c5b      	lsrs	r3, r3, #17
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <HAL_RCC_GetSysClockFreq+0x98>)
 8004e76:	fb03 f202 	mul.w	r2, r3, r2
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e004      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e88:	fb02 f303 	mul.w	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	613b      	str	r3, [r7, #16]
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetSysClockFreq+0x98>)
 8004e96:	613b      	str	r3, [r7, #16]
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	693b      	ldr	r3, [r7, #16]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	007a1200 	.word	0x007a1200
 8004eb0:	08007c88 	.word	0x08007c88
 8004eb4:	08007c98 	.word	0x08007c98
 8004eb8:	003d0900 	.word	0x003d0900

08004ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	20000010 	.word	0x20000010

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ed4:	f7ff fff2 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4903      	ldr	r1, [pc, #12]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	08007c80 	.word	0x08007c80

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004efc:	f7ff ffde 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0adb      	lsrs	r3, r3, #11
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	08007c80 	.word	0x08007c80

08004f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <RCC_Delay+0x34>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <RCC_Delay+0x38>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0a5b      	lsrs	r3, r3, #9
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f3c:	bf00      	nop
  }
  while (Delay --);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	60fa      	str	r2, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f9      	bne.n	8004f3c <RCC_Delay+0x1c>
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	20000010 	.word	0x20000010
 8004f58:	10624dd3 	.word	0x10624dd3

08004f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e042      	b.n	8004ff4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd fb36 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fe57 	bl	8005c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b20      	cmp	r3, #32
 800501a:	d16d      	bne.n	80050f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Transmit+0x2c>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e066      	b.n	80050fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503a:	f7fd fc1b 	bl	8002874 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005054:	d108      	bne.n	8005068 <HAL_UART_Transmit+0x6c>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e003      	b.n	8005070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005070:	e02a      	b.n	80050c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fba6 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e036      	b.n	80050fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3302      	adds	r3, #2
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e007      	b.n	80050ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1cf      	bne.n	8005072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2140      	movs	r1, #64	; 0x40
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fb76 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b08a      	sub	sp, #40	; 0x28
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b20      	cmp	r3, #32
 8005120:	d17c      	bne.n	800521c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Receive+0x2c>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e075      	b.n	800521e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2222      	movs	r2, #34	; 0x22
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005146:	f7fd fb95 	bl	8002874 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d108      	bne.n	8005174 <HAL_UART_Receive+0x72>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e003      	b.n	800517c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800517c:	e043      	b.n	8005206 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2120      	movs	r1, #32
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fb20 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e042      	b.n	800521e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3302      	adds	r3, #2
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e01f      	b.n	80051f8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	d007      	beq.n	80051d2 <HAL_UART_Receive+0xd0>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_UART_Receive+0xde>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e008      	b.n	80051f2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1b6      	bne.n	800517e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b20      	cmp	r3, #32
 800523e:	d112      	bne.n	8005266 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Receive_IT+0x26>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e00b      	b.n	8005268 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	461a      	mov	r2, r3
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fb24 	bl	80058aa <UART_Start_Receive_IT>
 8005262:	4603      	mov	r3, r0
 8005264:	e000      	b.n	8005268 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b0ba      	sub	sp, #232	; 0xe8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_UART_IRQHandler+0x66>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fc01 	bl	8005ad6 <UART_Receive_IT>
      return;
 80052d4:	e25b      	b.n	800578e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80de 	beq.w	800549c <HAL_UART_IRQHandler+0x22c>
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80d1 	beq.w	800549c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <HAL_UART_IRQHandler+0xae>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_UART_IRQHandler+0xd2>
 800532a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f043 0202 	orr.w	r2, r3, #2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_UART_IRQHandler+0xf6>
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <HAL_UART_IRQHandler+0x126>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800537e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	f043 0208 	orr.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 81f2 	beq.w	8005784 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_UART_IRQHandler+0x14e>
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fb8c 	bl	8005ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <HAL_UART_IRQHandler+0x17a>
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04f      	beq.n	800548a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa96 	bl	800591c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d041      	beq.n	8005482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800542a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800542e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d9      	bne.n	80053fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	4a7e      	ldr	r2, [pc, #504]	; (8005650 <HAL_UART_IRQHandler+0x3e0>)
 8005458:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd ff76 	bl	8003350 <HAL_DMA_Abort_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	e00e      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f993 	bl	80057a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e00a      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f98f 	bl	80057a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e006      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f98b 	bl	80057a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005496:	e175      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	bf00      	nop
    return;
 800549a:	e173      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 814f 	bne.w	8005744 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8148 	beq.w	8005744 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8141 	beq.w	8005744 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80b6 	beq.w	8005654 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8145 	beq.w	8005788 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005506:	429a      	cmp	r2, r3
 8005508:	f080 813e 	bcs.w	8005788 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005512:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b20      	cmp	r3, #32
 800551c:	f000 8088 	beq.w	8005630 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800553a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800554c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005558:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1d9      	bne.n	8005520 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800557c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005590:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005594:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005598:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e1      	bne.n	800556c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e3      	bne.n	80055a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005600:	f023 0310 	bic.w	r3, r3, #16
 8005604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005612:	65ba      	str	r2, [r7, #88]	; 0x58
 8005614:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e3      	bne.n	80055ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd fe55 	bl	80032da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563e:	b29b      	uxth	r3, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8b6 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564c:	e09c      	b.n	8005788 <HAL_UART_IRQHandler+0x518>
 800564e:	bf00      	nop
 8005650:	080059e1 	.word	0x080059e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 808e 	beq.w	800578c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8089 	beq.w	800578c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800569e:	647a      	str	r2, [r7, #68]	; 0x44
 80056a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	623b      	str	r3, [r7, #32]
   return(result);
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056d6:	633a      	str	r2, [r7, #48]	; 0x30
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e3      	bne.n	80056b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60fb      	str	r3, [r7, #12]
   return(result);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800571c:	61fa      	str	r2, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	617b      	str	r3, [r7, #20]
   return(result);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f83b 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005742:	e023      	b.n	800578c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_UART_IRQHandler+0x4f4>
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f953 	bl	8005a08 <UART_Transmit_IT>
    return;
 8005762:	e014      	b.n	800578e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00e      	beq.n	800578e <HAL_UART_IRQHandler+0x51e>
 8005770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f992 	bl	8005aa6 <UART_EndTransmit_IT>
    return;
 8005782:	e004      	b.n	800578e <HAL_UART_IRQHandler+0x51e>
    return;
 8005784:	bf00      	nop
 8005786:	e002      	b.n	800578e <HAL_UART_IRQHandler+0x51e>
      return;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_UART_IRQHandler+0x51e>
      return;
 800578c:	bf00      	nop
  }
}
 800578e:	37e8      	adds	r7, #232	; 0xe8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b090      	sub	sp, #64	; 0x40
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057de:	e050      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d04c      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0x30>
 80057ee:	f7fd f841 	bl	8002874 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d241      	bcs.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581e:	637a      	str	r2, [r7, #52]	; 0x34
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	613b      	str	r3, [r7, #16]
   return(result);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005852:	623a      	str	r2, [r7, #32]
 8005854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	69f9      	ldr	r1, [r7, #28]
 8005858:	6a3a      	ldr	r2, [r7, #32]
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e00f      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4013      	ands	r3, r2
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	429a      	cmp	r2, r3
 800589e:	d09f      	beq.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3740      	adds	r7, #64	; 0x40
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2222      	movs	r2, #34	; 0x22
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0220 	orr.w	r2, r2, #32
 800590e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b095      	sub	sp, #84	; 0x54
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005944:	643a      	str	r2, [r7, #64]	; 0x40
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800594a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	61fb      	str	r3, [r7, #28]
   return(result);
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800597e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	2b01      	cmp	r3, #1
 8005992:	d119      	bne.n	80059c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059b4:	61ba      	str	r2, [r7, #24]
 80059b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	613b      	str	r3, [r7, #16]
   return(result);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059d6:	bf00      	nop
 80059d8:	3754      	adds	r7, #84	; 0x54
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff fed3 	bl	80057a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b21      	cmp	r3, #33	; 0x21
 8005a1a:	d13e      	bne.n	8005a9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a24:	d114      	bne.n	8005a50 <UART_Transmit_IT+0x48>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d110      	bne.n	8005a50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]
 8005a4e:	e008      	b.n	8005a62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6211      	str	r1, [r2, #32]
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr

08005aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fe64 	bl	8005794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08c      	sub	sp, #48	; 0x30
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b22      	cmp	r3, #34	; 0x22
 8005ae8:	f040 80ae 	bne.w	8005c48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d117      	bne.n	8005b26 <UART_Receive_IT+0x50>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d113      	bne.n	8005b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	1c9a      	adds	r2, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28
 8005b24:	e026      	b.n	8005b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b38:	d007      	beq.n	8005b4a <UART_Receive_IT+0x74>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <UART_Receive_IT+0x82>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e008      	b.n	8005b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d15d      	bne.n	8005c44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0220 	bic.w	r2, r2, #32
 8005b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d135      	bne.n	8005c3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf4:	623a      	str	r2, [r7, #32]
 8005bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d10a      	bne.n	8005c2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fdc0 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
 8005c38:	e002      	b.n	8005c40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb f870 	bl	8000d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e002      	b.n	8005c4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3730      	adds	r7, #48	; 0x30
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c8e:	f023 030c 	bic.w	r3, r3, #12
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2c      	ldr	r2, [pc, #176]	; (8005d68 <UART_SetConfig+0x114>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7ff f91c 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	e002      	b.n	8005cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7ff f904 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009a      	lsls	r2, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	4a22      	ldr	r2, [pc, #136]	; (8005d6c <UART_SetConfig+0x118>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	0119      	lsls	r1, r3, #4
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009a      	lsls	r2, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <UART_SetConfig+0x118>)
 8005d02:	fba3 0302 	umull	r0, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2064      	movs	r0, #100	; 0x64
 8005d0a:	fb00 f303 	mul.w	r3, r0, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	; 0x32
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <UART_SetConfig+0x118>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d20:	4419      	add	r1, r3
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009a      	lsls	r2, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <UART_SetConfig+0x118>)
 8005d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	2064      	movs	r0, #100	; 0x64
 8005d42:	fb00 f303 	mul.w	r3, r0, r3
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	3332      	adds	r3, #50	; 0x32
 8005d4c:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <UART_SetConfig+0x118>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	51eb851f 	.word	0x51eb851f

08005d70 <siprintf>:
 8005d70:	b40e      	push	{r1, r2, r3}
 8005d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d76:	b500      	push	{lr}
 8005d78:	b09c      	sub	sp, #112	; 0x70
 8005d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	9006      	str	r0, [sp, #24]
 8005d80:	9107      	str	r1, [sp, #28]
 8005d82:	9104      	str	r1, [sp, #16]
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <siprintf+0x38>)
 8005d86:	4909      	ldr	r1, [pc, #36]	; (8005dac <siprintf+0x3c>)
 8005d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8c:	9105      	str	r1, [sp, #20]
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	a902      	add	r1, sp, #8
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	f000 f98e 	bl	80060b4 <_svfiprintf_r>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	9b02      	ldr	r3, [sp, #8]
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	b01c      	add	sp, #112	; 0x70
 8005da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da4:	b003      	add	sp, #12
 8005da6:	4770      	bx	lr
 8005da8:	20000068 	.word	0x20000068
 8005dac:	ffff0208 	.word	0xffff0208

08005db0 <memset>:
 8005db0:	4603      	mov	r3, r0
 8005db2:	4402      	add	r2, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <__errno>:
 8005dc0:	4b01      	ldr	r3, [pc, #4]	; (8005dc8 <__errno+0x8>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000068 	.word	0x20000068

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	2600      	movs	r6, #0
 8005dd0:	4d0c      	ldr	r5, [pc, #48]	; (8005e04 <__libc_init_array+0x38>)
 8005dd2:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd4:	1b64      	subs	r4, r4, r5
 8005dd6:	10a4      	asrs	r4, r4, #2
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	f000 fc7a 	bl	80066d4 <_init>
 8005de0:	2600      	movs	r6, #0
 8005de2:	4d0a      	ldr	r5, [pc, #40]	; (8005e0c <__libc_init_array+0x40>)
 8005de4:	4c0a      	ldr	r4, [pc, #40]	; (8005e10 <__libc_init_array+0x44>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08007cd0 	.word	0x08007cd0
 8005e08:	08007cd0 	.word	0x08007cd0
 8005e0c:	08007cd0 	.word	0x08007cd0
 8005e10:	08007cd4 	.word	0x08007cd4

08005e14 <__retarget_lock_acquire_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_release_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <_free_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d040      	beq.n	8005ea2 <_free_r+0x8a>
 8005e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e24:	1f0c      	subs	r4, r1, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	18e4      	addlt	r4, r4, r3
 8005e2c:	f000 f8dc 	bl	8005fe8 <__malloc_lock>
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <_free_r+0x8c>)
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	b933      	cbnz	r3, 8005e44 <_free_r+0x2c>
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6014      	str	r4, [r2, #0]
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e40:	f000 b8d8 	b.w	8005ff4 <__malloc_unlock>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d908      	bls.n	8005e5a <_free_r+0x42>
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	1821      	adds	r1, r4, r0
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf01      	itttt	eq
 8005e50:	6819      	ldreq	r1, [r3, #0]
 8005e52:	685b      	ldreq	r3, [r3, #4]
 8005e54:	1809      	addeq	r1, r1, r0
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	e7ed      	b.n	8005e36 <_free_r+0x1e>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b10b      	cbz	r3, 8005e64 <_free_r+0x4c>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9fa      	bls.n	8005e5a <_free_r+0x42>
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	1850      	adds	r0, r2, r1
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d10b      	bne.n	8005e84 <_free_r+0x6c>
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	4401      	add	r1, r0
 8005e70:	1850      	adds	r0, r2, r1
 8005e72:	4283      	cmp	r3, r0
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	d1e0      	bne.n	8005e3a <_free_r+0x22>
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4408      	add	r0, r1
 8005e7e:	6010      	str	r0, [r2, #0]
 8005e80:	6053      	str	r3, [r2, #4]
 8005e82:	e7da      	b.n	8005e3a <_free_r+0x22>
 8005e84:	d902      	bls.n	8005e8c <_free_r+0x74>
 8005e86:	230c      	movs	r3, #12
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	e7d6      	b.n	8005e3a <_free_r+0x22>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	1821      	adds	r1, r4, r0
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf01      	itttt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	1809      	addeq	r1, r1, r0
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6054      	str	r4, [r2, #4]
 8005ea0:	e7cb      	b.n	8005e3a <_free_r+0x22>
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	20000bb0 	.word	0x20000bb0

08005ea8 <sbrk_aligned>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4e0e      	ldr	r6, [pc, #56]	; (8005ee4 <sbrk_aligned+0x3c>)
 8005eac:	460c      	mov	r4, r1
 8005eae:	6831      	ldr	r1, [r6, #0]
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	b911      	cbnz	r1, 8005eba <sbrk_aligned+0x12>
 8005eb4:	f000 fbaa 	bl	800660c <_sbrk_r>
 8005eb8:	6030      	str	r0, [r6, #0]
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 fba5 	bl	800660c <_sbrk_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d00a      	beq.n	8005edc <sbrk_aligned+0x34>
 8005ec6:	1cc4      	adds	r4, r0, #3
 8005ec8:	f024 0403 	bic.w	r4, r4, #3
 8005ecc:	42a0      	cmp	r0, r4
 8005ece:	d007      	beq.n	8005ee0 <sbrk_aligned+0x38>
 8005ed0:	1a21      	subs	r1, r4, r0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 fb9a 	bl	800660c <_sbrk_r>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d101      	bne.n	8005ee0 <sbrk_aligned+0x38>
 8005edc:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	20000bb4 	.word	0x20000bb4

08005ee8 <_malloc_r>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	1ccd      	adds	r5, r1, #3
 8005eee:	f025 0503 	bic.w	r5, r5, #3
 8005ef2:	3508      	adds	r5, #8
 8005ef4:	2d0c      	cmp	r5, #12
 8005ef6:	bf38      	it	cc
 8005ef8:	250c      	movcc	r5, #12
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	4607      	mov	r7, r0
 8005efe:	db01      	blt.n	8005f04 <_malloc_r+0x1c>
 8005f00:	42a9      	cmp	r1, r5
 8005f02:	d905      	bls.n	8005f10 <_malloc_r+0x28>
 8005f04:	230c      	movs	r3, #12
 8005f06:	2600      	movs	r6, #0
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fe4 <_malloc_r+0xfc>
 8005f14:	f000 f868 	bl	8005fe8 <__malloc_lock>
 8005f18:	f8d8 3000 	ldr.w	r3, [r8]
 8005f1c:	461c      	mov	r4, r3
 8005f1e:	bb5c      	cbnz	r4, 8005f78 <_malloc_r+0x90>
 8005f20:	4629      	mov	r1, r5
 8005f22:	4638      	mov	r0, r7
 8005f24:	f7ff ffc0 	bl	8005ea8 <sbrk_aligned>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d155      	bne.n	8005fda <_malloc_r+0xf2>
 8005f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005f32:	4626      	mov	r6, r4
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	d145      	bne.n	8005fc4 <_malloc_r+0xdc>
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	d048      	beq.n	8005fce <_malloc_r+0xe6>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4638      	mov	r0, r7
 8005f42:	eb04 0903 	add.w	r9, r4, r3
 8005f46:	f000 fb61 	bl	800660c <_sbrk_r>
 8005f4a:	4581      	cmp	r9, r0
 8005f4c:	d13f      	bne.n	8005fce <_malloc_r+0xe6>
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	4638      	mov	r0, r7
 8005f52:	1a6d      	subs	r5, r5, r1
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7ff ffa7 	bl	8005ea8 <sbrk_aligned>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d037      	beq.n	8005fce <_malloc_r+0xe6>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	442b      	add	r3, r5
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	f8d8 3000 	ldr.w	r3, [r8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d038      	beq.n	8005fde <_malloc_r+0xf6>
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	42a2      	cmp	r2, r4
 8005f70:	d12b      	bne.n	8005fca <_malloc_r+0xe2>
 8005f72:	2200      	movs	r2, #0
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e00f      	b.n	8005f98 <_malloc_r+0xb0>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	1b52      	subs	r2, r2, r5
 8005f7c:	d41f      	bmi.n	8005fbe <_malloc_r+0xd6>
 8005f7e:	2a0b      	cmp	r2, #11
 8005f80:	d917      	bls.n	8005fb2 <_malloc_r+0xca>
 8005f82:	1961      	adds	r1, r4, r5
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	6025      	str	r5, [r4, #0]
 8005f88:	bf18      	it	ne
 8005f8a:	6059      	strne	r1, [r3, #4]
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	bf08      	it	eq
 8005f90:	f8c8 1000 	streq.w	r1, [r8]
 8005f94:	5162      	str	r2, [r4, r5]
 8005f96:	604b      	str	r3, [r1, #4]
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f104 060b 	add.w	r6, r4, #11
 8005f9e:	f000 f829 	bl	8005ff4 <__malloc_unlock>
 8005fa2:	f026 0607 	bic.w	r6, r6, #7
 8005fa6:	1d23      	adds	r3, r4, #4
 8005fa8:	1af2      	subs	r2, r6, r3
 8005faa:	d0ae      	beq.n	8005f0a <_malloc_r+0x22>
 8005fac:	1b9b      	subs	r3, r3, r6
 8005fae:	50a3      	str	r3, [r4, r2]
 8005fb0:	e7ab      	b.n	8005f0a <_malloc_r+0x22>
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	6862      	ldr	r2, [r4, #4]
 8005fb6:	d1dd      	bne.n	8005f74 <_malloc_r+0x8c>
 8005fb8:	f8c8 2000 	str.w	r2, [r8]
 8005fbc:	e7ec      	b.n	8005f98 <_malloc_r+0xb0>
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	6864      	ldr	r4, [r4, #4]
 8005fc2:	e7ac      	b.n	8005f1e <_malloc_r+0x36>
 8005fc4:	4634      	mov	r4, r6
 8005fc6:	6876      	ldr	r6, [r6, #4]
 8005fc8:	e7b4      	b.n	8005f34 <_malloc_r+0x4c>
 8005fca:	4613      	mov	r3, r2
 8005fcc:	e7cc      	b.n	8005f68 <_malloc_r+0x80>
 8005fce:	230c      	movs	r3, #12
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	f000 f80e 	bl	8005ff4 <__malloc_unlock>
 8005fd8:	e797      	b.n	8005f0a <_malloc_r+0x22>
 8005fda:	6025      	str	r5, [r4, #0]
 8005fdc:	e7dc      	b.n	8005f98 <_malloc_r+0xb0>
 8005fde:	605b      	str	r3, [r3, #4]
 8005fe0:	deff      	udf	#255	; 0xff
 8005fe2:	bf00      	nop
 8005fe4:	20000bb0 	.word	0x20000bb0

08005fe8 <__malloc_lock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_lock+0x8>)
 8005fea:	f7ff bf13 	b.w	8005e14 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20000bac 	.word	0x20000bac

08005ff4 <__malloc_unlock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_unlock+0x8>)
 8005ff6:	f7ff bf0e 	b.w	8005e16 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20000bac 	.word	0x20000bac

08006000 <__ssputs_r>:
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	461f      	mov	r7, r3
 8006006:	688e      	ldr	r6, [r1, #8]
 8006008:	4682      	mov	sl, r0
 800600a:	42be      	cmp	r6, r7
 800600c:	460c      	mov	r4, r1
 800600e:	4690      	mov	r8, r2
 8006010:	680b      	ldr	r3, [r1, #0]
 8006012:	d82c      	bhi.n	800606e <__ssputs_r+0x6e>
 8006014:	898a      	ldrh	r2, [r1, #12]
 8006016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800601a:	d026      	beq.n	800606a <__ssputs_r+0x6a>
 800601c:	6965      	ldr	r5, [r4, #20]
 800601e:	6909      	ldr	r1, [r1, #16]
 8006020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006024:	eba3 0901 	sub.w	r9, r3, r1
 8006028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800602c:	1c7b      	adds	r3, r7, #1
 800602e:	444b      	add	r3, r9
 8006030:	106d      	asrs	r5, r5, #1
 8006032:	429d      	cmp	r5, r3
 8006034:	bf38      	it	cc
 8006036:	461d      	movcc	r5, r3
 8006038:	0553      	lsls	r3, r2, #21
 800603a:	d527      	bpl.n	800608c <__ssputs_r+0x8c>
 800603c:	4629      	mov	r1, r5
 800603e:	f7ff ff53 	bl	8005ee8 <_malloc_r>
 8006042:	4606      	mov	r6, r0
 8006044:	b360      	cbz	r0, 80060a0 <__ssputs_r+0xa0>
 8006046:	464a      	mov	r2, r9
 8006048:	6921      	ldr	r1, [r4, #16]
 800604a:	f000 fafd 	bl	8006648 <memcpy>
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	6126      	str	r6, [r4, #16]
 800605c:	444e      	add	r6, r9
 800605e:	6026      	str	r6, [r4, #0]
 8006060:	463e      	mov	r6, r7
 8006062:	6165      	str	r5, [r4, #20]
 8006064:	eba5 0509 	sub.w	r5, r5, r9
 8006068:	60a5      	str	r5, [r4, #8]
 800606a:	42be      	cmp	r6, r7
 800606c:	d900      	bls.n	8006070 <__ssputs_r+0x70>
 800606e:	463e      	mov	r6, r7
 8006070:	4632      	mov	r2, r6
 8006072:	4641      	mov	r1, r8
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	f000 faaf 	bl	80065d8 <memmove>
 800607a:	2000      	movs	r0, #0
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	1b9b      	subs	r3, r3, r6
 8006080:	60a3      	str	r3, [r4, #8]
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	4433      	add	r3, r6
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	462a      	mov	r2, r5
 800608e:	f000 fae9 	bl	8006664 <_realloc_r>
 8006092:	4606      	mov	r6, r0
 8006094:	2800      	cmp	r0, #0
 8006096:	d1e0      	bne.n	800605a <__ssputs_r+0x5a>
 8006098:	4650      	mov	r0, sl
 800609a:	6921      	ldr	r1, [r4, #16]
 800609c:	f7ff febc 	bl	8005e18 <_free_r>
 80060a0:	230c      	movs	r3, #12
 80060a2:	f8ca 3000 	str.w	r3, [sl]
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	e7e9      	b.n	8006088 <__ssputs_r+0x88>

080060b4 <_svfiprintf_r>:
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	4698      	mov	r8, r3
 80060ba:	898b      	ldrh	r3, [r1, #12]
 80060bc:	4607      	mov	r7, r0
 80060be:	061b      	lsls	r3, r3, #24
 80060c0:	460d      	mov	r5, r1
 80060c2:	4614      	mov	r4, r2
 80060c4:	b09d      	sub	sp, #116	; 0x74
 80060c6:	d50e      	bpl.n	80060e6 <_svfiprintf_r+0x32>
 80060c8:	690b      	ldr	r3, [r1, #16]
 80060ca:	b963      	cbnz	r3, 80060e6 <_svfiprintf_r+0x32>
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	f7ff ff0b 	bl	8005ee8 <_malloc_r>
 80060d2:	6028      	str	r0, [r5, #0]
 80060d4:	6128      	str	r0, [r5, #16]
 80060d6:	b920      	cbnz	r0, 80060e2 <_svfiprintf_r+0x2e>
 80060d8:	230c      	movs	r3, #12
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	e0d0      	b.n	8006284 <_svfiprintf_r+0x1d0>
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	616b      	str	r3, [r5, #20]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	2320      	movs	r3, #32
 80060ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060f0:	2330      	movs	r3, #48	; 0x30
 80060f2:	f04f 0901 	mov.w	r9, #1
 80060f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800629c <_svfiprintf_r+0x1e8>
 80060fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006102:	4623      	mov	r3, r4
 8006104:	469a      	mov	sl, r3
 8006106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800610a:	b10a      	cbz	r2, 8006110 <_svfiprintf_r+0x5c>
 800610c:	2a25      	cmp	r2, #37	; 0x25
 800610e:	d1f9      	bne.n	8006104 <_svfiprintf_r+0x50>
 8006110:	ebba 0b04 	subs.w	fp, sl, r4
 8006114:	d00b      	beq.n	800612e <_svfiprintf_r+0x7a>
 8006116:	465b      	mov	r3, fp
 8006118:	4622      	mov	r2, r4
 800611a:	4629      	mov	r1, r5
 800611c:	4638      	mov	r0, r7
 800611e:	f7ff ff6f 	bl	8006000 <__ssputs_r>
 8006122:	3001      	adds	r0, #1
 8006124:	f000 80a9 	beq.w	800627a <_svfiprintf_r+0x1c6>
 8006128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800612a:	445a      	add	r2, fp
 800612c:	9209      	str	r2, [sp, #36]	; 0x24
 800612e:	f89a 3000 	ldrb.w	r3, [sl]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80a1 	beq.w	800627a <_svfiprintf_r+0x1c6>
 8006138:	2300      	movs	r3, #0
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006142:	f10a 0a01 	add.w	sl, sl, #1
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	9307      	str	r3, [sp, #28]
 800614a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800614e:	931a      	str	r3, [sp, #104]	; 0x68
 8006150:	4654      	mov	r4, sl
 8006152:	2205      	movs	r2, #5
 8006154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006158:	4850      	ldr	r0, [pc, #320]	; (800629c <_svfiprintf_r+0x1e8>)
 800615a:	f000 fa67 	bl	800662c <memchr>
 800615e:	9a04      	ldr	r2, [sp, #16]
 8006160:	b9d8      	cbnz	r0, 800619a <_svfiprintf_r+0xe6>
 8006162:	06d0      	lsls	r0, r2, #27
 8006164:	bf44      	itt	mi
 8006166:	2320      	movmi	r3, #32
 8006168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800616c:	0711      	lsls	r1, r2, #28
 800616e:	bf44      	itt	mi
 8006170:	232b      	movmi	r3, #43	; 0x2b
 8006172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006176:	f89a 3000 	ldrb.w	r3, [sl]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d015      	beq.n	80061aa <_svfiprintf_r+0xf6>
 800617e:	4654      	mov	r4, sl
 8006180:	2000      	movs	r0, #0
 8006182:	f04f 0c0a 	mov.w	ip, #10
 8006186:	9a07      	ldr	r2, [sp, #28]
 8006188:	4621      	mov	r1, r4
 800618a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800618e:	3b30      	subs	r3, #48	; 0x30
 8006190:	2b09      	cmp	r3, #9
 8006192:	d94d      	bls.n	8006230 <_svfiprintf_r+0x17c>
 8006194:	b1b0      	cbz	r0, 80061c4 <_svfiprintf_r+0x110>
 8006196:	9207      	str	r2, [sp, #28]
 8006198:	e014      	b.n	80061c4 <_svfiprintf_r+0x110>
 800619a:	eba0 0308 	sub.w	r3, r0, r8
 800619e:	fa09 f303 	lsl.w	r3, r9, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	46a2      	mov	sl, r4
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	e7d2      	b.n	8006150 <_svfiprintf_r+0x9c>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	1d19      	adds	r1, r3, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	9103      	str	r1, [sp, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfbb      	ittet	lt
 80061b6:	425b      	neglt	r3, r3
 80061b8:	f042 0202 	orrlt.w	r2, r2, #2
 80061bc:	9307      	strge	r3, [sp, #28]
 80061be:	9307      	strlt	r3, [sp, #28]
 80061c0:	bfb8      	it	lt
 80061c2:	9204      	strlt	r2, [sp, #16]
 80061c4:	7823      	ldrb	r3, [r4, #0]
 80061c6:	2b2e      	cmp	r3, #46	; 0x2e
 80061c8:	d10c      	bne.n	80061e4 <_svfiprintf_r+0x130>
 80061ca:	7863      	ldrb	r3, [r4, #1]
 80061cc:	2b2a      	cmp	r3, #42	; 0x2a
 80061ce:	d134      	bne.n	800623a <_svfiprintf_r+0x186>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	3402      	adds	r4, #2
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	9203      	str	r2, [sp, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfb8      	it	lt
 80061de:	f04f 33ff 	movlt.w	r3, #4294967295
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80062a0 <_svfiprintf_r+0x1ec>
 80061e8:	2203      	movs	r2, #3
 80061ea:	4650      	mov	r0, sl
 80061ec:	7821      	ldrb	r1, [r4, #0]
 80061ee:	f000 fa1d 	bl	800662c <memchr>
 80061f2:	b138      	cbz	r0, 8006204 <_svfiprintf_r+0x150>
 80061f4:	2240      	movs	r2, #64	; 0x40
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	eba0 000a 	sub.w	r0, r0, sl
 80061fc:	4082      	lsls	r2, r0
 80061fe:	4313      	orrs	r3, r2
 8006200:	3401      	adds	r4, #1
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006208:	2206      	movs	r2, #6
 800620a:	4826      	ldr	r0, [pc, #152]	; (80062a4 <_svfiprintf_r+0x1f0>)
 800620c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006210:	f000 fa0c 	bl	800662c <memchr>
 8006214:	2800      	cmp	r0, #0
 8006216:	d038      	beq.n	800628a <_svfiprintf_r+0x1d6>
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <_svfiprintf_r+0x1f4>)
 800621a:	bb1b      	cbnz	r3, 8006264 <_svfiprintf_r+0x1b0>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	3307      	adds	r3, #7
 8006220:	f023 0307 	bic.w	r3, r3, #7
 8006224:	3308      	adds	r3, #8
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	4433      	add	r3, r6
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	e768      	b.n	8006102 <_svfiprintf_r+0x4e>
 8006230:	460c      	mov	r4, r1
 8006232:	2001      	movs	r0, #1
 8006234:	fb0c 3202 	mla	r2, ip, r2, r3
 8006238:	e7a6      	b.n	8006188 <_svfiprintf_r+0xd4>
 800623a:	2300      	movs	r3, #0
 800623c:	f04f 0c0a 	mov.w	ip, #10
 8006240:	4619      	mov	r1, r3
 8006242:	3401      	adds	r4, #1
 8006244:	9305      	str	r3, [sp, #20]
 8006246:	4620      	mov	r0, r4
 8006248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624c:	3a30      	subs	r2, #48	; 0x30
 800624e:	2a09      	cmp	r2, #9
 8006250:	d903      	bls.n	800625a <_svfiprintf_r+0x1a6>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0c6      	beq.n	80061e4 <_svfiprintf_r+0x130>
 8006256:	9105      	str	r1, [sp, #20]
 8006258:	e7c4      	b.n	80061e4 <_svfiprintf_r+0x130>
 800625a:	4604      	mov	r4, r0
 800625c:	2301      	movs	r3, #1
 800625e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006262:	e7f0      	b.n	8006246 <_svfiprintf_r+0x192>
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462a      	mov	r2, r5
 800626a:	4638      	mov	r0, r7
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <_svfiprintf_r+0x1f8>)
 800626e:	a904      	add	r1, sp, #16
 8006270:	f3af 8000 	nop.w
 8006274:	1c42      	adds	r2, r0, #1
 8006276:	4606      	mov	r6, r0
 8006278:	d1d6      	bne.n	8006228 <_svfiprintf_r+0x174>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	065b      	lsls	r3, r3, #25
 800627e:	f53f af2d 	bmi.w	80060dc <_svfiprintf_r+0x28>
 8006282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006284:	b01d      	add	sp, #116	; 0x74
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	ab03      	add	r3, sp, #12
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	462a      	mov	r2, r5
 8006290:	4638      	mov	r0, r7
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <_svfiprintf_r+0x1f8>)
 8006294:	a904      	add	r1, sp, #16
 8006296:	f000 f87d 	bl	8006394 <_printf_i>
 800629a:	e7eb      	b.n	8006274 <_svfiprintf_r+0x1c0>
 800629c:	08007c9a 	.word	0x08007c9a
 80062a0:	08007ca0 	.word	0x08007ca0
 80062a4:	08007ca4 	.word	0x08007ca4
 80062a8:	00000000 	.word	0x00000000
 80062ac:	08006001 	.word	0x08006001

080062b0 <_printf_common>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	4616      	mov	r6, r2
 80062b6:	4699      	mov	r9, r3
 80062b8:	688a      	ldr	r2, [r1, #8]
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	4607      	mov	r7, r0
 80062be:	4293      	cmp	r3, r2
 80062c0:	bfb8      	it	lt
 80062c2:	4613      	movlt	r3, r2
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ca:	460c      	mov	r4, r1
 80062cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d0:	b10a      	cbz	r2, 80062d6 <_printf_common+0x26>
 80062d2:	3301      	adds	r3, #1
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	0699      	lsls	r1, r3, #26
 80062da:	bf42      	ittt	mi
 80062dc:	6833      	ldrmi	r3, [r6, #0]
 80062de:	3302      	addmi	r3, #2
 80062e0:	6033      	strmi	r3, [r6, #0]
 80062e2:	6825      	ldr	r5, [r4, #0]
 80062e4:	f015 0506 	ands.w	r5, r5, #6
 80062e8:	d106      	bne.n	80062f8 <_printf_common+0x48>
 80062ea:	f104 0a19 	add.w	sl, r4, #25
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	6832      	ldr	r2, [r6, #0]
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	dc2b      	bgt.n	8006350 <_printf_common+0xa0>
 80062f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062fc:	1e13      	subs	r3, r2, #0
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	2301      	movne	r3, #1
 8006304:	0692      	lsls	r2, r2, #26
 8006306:	d430      	bmi.n	800636a <_printf_common+0xba>
 8006308:	4649      	mov	r1, r9
 800630a:	4638      	mov	r0, r7
 800630c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006310:	47c0      	blx	r8
 8006312:	3001      	adds	r0, #1
 8006314:	d023      	beq.n	800635e <_printf_common+0xae>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	2b04      	cmp	r3, #4
 8006320:	bf14      	ite	ne
 8006322:	2500      	movne	r5, #0
 8006324:	6833      	ldreq	r3, [r6, #0]
 8006326:	f04f 0600 	mov.w	r6, #0
 800632a:	bf08      	it	eq
 800632c:	68e5      	ldreq	r5, [r4, #12]
 800632e:	f104 041a 	add.w	r4, r4, #26
 8006332:	bf08      	it	eq
 8006334:	1aed      	subeq	r5, r5, r3
 8006336:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800633a:	bf08      	it	eq
 800633c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006340:	4293      	cmp	r3, r2
 8006342:	bfc4      	itt	gt
 8006344:	1a9b      	subgt	r3, r3, r2
 8006346:	18ed      	addgt	r5, r5, r3
 8006348:	42b5      	cmp	r5, r6
 800634a:	d11a      	bne.n	8006382 <_printf_common+0xd2>
 800634c:	2000      	movs	r0, #0
 800634e:	e008      	b.n	8006362 <_printf_common+0xb2>
 8006350:	2301      	movs	r3, #1
 8006352:	4652      	mov	r2, sl
 8006354:	4649      	mov	r1, r9
 8006356:	4638      	mov	r0, r7
 8006358:	47c0      	blx	r8
 800635a:	3001      	adds	r0, #1
 800635c:	d103      	bne.n	8006366 <_printf_common+0xb6>
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006366:	3501      	adds	r5, #1
 8006368:	e7c1      	b.n	80062ee <_printf_common+0x3e>
 800636a:	2030      	movs	r0, #48	; 0x30
 800636c:	18e1      	adds	r1, r4, r3
 800636e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006378:	4422      	add	r2, r4
 800637a:	3302      	adds	r3, #2
 800637c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006380:	e7c2      	b.n	8006308 <_printf_common+0x58>
 8006382:	2301      	movs	r3, #1
 8006384:	4622      	mov	r2, r4
 8006386:	4649      	mov	r1, r9
 8006388:	4638      	mov	r0, r7
 800638a:	47c0      	blx	r8
 800638c:	3001      	adds	r0, #1
 800638e:	d0e6      	beq.n	800635e <_printf_common+0xae>
 8006390:	3601      	adds	r6, #1
 8006392:	e7d9      	b.n	8006348 <_printf_common+0x98>

08006394 <_printf_i>:
 8006394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	7e0f      	ldrb	r7, [r1, #24]
 800639a:	4691      	mov	r9, r2
 800639c:	2f78      	cmp	r7, #120	; 0x78
 800639e:	4680      	mov	r8, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	469a      	mov	sl, r3
 80063a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063aa:	d807      	bhi.n	80063bc <_printf_i+0x28>
 80063ac:	2f62      	cmp	r7, #98	; 0x62
 80063ae:	d80a      	bhi.n	80063c6 <_printf_i+0x32>
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	f000 80d5 	beq.w	8006560 <_printf_i+0x1cc>
 80063b6:	2f58      	cmp	r7, #88	; 0x58
 80063b8:	f000 80c1 	beq.w	800653e <_printf_i+0x1aa>
 80063bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063c4:	e03a      	b.n	800643c <_printf_i+0xa8>
 80063c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ca:	2b15      	cmp	r3, #21
 80063cc:	d8f6      	bhi.n	80063bc <_printf_i+0x28>
 80063ce:	a101      	add	r1, pc, #4	; (adr r1, 80063d4 <_printf_i+0x40>)
 80063d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080063bd 	.word	0x080063bd
 80063e0:	080063bd 	.word	0x080063bd
 80063e4:	080063bd 	.word	0x080063bd
 80063e8:	080063bd 	.word	0x080063bd
 80063ec:	08006441 	.word	0x08006441
 80063f0:	080063bd 	.word	0x080063bd
 80063f4:	080063bd 	.word	0x080063bd
 80063f8:	080063bd 	.word	0x080063bd
 80063fc:	080063bd 	.word	0x080063bd
 8006400:	08006547 	.word	0x08006547
 8006404:	0800646d 	.word	0x0800646d
 8006408:	08006501 	.word	0x08006501
 800640c:	080063bd 	.word	0x080063bd
 8006410:	080063bd 	.word	0x080063bd
 8006414:	08006569 	.word	0x08006569
 8006418:	080063bd 	.word	0x080063bd
 800641c:	0800646d 	.word	0x0800646d
 8006420:	080063bd 	.word	0x080063bd
 8006424:	080063bd 	.word	0x080063bd
 8006428:	08006509 	.word	0x08006509
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	602a      	str	r2, [r5, #0]
 8006434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800643c:	2301      	movs	r3, #1
 800643e:	e0a0      	b.n	8006582 <_printf_i+0x1ee>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	0607      	lsls	r7, r0, #24
 8006446:	f103 0104 	add.w	r1, r3, #4
 800644a:	6029      	str	r1, [r5, #0]
 800644c:	d501      	bpl.n	8006452 <_printf_i+0xbe>
 800644e:	681e      	ldr	r6, [r3, #0]
 8006450:	e003      	b.n	800645a <_printf_i+0xc6>
 8006452:	0646      	lsls	r6, r0, #25
 8006454:	d5fb      	bpl.n	800644e <_printf_i+0xba>
 8006456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800645a:	2e00      	cmp	r6, #0
 800645c:	da03      	bge.n	8006466 <_printf_i+0xd2>
 800645e:	232d      	movs	r3, #45	; 0x2d
 8006460:	4276      	negs	r6, r6
 8006462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006466:	230a      	movs	r3, #10
 8006468:	4859      	ldr	r0, [pc, #356]	; (80065d0 <_printf_i+0x23c>)
 800646a:	e012      	b.n	8006492 <_printf_i+0xfe>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	1d19      	adds	r1, r3, #4
 8006472:	6029      	str	r1, [r5, #0]
 8006474:	0605      	lsls	r5, r0, #24
 8006476:	d501      	bpl.n	800647c <_printf_i+0xe8>
 8006478:	681e      	ldr	r6, [r3, #0]
 800647a:	e002      	b.n	8006482 <_printf_i+0xee>
 800647c:	0641      	lsls	r1, r0, #25
 800647e:	d5fb      	bpl.n	8006478 <_printf_i+0xe4>
 8006480:	881e      	ldrh	r6, [r3, #0]
 8006482:	2f6f      	cmp	r7, #111	; 0x6f
 8006484:	bf0c      	ite	eq
 8006486:	2308      	moveq	r3, #8
 8006488:	230a      	movne	r3, #10
 800648a:	4851      	ldr	r0, [pc, #324]	; (80065d0 <_printf_i+0x23c>)
 800648c:	2100      	movs	r1, #0
 800648e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006492:	6865      	ldr	r5, [r4, #4]
 8006494:	2d00      	cmp	r5, #0
 8006496:	bfa8      	it	ge
 8006498:	6821      	ldrge	r1, [r4, #0]
 800649a:	60a5      	str	r5, [r4, #8]
 800649c:	bfa4      	itt	ge
 800649e:	f021 0104 	bicge.w	r1, r1, #4
 80064a2:	6021      	strge	r1, [r4, #0]
 80064a4:	b90e      	cbnz	r6, 80064aa <_printf_i+0x116>
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	d04b      	beq.n	8006542 <_printf_i+0x1ae>
 80064aa:	4615      	mov	r5, r2
 80064ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80064b0:	fb03 6711 	mls	r7, r3, r1, r6
 80064b4:	5dc7      	ldrb	r7, [r0, r7]
 80064b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064ba:	4637      	mov	r7, r6
 80064bc:	42bb      	cmp	r3, r7
 80064be:	460e      	mov	r6, r1
 80064c0:	d9f4      	bls.n	80064ac <_printf_i+0x118>
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d10b      	bne.n	80064de <_printf_i+0x14a>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	07de      	lsls	r6, r3, #31
 80064ca:	d508      	bpl.n	80064de <_printf_i+0x14a>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	6861      	ldr	r1, [r4, #4]
 80064d0:	4299      	cmp	r1, r3
 80064d2:	bfde      	ittt	le
 80064d4:	2330      	movle	r3, #48	; 0x30
 80064d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064de:	1b52      	subs	r2, r2, r5
 80064e0:	6122      	str	r2, [r4, #16]
 80064e2:	464b      	mov	r3, r9
 80064e4:	4621      	mov	r1, r4
 80064e6:	4640      	mov	r0, r8
 80064e8:	f8cd a000 	str.w	sl, [sp]
 80064ec:	aa03      	add	r2, sp, #12
 80064ee:	f7ff fedf 	bl	80062b0 <_printf_common>
 80064f2:	3001      	adds	r0, #1
 80064f4:	d14a      	bne.n	800658c <_printf_i+0x1f8>
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	b004      	add	sp, #16
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	f043 0320 	orr.w	r3, r3, #32
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	2778      	movs	r7, #120	; 0x78
 800650a:	4832      	ldr	r0, [pc, #200]	; (80065d4 <_printf_i+0x240>)
 800650c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	6829      	ldr	r1, [r5, #0]
 8006514:	061f      	lsls	r7, r3, #24
 8006516:	f851 6b04 	ldr.w	r6, [r1], #4
 800651a:	d402      	bmi.n	8006522 <_printf_i+0x18e>
 800651c:	065f      	lsls	r7, r3, #25
 800651e:	bf48      	it	mi
 8006520:	b2b6      	uxthmi	r6, r6
 8006522:	07df      	lsls	r7, r3, #31
 8006524:	bf48      	it	mi
 8006526:	f043 0320 	orrmi.w	r3, r3, #32
 800652a:	6029      	str	r1, [r5, #0]
 800652c:	bf48      	it	mi
 800652e:	6023      	strmi	r3, [r4, #0]
 8006530:	b91e      	cbnz	r6, 800653a <_printf_i+0x1a6>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f023 0320 	bic.w	r3, r3, #32
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	2310      	movs	r3, #16
 800653c:	e7a6      	b.n	800648c <_printf_i+0xf8>
 800653e:	4824      	ldr	r0, [pc, #144]	; (80065d0 <_printf_i+0x23c>)
 8006540:	e7e4      	b.n	800650c <_printf_i+0x178>
 8006542:	4615      	mov	r5, r2
 8006544:	e7bd      	b.n	80064c2 <_printf_i+0x12e>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	6826      	ldr	r6, [r4, #0]
 800654a:	1d18      	adds	r0, r3, #4
 800654c:	6961      	ldr	r1, [r4, #20]
 800654e:	6028      	str	r0, [r5, #0]
 8006550:	0635      	lsls	r5, r6, #24
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	d501      	bpl.n	800655a <_printf_i+0x1c6>
 8006556:	6019      	str	r1, [r3, #0]
 8006558:	e002      	b.n	8006560 <_printf_i+0x1cc>
 800655a:	0670      	lsls	r0, r6, #25
 800655c:	d5fb      	bpl.n	8006556 <_printf_i+0x1c2>
 800655e:	8019      	strh	r1, [r3, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	4615      	mov	r5, r2
 8006564:	6123      	str	r3, [r4, #16]
 8006566:	e7bc      	b.n	80064e2 <_printf_i+0x14e>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	2100      	movs	r1, #0
 800656c:	1d1a      	adds	r2, r3, #4
 800656e:	602a      	str	r2, [r5, #0]
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f859 	bl	800662c <memchr>
 800657a:	b108      	cbz	r0, 8006580 <_printf_i+0x1ec>
 800657c:	1b40      	subs	r0, r0, r5
 800657e:	6060      	str	r0, [r4, #4]
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	6123      	str	r3, [r4, #16]
 8006584:	2300      	movs	r3, #0
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658a:	e7aa      	b.n	80064e2 <_printf_i+0x14e>
 800658c:	462a      	mov	r2, r5
 800658e:	4649      	mov	r1, r9
 8006590:	4640      	mov	r0, r8
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	47d0      	blx	sl
 8006596:	3001      	adds	r0, #1
 8006598:	d0ad      	beq.n	80064f6 <_printf_i+0x162>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	079b      	lsls	r3, r3, #30
 800659e:	d413      	bmi.n	80065c8 <_printf_i+0x234>
 80065a0:	68e0      	ldr	r0, [r4, #12]
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	4298      	cmp	r0, r3
 80065a6:	bfb8      	it	lt
 80065a8:	4618      	movlt	r0, r3
 80065aa:	e7a6      	b.n	80064fa <_printf_i+0x166>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4632      	mov	r2, r6
 80065b0:	4649      	mov	r1, r9
 80065b2:	4640      	mov	r0, r8
 80065b4:	47d0      	blx	sl
 80065b6:	3001      	adds	r0, #1
 80065b8:	d09d      	beq.n	80064f6 <_printf_i+0x162>
 80065ba:	3501      	adds	r5, #1
 80065bc:	68e3      	ldr	r3, [r4, #12]
 80065be:	9903      	ldr	r1, [sp, #12]
 80065c0:	1a5b      	subs	r3, r3, r1
 80065c2:	42ab      	cmp	r3, r5
 80065c4:	dcf2      	bgt.n	80065ac <_printf_i+0x218>
 80065c6:	e7eb      	b.n	80065a0 <_printf_i+0x20c>
 80065c8:	2500      	movs	r5, #0
 80065ca:	f104 0619 	add.w	r6, r4, #25
 80065ce:	e7f5      	b.n	80065bc <_printf_i+0x228>
 80065d0:	08007cab 	.word	0x08007cab
 80065d4:	08007cbc 	.word	0x08007cbc

080065d8 <memmove>:
 80065d8:	4288      	cmp	r0, r1
 80065da:	b510      	push	{r4, lr}
 80065dc:	eb01 0402 	add.w	r4, r1, r2
 80065e0:	d902      	bls.n	80065e8 <memmove+0x10>
 80065e2:	4284      	cmp	r4, r0
 80065e4:	4623      	mov	r3, r4
 80065e6:	d807      	bhi.n	80065f8 <memmove+0x20>
 80065e8:	1e43      	subs	r3, r0, #1
 80065ea:	42a1      	cmp	r1, r4
 80065ec:	d008      	beq.n	8006600 <memmove+0x28>
 80065ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065f6:	e7f8      	b.n	80065ea <memmove+0x12>
 80065f8:	4601      	mov	r1, r0
 80065fa:	4402      	add	r2, r0
 80065fc:	428a      	cmp	r2, r1
 80065fe:	d100      	bne.n	8006602 <memmove+0x2a>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800660a:	e7f7      	b.n	80065fc <memmove+0x24>

0800660c <_sbrk_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	2300      	movs	r3, #0
 8006610:	4d05      	ldr	r5, [pc, #20]	; (8006628 <_sbrk_r+0x1c>)
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fc f872 	bl	8002700 <_sbrk>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_sbrk_r+0x1a>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_sbrk_r+0x1a>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000ba8 	.word	0x20000ba8

0800662c <memchr>:
 800662c:	4603      	mov	r3, r0
 800662e:	b510      	push	{r4, lr}
 8006630:	b2c9      	uxtb	r1, r1
 8006632:	4402      	add	r2, r0
 8006634:	4293      	cmp	r3, r2
 8006636:	4618      	mov	r0, r3
 8006638:	d101      	bne.n	800663e <memchr+0x12>
 800663a:	2000      	movs	r0, #0
 800663c:	e003      	b.n	8006646 <memchr+0x1a>
 800663e:	7804      	ldrb	r4, [r0, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	428c      	cmp	r4, r1
 8006644:	d1f6      	bne.n	8006634 <memchr+0x8>
 8006646:	bd10      	pop	{r4, pc}

08006648 <memcpy>:
 8006648:	440a      	add	r2, r1
 800664a:	4291      	cmp	r1, r2
 800664c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006650:	d100      	bne.n	8006654 <memcpy+0xc>
 8006652:	4770      	bx	lr
 8006654:	b510      	push	{r4, lr}
 8006656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800665a:	4291      	cmp	r1, r2
 800665c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006660:	d1f9      	bne.n	8006656 <memcpy+0xe>
 8006662:	bd10      	pop	{r4, pc}

08006664 <_realloc_r>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	4680      	mov	r8, r0
 800666a:	4614      	mov	r4, r2
 800666c:	460e      	mov	r6, r1
 800666e:	b921      	cbnz	r1, 800667a <_realloc_r+0x16>
 8006670:	4611      	mov	r1, r2
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f7ff bc37 	b.w	8005ee8 <_malloc_r>
 800667a:	b92a      	cbnz	r2, 8006688 <_realloc_r+0x24>
 800667c:	f7ff fbcc 	bl	8005e18 <_free_r>
 8006680:	4625      	mov	r5, r4
 8006682:	4628      	mov	r0, r5
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	f000 f81b 	bl	80066c2 <_malloc_usable_size_r>
 800668c:	4284      	cmp	r4, r0
 800668e:	4607      	mov	r7, r0
 8006690:	d802      	bhi.n	8006698 <_realloc_r+0x34>
 8006692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006696:	d812      	bhi.n	80066be <_realloc_r+0x5a>
 8006698:	4621      	mov	r1, r4
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff fc24 	bl	8005ee8 <_malloc_r>
 80066a0:	4605      	mov	r5, r0
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0ed      	beq.n	8006682 <_realloc_r+0x1e>
 80066a6:	42bc      	cmp	r4, r7
 80066a8:	4622      	mov	r2, r4
 80066aa:	4631      	mov	r1, r6
 80066ac:	bf28      	it	cs
 80066ae:	463a      	movcs	r2, r7
 80066b0:	f7ff ffca 	bl	8006648 <memcpy>
 80066b4:	4631      	mov	r1, r6
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7ff fbae 	bl	8005e18 <_free_r>
 80066bc:	e7e1      	b.n	8006682 <_realloc_r+0x1e>
 80066be:	4635      	mov	r5, r6
 80066c0:	e7df      	b.n	8006682 <_realloc_r+0x1e>

080066c2 <_malloc_usable_size_r>:
 80066c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c6:	1f18      	subs	r0, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfbc      	itt	lt
 80066cc:	580b      	ldrlt	r3, [r1, r0]
 80066ce:	18c0      	addlt	r0, r0, r3
 80066d0:	4770      	bx	lr
	...

080066d4 <_init>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr

080066e0 <_fini>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr
